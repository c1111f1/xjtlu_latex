%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Nipic_3710150_201106291221216...pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: Fred
%%CreationDate: 2013/4/4, 22:46:54
%%BoundingBox: 0 0 306 79
%%HiResBoundingBox: 0 0 305.7630 78.9933
%%CropBox: 0 0 305.7630 78.9933
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1096 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2013-04-04T22:45:58+08:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2013-04-04T22:46:42+08:00"
   xmp:MetadataDate="2013-04-04T22:46:42+08:00"
   pdf:Producer="Acrobat Distiller 9.0.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:0a3a6854-00ad-4483-bb3c-21aaef65621d"
   xmpMM:InstanceID="uuid:a73d61fe-31b5-44ce-a759-68eb0a5561af">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Nipic_3710150_201106291221216...</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Fred</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -78.9932 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 78.9932 li
305.763 78.9932 li
305.763 0 li
cp
clp
[1 0 0 1 -150.833 0 ]ct
445.94 53.3972 mo
445.892 53.3972 445.826 53.3932 445.731 53.3932 cv
445.404 53.8312 445.404 53.8312 444.75 54.3622 cv
444.668 54.3953 444.597 54.4393 444.515 54.4672 cv
443.859 54.6943 443.146 54.8892 443.174 55.5872 cv
443.075 55.6143 442.991 55.6093 442.904 55.6343 cv
442.991 53.7933 442.991 53.7933 442.878 53.2722 cv
443.067 52.4133 443.233 51.6663 443.205 50.8593 cv
443.532 50.8652 443.856 50.8652 444.211 50.8762 cv
444.326 51.1113 444.439 51.3173 444.556 51.5582 cv
444.556 51.5823 444.556 51.6022 444.574 51.6022 cv
445.141 51.7733 445.448 52.7382 446.158 53.0883 cv
446.085 53.1852 446.001 53.2872 445.94 53.3972 cv
cp
173.176 78.9932 mo
173.201 78.9932 li
173.255 78.9722 li
173.269 78.9323 li
173.504 78.8232 li
173.52 78.7872 li
174.3 78.3262 li
174.316 78.2892 li
174.847 77.9772 li
174.863 77.9412 li
175.395 77.6293 li
175.409 77.5903 li
175.693 77.4302 li
175.708 77.3923 li
175.992 77.2313 li
176.006 77.1923 li
176.876 76.6633 177.728 76.0082 178.58 75.4393 cv
178.594 75.4022 li
179.003 75.1323 li
178.97 75.1083 li
179.009 75.1002 li
179.401 74.8342 li
179.368 74.8093 li
179.408 74.8032 li
180.195 74.2402 li
180.166 74.1932 li
180.183 74.2122 li
180.571 73.9462 li
180.585 73.9102 li
181.074 73.5253 li
181.091 73.5433 li
181.062 73.4963 li
181.079 73.5142 li
181.572 73.1273 li
181.589 73.1453 li
181.56 73.0983 li
181.58 73.1182 li
182.167 72.6293 li
182.186 72.6483 li
182.157 72.6013 li
182.178 72.6223 li
182.852 72.0233 li
182.877 71.9982 li
182.894 72.0173 li
183.759 71.2363 li
183.779 71.2543 li
183.752 71.2062 li
183.905 71.1893 185.429 69.6273 185.61 69.4053 cv
185.706 69.2883 187.183 67.6373 187.136 67.5233 cv
187.211 67.5233 li
187.189 67.4722 187.582 66.9532 187.664 66.8583 cv
187.778 66.7283 188.071 66.2913 188.134 66.1862 cv
188.23 66.0253 188.991 64.8972 189.006 64.7582 cv
189.031 64.7913 li
189.052 64.7623 li
189.055 64.7593 189.202 64.4603 189.259 64.3702 cv
189.295 64.3112 189.456 64.0402 189.489 63.9592 cv
189.556 63.7993 189.847 63.2863 189.936 63.1332 cv
190.271 62.5612 190.535 61.8823 190.799 61.3572 cv
190.907 61.1423 191.042 60.8262 191.169 60.5132 cv
191.256 60.3002 191.425 59.9243 191.526 59.6432 cv
191.624 59.3702 191.815 58.9633 191.875 58.7473 cv
191.942 58.5043 192.094 58.0972 192.18 57.8773 cv
192.628 56.7283 192.907 55.5023 193.285 54.2413 cv
193.416 53.8043 194.166 50.6373 194.104 50.5062 cv
194.128 50.5112 li
194.203 50.2073 li
194.203 49.9642 194.301 49.5803 194.36 49.3223 cv
194.408 49.1143 194.461 48.6652 194.504 48.4163 cv
194.604 47.8422 194.676 47.2902 194.759 46.6852 cv
194.895 45.6973 195.047 44.3983 195.122 43.4152 cv
195.261 41.4733 li
195.44 38.8513 195.512 36.0723 195.472 33.4633 cv
195.472 23.4122 li
194.725 23.4122 li
180.367 23.4122 166.009 23.4122 151.651 23.4122 cv
150.905 23.4122 li
150.905 33.4133 li
150.833 36.1102 150.952 38.8073 151.109 41.4993 cv
151.129 41.7233 li
151.167 42.3702 151.182 42.6403 151.258 43.3613 cv
151.275 43.5203 151.3 43.9603 151.319 44.0983 cv
151.34 44.2452 151.365 44.3773 151.366 44.4922 cv
151.366 44.5942 151.402 44.7272 151.402 44.8832 cv
151.402 44.9313 151.423 44.9752 151.413 45.0093 cv
151.751 47.6202 li
151.796 47.9703 152.384 51.5992 152.522 51.7003 cv
152.522 51.7003 152.497 51.7463 152.497 51.7502 cv
152.497 51.9553 152.724 52.6002 152.758 52.9252 cv
152.776 53.0953 152.865 53.2783 152.906 53.4952 cv
152.941 53.6832 153.025 53.9133 153.056 54.1072 cv
153.089 54.3082 153.171 54.4913 153.209 54.6813 cv
153.233 54.7993 153.34 55.1982 153.372 55.2792 cv
153.464 55.5142 153.63 56.0842 153.703 56.3962 cv
153.783 56.7363 153.966 57.1323 154.057 57.4843 cv
154.146 57.8292 154.327 58.2162 154.444 58.5573 cv
154.554 58.8782 154.737 59.3812 154.874 59.6973 cv
155.035 60.0693 155.232 60.5023 155.351 60.8492 cv
155.424 61.0612 155.544 61.2463 155.594 61.3713 cv
155.664 61.5452 155.756 61.7372 155.861 61.9473 cv
155.962 62.1503 156.013 62.2753 156.118 62.4852 cv
156.224 62.6962 156.293 62.8652 156.391 63.0342 cv
156.49 63.2023 156.547 63.3093 156.653 63.5182 cv
156.737 63.6852 156.861 63.9393 156.919 64.0222 cv
157.003 64.1423 157.166 64.4022 157.233 64.5452 cv
157.286 64.6583 157.487 64.9343 157.535 65.0543 cv
157.57 65.1423 158.139 66.0322 158.19 66.0872 cv
158.275 66.1772 158.383 66.4022 158.512 66.5612 cv
158.619 66.6932 158.746 66.9323 158.849 67.0443 cv
159.038 67.2512 160.199 68.8962 160.386 68.9172 cv
160.353 68.9952 160.583 69.1873 160.654 69.2703 cv
160.756 69.3873 160.866 69.5103 160.976 69.6202 cv
161.21 69.8522 161.424 70.0872 161.654 70.3112 cv
161.825 70.4763 162.937 71.5933 163.073 71.6042 cv
163.034 71.6732 163.078 71.6962 163.174 71.7053 cv
163.146 71.7523 li
163.167 71.7322 li
163.849 72.2963 li
163.864 72.3323 li
164.446 72.7943 li
164.47 72.8193 li
164.455 72.8392 li
164.57 72.9022 li
164.537 72.9272 li
164.577 72.9343 li
165.048 73.3152 li
165.066 73.2972 li
165.037 73.3442 li
165.054 73.3262 li
165.546 73.7133 li
165.564 73.6953 li
165.536 73.7443 li
165.694 73.7573 167.402 75.2203 167.604 75.2382 cv
167.59 75.2673 li
167.93 75.4813 li
167.944 75.5192 li
168.626 75.9792 li
168.641 76.0162 li
169.945 76.8832 li
169.912 76.9072 li
169.95 76.9142 li
170.242 77.0792 li
170.224 77.1113 li
170.542 77.2813 li
170.509 77.3063 li
170.547 77.3123 li
170.841 77.4802 li
170.808 77.5043 li
170.844 77.5132 li
172.234 78.3752 li
172.201 78.4003 li
172.239 78.4063 li
173.176 78.9932 li
cp
207.114 34.2692 mo
210.474 29.1392 li
207.43 24.4382 li
209.749 24.4382 li
211.722 27.5972 li
213.651 24.4382 li
215.952 24.4382 li
212.894 29.2133 li
216.254 34.2692 li
213.86 34.2692 li
211.68 30.8702 li
209.495 34.2692 li
207.114 34.2692 li
cp
217.706 26.1823 mo
219.59 26.1823 mo
217.706 26.1823 li
217.706 24.4384 li
219.59 24.4384 li
cp
217.706 26.1823 mo
cp
217.706 34.2692 mo
219.59 34.2692 mo
217.706 34.2692 li
217.706 27.1486 li
219.59 27.1486 li
cp
217.706 34.2692 mo
cp
221.947 23.9142 mo
221.947 23.7722 222.008 23.6282 222.134 23.4863 cv
222.26 23.3422 222.448 23.2712 222.697 23.2712 cv
222.983 23.2712 223.208 23.3882 223.368 23.6193 cv
223.531 23.8522 223.611 24.0933 223.611 24.3442 cv
223.611 24.8433 223.467 25.3112 223.181 25.7382 cv
222.894 26.1683 222.482 26.4893 221.947 26.7042 cv
221.731 26.4362 li
222.089 26.2213 222.358 25.9973 222.537 25.7662 cv
222.716 25.5333 222.805 25.2922 222.805 25.0402 cv
222.805 24.8622 222.663 24.7023 222.377 24.5573 cv
222.091 24.4152 221.947 24.2003 221.947 23.9142 cv
cp
227.884 29.3203 mo
226.174 29.0112 li
226.367 28.3223 226.696 27.8143 227.166 27.4822 cv
227.637 27.1533 228.333 26.9863 229.258 26.9863 cv
230.1 26.9863 230.725 27.0862 231.137 27.2852 cv
231.547 27.4843 231.837 27.7372 232.004 28.0433 cv
232.171 28.3502 232.256 28.9113 232.256 29.7302 cv
232.236 31.9302 li
232.236 32.5543 232.266 33.0173 232.327 33.3143 cv
232.387 33.6102 232.501 33.9302 232.666 34.2692 cv
230.801 34.2692 li
230.752 34.1432 230.69 33.9583 230.619 33.7133 cv
230.59 33.6002 230.567 33.5272 230.553 33.4913 cv
230.231 33.8043 229.887 34.0383 229.521 34.1962 cv
229.155 34.3513 228.763 34.4293 228.347 34.4293 cv
227.614 34.4293 227.035 34.2302 226.614 33.8342 cv
226.191 33.4362 225.98 32.9323 225.98 32.3232 cv
225.98 31.9232 226.076 31.5632 226.268 31.2482 cv
226.46 30.9323 226.731 30.6912 227.076 30.5242 cv
227.422 30.3572 227.923 30.2103 228.576 30.0853 cv
229.454 29.9202 230.066 29.7653 230.404 29.6232 cv
230.404 29.4352 li
230.404 29.0712 230.315 28.8143 230.136 28.6592 cv
229.958 28.5052 229.622 28.4282 229.125 28.4282 cv
228.789 28.4282 228.527 28.4943 228.34 28.6273 cv
228.152 28.7582 228.001 28.9882 227.884 29.3203 cv
cp
230.404 30.8492 mo
230.164 30.9302 229.782 31.0262 229.258 31.1382 cv
228.736 31.2502 228.395 31.3602 228.232 31.4653 cv
227.988 31.6412 227.864 31.8613 227.864 32.1293 cv
227.864 32.3942 227.963 32.6213 228.159 32.8132 cv
228.356 33.0052 228.605 33.1022 228.91 33.1022 cv
229.251 33.1022 229.573 32.9893 229.883 32.7682 cv
230.111 32.5983 230.26 32.3903 230.331 32.1432 cv
230.382 31.9822 230.404 31.6752 230.404 31.2252 cv
230.404 30.8492 li
cp
241.038 34.2692 mo
239.154 34.2692 li
239.154 30.6353 li
239.154 29.8652 239.112 29.3682 239.033 29.1423 cv
238.952 28.9183 238.82 28.7413 238.639 28.6152 cv
238.458 28.4922 238.24 28.4282 237.987 28.4282 cv
237.659 28.4282 237.366 28.5173 237.107 28.6962 cv
236.849 28.8762 236.67 29.1122 236.574 29.4072 cv
236.478 29.7032 236.43 30.2473 236.43 31.0443 cv
236.43 34.2692 li
234.547 34.2692 li
234.547 27.1483 li
236.295 27.1483 li
236.295 28.1943 li
236.917 27.3892 237.7 26.9863 238.643 26.9863 cv
239.058 26.9863 239.44 27.0612 239.783 27.2103 cv
240.127 27.3613 240.388 27.5513 240.564 27.7842 cv
240.74 28.0182 240.864 28.2813 240.932 28.5773 cv
241.003 28.8723 241.038 29.2933 241.038 29.8422 cv
241.038 34.2692 li
cp
251.429 24.4382 mo
253.409 24.4382 li
253.409 30.6622 li
253.409 31.4742 253.336 32.1013 253.194 32.5392 cv
253.002 33.1113 252.654 33.5712 252.148 33.9163 cv
251.642 34.2642 250.976 34.4362 250.15 34.4362 cv
249.18 34.4362 248.433 34.1663 247.909 33.6213 cv
247.388 33.0792 247.122 32.2822 247.12 31.2322 cv
248.989 31.0162 li
249.012 31.5803 249.095 31.9783 249.237 32.2112 cv
249.452 32.5643 249.779 32.7402 250.216 32.7402 cv
250.658 32.7402 250.972 32.6143 251.154 32.3602 cv
251.338 32.1083 251.429 31.5842 251.429 30.7872 cv
251.429 24.4382 li
cp
255.954 26.1823 mo
257.837 26.1823 mo
255.953 26.1823 li
255.953 24.4384 li
257.837 24.4384 li
cp
255.954 26.1823 mo
cp
255.954 34.2692 mo
257.837 34.2692 mo
255.953 34.2692 li
255.953 27.1486 li
257.837 27.1486 li
cp
255.954 34.2692 mo
cp
261.622 29.3203 mo
259.912 29.0112 li
260.105 28.3223 260.434 27.8143 260.903 27.4822 cv
261.375 27.1533 262.071 26.9863 262.995 26.9863 cv
263.838 26.9863 264.463 27.0862 264.875 27.2852 cv
265.285 27.4843 265.575 27.7372 265.742 28.0433 cv
265.909 28.3502 265.994 28.9113 265.994 29.7302 cv
265.973 31.9302 li
265.973 32.5543 266.003 33.0173 266.065 33.3143 cv
266.125 33.6102 266.239 33.9302 266.404 34.2692 cv
264.539 34.2692 li
264.49 34.1432 264.429 33.9583 264.357 33.7133 cv
264.328 33.6002 264.305 33.5272 264.291 33.4913 cv
263.968 33.8043 263.625 34.0383 263.259 34.1962 cv
262.893 34.3513 262.501 34.4293 262.084 34.4293 cv
261.352 34.4293 260.773 34.2302 260.352 33.8342 cv
259.929 33.4362 259.718 32.9323 259.718 32.3232 cv
259.718 31.9232 259.814 31.5632 260.007 31.2482 cv
260.199 30.9323 260.469 30.6912 260.814 30.5242 cv
261.16 30.3572 261.661 30.2103 262.313 30.0853 cv
263.192 29.9202 263.804 29.7653 264.142 29.6232 cv
264.142 29.4352 li
264.142 29.0712 264.053 28.8143 263.875 28.6592 cv
263.696 28.5052 263.359 28.4282 262.863 28.4282 cv
262.526 28.4282 262.265 28.4943 262.078 28.6273 cv
261.89 28.7582 261.739 28.9882 261.622 29.3203 cv
cp
264.142 30.8492 mo
263.902 30.9302 263.519 31.0262 262.995 31.1382 cv
262.474 31.2502 262.133 31.3602 261.97 31.4653 cv
261.726 31.6412 261.602 31.8613 261.602 32.1293 cv
261.602 32.3942 261.701 32.6213 261.897 32.8132 cv
262.094 33.0052 262.343 33.1022 262.648 33.1022 cv
262.989 33.1022 263.311 32.9893 263.62 32.7682 cv
263.849 32.5983 263.998 32.3903 264.069 32.1432 cv
264.119 31.9822 264.142 31.6752 264.142 31.2252 cv
264.142 30.8492 li
cp
267.861 30.6072 mo
267.861 29.9813 268.016 29.3752 268.323 28.7892 cv
268.632 28.2062 269.069 27.7573 269.635 27.4503 cv
270.2 27.1412 270.832 26.9863 271.53 26.9863 cv
272.606 26.9863 273.489 27.3362 274.178 28.0372 cv
274.867 28.7372 275.21 29.6213 275.21 30.6893 cv
275.21 31.7653 274.863 32.6583 274.169 33.3672 cv
273.473 34.0773 272.599 34.4293 271.544 34.4293 cv
270.889 34.4293 270.269 34.2833 269.676 33.9872 cv
269.083 33.6923 268.632 33.2603 268.323 32.6902 cv
268.016 32.1202 267.861 31.4263 267.861 30.6072 cv
cp
269.793 30.7073 mo
269.793 31.4152 269.96 31.9553 270.296 32.3303 cv
270.63 32.7062 271.045 32.8932 271.537 32.8932 cv
272.029 32.8932 272.441 32.7062 272.773 32.3303 cv
273.107 31.9553 273.274 31.4102 273.274 30.6943 cv
273.274 29.9982 273.107 29.4603 272.773 29.0853 cv
272.441 28.7092 272.029 28.5222 271.537 28.5222 cv
271.045 28.5222 270.63 28.7092 270.296 29.0853 cv
269.96 29.4603 269.793 30.0023 269.793 30.7073 cv
cp
280.396 27.1483 mo
280.396 28.6503 li
279.11 28.6503 li
279.11 31.5203 li
279.11 32.1013 279.121 32.4402 279.146 32.5363 cv
279.172 32.6332 279.227 32.7103 279.313 32.7742 cv
279.4 32.8362 279.508 32.8682 279.631 32.8682 cv
279.808 32.8682 280.06 32.8063 280.391 32.6873 cv
280.552 34.1472 li
280.112 34.3353 279.618 34.4293 279.062 34.4293 cv
278.723 34.4293 278.416 34.3723 278.144 34.2603 cv
277.871 34.1462 277.672 33.9973 277.544 33.8162 cv
277.416 33.6353 277.328 33.3903 277.279 33.0812 cv
277.24 32.8643 277.219 32.4202 277.219 31.7532 cv
277.219 28.6503 li
276.354 28.6503 li
276.354 27.1483 li
277.219 27.1483 li
277.219 25.7313 li
279.11 24.6332 li
279.11 27.1483 li
280.396 27.1483 li
cp
282.263 30.6072 mo
282.263 29.9813 282.418 29.3752 282.726 28.7892 cv
283.035 28.2062 283.471 27.7573 284.037 27.4503 cv
284.602 27.1412 285.234 26.9863 285.932 26.9863 cv
287.008 26.9863 287.891 27.3362 288.58 28.0372 cv
289.269 28.7372 289.612 29.6213 289.612 30.6893 cv
289.612 31.7653 289.265 32.6583 288.571 33.3672 cv
287.875 34.0773 287.001 34.4293 285.946 34.4293 cv
285.291 34.4293 284.671 34.2833 284.078 33.9872 cv
283.485 33.6923 283.035 33.2603 282.726 32.6902 cv
282.418 32.1202 282.263 31.4263 282.263 30.6072 cv
cp
284.195 30.7073 mo
284.195 31.4152 284.362 31.9553 284.698 32.3303 cv
285.032 32.7062 285.447 32.8932 285.939 32.8932 cv
286.431 32.8932 286.842 32.7062 287.175 32.3303 cv
287.509 31.9553 287.676 31.4102 287.676 30.6943 cv
287.676 29.9982 287.509 29.4603 287.175 29.0853 cv
286.842 28.7092 286.431 28.5222 285.939 28.5222 cv
285.447 28.5222 285.032 28.7092 284.698 29.0853 cv
284.362 29.4603 284.195 30.0023 284.195 30.7073 cv
cp
298.011 34.2692 mo
296.128 34.2692 li
296.128 30.6353 li
296.128 29.8652 296.087 29.3682 296.007 29.1423 cv
295.926 28.9183 295.793 28.7413 295.613 28.6152 cv
295.432 28.4922 295.215 28.4282 294.961 28.4282 cv
294.633 28.4282 294.34 28.5173 294.082 28.6962 cv
293.823 28.8762 293.644 29.1122 293.548 29.4072 cv
293.452 29.7032 293.404 30.2473 293.404 31.0443 cv
293.404 34.2692 li
291.52 34.2692 li
291.52 27.1483 li
293.269 27.1483 li
293.269 28.1943 li
293.892 27.3892 294.674 26.9863 295.617 26.9863 cv
296.032 26.9863 296.414 27.0612 296.757 27.2103 cv
297.101 27.3613 297.362 27.5513 297.538 27.7842 cv
297.714 28.0182 297.837 28.2813 297.906 28.5773 cv
297.977 28.8723 298.011 29.2933 298.011 29.8422 cv
298.011 34.2692 li
cp
300.194 34.7382 mo
302.346 34.9993 li
302.382 35.2512 302.465 35.4222 302.593 35.5162 cv
302.771 35.6512 303.056 35.7183 303.438 35.7183 cv
303.93 35.7183 304.298 35.6442 304.545 35.4963 cv
304.711 35.3972 304.836 35.2393 304.921 35.0203 cv
304.978 34.8643 305.007 34.5762 305.007 34.1542 cv
305.007 33.1152 li
304.445 33.8853 303.733 34.2692 302.875 34.2692 cv
301.918 34.2692 301.16 33.8643 300.601 33.0563 cv
300.165 32.4152 299.945 31.6213 299.945 30.6683 cv
299.945 29.4733 300.233 28.5632 300.807 27.9313 cv
301.382 27.3022 302.096 26.9863 302.95 26.9863 cv
303.829 26.9863 304.557 27.3723 305.129 28.1462 cv
305.129 27.1483 li
306.891 27.1483 li
306.891 33.5392 li
306.891 34.3793 306.823 35.0062 306.683 35.4222 cv
306.546 35.8392 306.351 36.1642 306.102 36.4022 cv
305.85 36.6382 305.516 36.8232 305.099 36.9583 cv
304.68 37.0912 304.152 37.1602 303.513 37.1602 cv
302.305 37.1602 301.448 36.9523 300.945 36.5402 cv
300.439 36.1252 300.187 35.6013 300.187 34.9672 cv
300.187 34.9033 300.189 34.8282 300.194 34.7382 cv
cp
301.876 30.5612 mo
301.876 31.3162 302.023 31.8702 302.316 32.2213 cv
302.609 32.5712 302.968 32.7473 303.399 32.7473 cv
303.859 32.7473 304.248 32.5662 304.566 32.2073 cv
304.882 31.8472 305.042 31.3143 305.042 30.6072 cv
305.042 29.8702 304.889 29.3223 304.584 28.9653 cv
304.282 28.6063 303.898 28.4282 303.433 28.4282 cv
302.98 28.4282 302.609 28.6042 302.316 28.9542 cv
302.023 29.3073 301.876 29.8403 301.876 30.5612 cv
cp
308.713 31.2023 mo
313.46 31.2023 mo
308.712 31.2023 li
308.712 29.3184 li
313.46 29.3184 li
cp
308.713 31.2023 mo
cp
315.111 34.2692 mo
315.111 24.5192 li
317.096 24.5192 li
317.096 32.6122 li
322.031 32.6122 li
322.031 34.2692 li
315.111 34.2692 li
cp
323.879 26.1823 mo
325.762 26.1823 mo
323.879 26.1823 li
323.879 24.4384 li
325.762 24.4384 li
cp
323.879 26.1823 mo
cp
323.879 34.2692 mo
325.762 34.2692 mo
323.879 34.2692 li
323.879 27.1486 li
325.762 27.1486 li
cp
323.879 34.2692 mo
cp
330.097 34.2692 mo
327.227 27.1483 li
329.204 27.1483 li
330.546 30.7833 li
330.934 31.9963 li
331.038 31.6873 331.104 31.4843 331.129 31.3853 cv
331.193 31.1832 331.26 30.9822 331.331 30.7833 cv
332.685 27.1483 li
334.624 27.1483 li
331.793 34.2692 li
330.097 34.2692 li
cp
340.345 32.0032 mo
342.225 32.3173 li
341.982 33.0052 341.602 33.5303 341.08 33.8892 cv
340.561 34.2502 339.908 34.4293 339.125 34.4293 cv
337.887 34.4293 336.972 34.0272 336.377 33.2162 cv
335.907 32.5682 335.672 31.7493 335.672 30.7623 cv
335.672 29.5812 335.98 28.6572 336.599 27.9882 cv
337.214 27.3203 337.994 26.9863 338.938 26.9863 cv
339.997 26.9863 340.833 27.3362 341.446 28.0372 cv
342.058 28.7372 342.35 29.8082 342.325 31.2523 cv
337.604 31.2523 li
337.617 31.8112 337.768 32.2452 338.059 32.5543 cv
338.35 32.8663 338.714 33.0212 339.146 33.0212 cv
339.441 33.0212 339.689 32.9412 339.89 32.7813 cv
340.092 32.6193 340.245 32.3602 340.345 32.0032 cv
cp
340.453 30.0992 mo
340.439 29.5522 340.3 29.1373 340.032 28.8533 cv
339.764 28.5703 339.437 28.4282 339.052 28.4282 cv
338.64 28.4282 338.301 28.5792 338.034 28.8793 cv
337.766 29.1763 337.633 29.5842 337.638 30.0992 cv
340.453 30.0992 li
cp
346.11 34.2692 mo
344.227 34.2692 li
344.227 27.1483 li
345.975 27.1483 li
345.975 28.1602 li
346.275 27.6813 346.545 27.3663 346.783 27.2153 cv
347.023 27.0643 347.293 26.9863 347.598 26.9863 cv
348.029 26.9863 348.44 27.1052 348.838 27.3433 cv
348.255 28.9843 li
347.94 28.7803 347.644 28.6772 347.371 28.6772 cv
347.106 28.6772 346.884 28.7482 346.701 28.8953 cv
346.515 29.0392 346.374 29.3022 346.268 29.6823 cv
346.163 30.0623 346.11 30.8593 346.11 32.0693 cv
346.11 34.2692 li
cp
350.042 27.1483 mo
351.8 27.1483 li
351.8 28.1943 li
352.026 27.8353 352.335 27.5443 352.724 27.3223 cv
353.114 27.0983 353.546 26.9863 354.02 26.9863 cv
354.846 26.9863 355.549 27.3112 356.123 27.9583 cv
356.7 28.6063 356.988 29.5112 356.988 30.6683 cv
356.988 31.8563 356.698 32.7813 356.119 33.4402 cv
355.537 34.1002 354.832 34.4293 354.006 34.4293 cv
353.612 34.4293 353.255 34.3513 352.935 34.1962 cv
352.617 34.0383 352.28 33.7703 351.926 33.3903 cv
351.926 36.9792 li
350.042 36.9792 li
350.042 27.1483 li
cp
351.907 30.5883 mo
351.907 31.3873 352.065 31.9802 352.383 32.3602 cv
352.699 32.7422 353.086 32.9352 353.544 32.9352 cv
353.981 32.9352 354.345 32.7582 354.636 32.4083 cv
354.926 32.0582 355.073 31.4813 355.073 30.6823 cv
355.073 29.9343 354.921 29.3802 354.622 29.0182 cv
354.322 28.6572 353.951 28.4763 353.509 28.4763 cv
353.05 28.4763 352.667 28.6522 352.362 29.0092 cv
352.058 29.3643 351.907 29.8903 351.907 30.5883 cv
cp
358.493 30.6072 mo
358.493 29.9813 358.649 29.3752 358.956 28.7892 cv
359.265 28.2062 359.702 27.7573 360.267 27.4503 cv
360.833 27.1412 361.464 26.9863 362.163 26.9863 cv
363.238 26.9863 364.122 27.3362 364.811 28.0372 cv
365.5 28.7372 365.843 29.6213 365.843 30.6893 cv
365.843 31.7653 365.495 32.6583 364.802 33.3672 cv
364.106 34.0773 363.232 34.4293 362.176 34.4293 cv
361.522 34.4293 360.901 34.2833 360.309 33.9872 cv
359.716 33.6923 359.265 33.2603 358.956 32.6902 cv
358.649 32.1202 358.493 31.4263 358.493 30.6072 cv
cp
360.425 30.7073 mo
360.425 31.4152 360.592 31.9553 360.929 32.3303 cv
361.263 32.7062 361.677 32.8932 362.169 32.8932 cv
362.661 32.8932 363.073 32.7062 363.406 32.3303 cv
363.74 31.9553 363.907 31.4102 363.907 30.6943 cv
363.907 29.9982 363.74 29.4603 363.406 29.0853 cv
363.073 28.7092 362.661 28.5222 362.169 28.5222 cv
361.677 28.5222 361.263 28.7092 360.929 29.0853 cv
360.592 29.4603 360.425 30.0023 360.425 30.7073 cv
cp
367.327 30.6072 mo
367.327 29.9813 367.483 29.3752 367.79 28.7892 cv
368.099 28.2062 368.536 27.7573 369.102 27.4503 cv
369.667 27.1412 370.299 26.9863 370.996 26.9863 cv
372.073 26.9863 372.956 27.3362 373.645 28.0372 cv
374.333 28.7372 374.677 29.6213 374.677 30.6893 cv
374.677 31.7653 374.329 32.6583 373.636 33.3672 cv
372.94 34.0773 372.065 34.4293 371.01 34.4293 cv
370.355 34.4293 369.736 34.2833 369.142 33.9872 cv
368.55 33.6923 368.099 33.2603 367.79 32.6902 cv
367.483 32.1202 367.327 31.4263 367.327 30.6072 cv
cp
369.259 30.7073 mo
369.259 31.4152 369.426 31.9553 369.763 32.3303 cv
370.097 32.7062 370.511 32.8932 371.003 32.8932 cv
371.495 32.8932 371.908 32.7062 372.239 32.3303 cv
372.574 31.9553 372.741 31.4102 372.741 30.6943 cv
372.741 29.9982 372.574 29.4603 372.239 29.0853 cv
371.908 28.7092 371.495 28.5222 371.003 28.5222 cv
370.511 28.5222 370.097 28.7092 369.763 29.0853 cv
369.426 29.4603 369.259 30.0023 369.259 30.7073 cv
cp
376.599 34.2692 mo
378.482 34.2692 mo
376.598 34.2692 li
376.598 24.4387 li
378.482 24.4387 li
cp
376.599 34.2692 mo
cp
387.071 24.4382 mo
389.055 24.4382 li
389.055 29.7623 li
389.055 30.6072 389.081 31.1563 389.128 31.4053 cv
389.213 31.8082 389.417 32.1312 389.735 32.3743 cv
390.056 32.6193 390.493 32.7402 391.047 32.7402 cv
391.61 32.7402 392.036 32.6262 392.322 32.3942 cv
392.608 32.1652 392.779 31.8812 392.836 31.5472 cv
392.896 31.2112 392.924 30.6553 392.924 29.8773 cv
392.924 24.4382 li
394.908 24.4382 li
394.908 29.6022 li
394.908 30.7833 394.855 31.6163 394.748 32.1042 cv
394.64 32.5912 394.444 33.0012 394.155 33.3372 cv
393.866 33.6722 393.48 33.9393 392.999 34.1382 cv
392.516 34.3383 391.884 34.4362 391.106 34.4362 cv
390.168 34.4362 389.456 34.3282 388.97 34.1113 cv
388.485 33.8942 388.103 33.6122 387.821 33.2673 cv
387.54 32.9213 387.355 32.5573 387.265 32.1772 cv
387.135 31.6143 387.071 30.7833 387.071 29.6823 cv
387.071 24.4382 li
cp
403.912 34.2692 mo
402.028 34.2692 li
402.028 30.6353 li
402.028 29.8652 401.986 29.3682 401.906 29.1423 cv
401.826 28.9183 401.693 28.7413 401.513 28.6152 cv
401.331 28.4922 401.115 28.4282 400.86 28.4282 cv
400.533 28.4282 400.24 28.5173 399.981 28.6962 cv
399.723 28.8762 399.545 29.1122 399.448 29.4072 cv
399.352 29.7032 399.304 30.2473 399.304 31.0443 cv
399.304 34.2692 li
397.42 34.2692 li
397.42 27.1483 li
399.169 27.1483 li
399.169 28.1943 li
399.791 27.3892 400.574 26.9863 401.517 26.9863 cv
401.932 26.9863 402.314 27.0612 402.657 27.2103 cv
403 27.3613 403.262 27.5513 403.437 27.7842 cv
403.614 28.0182 403.738 28.2813 403.806 28.5773 cv
403.877 28.8723 403.912 29.2933 403.912 29.8422 cv
403.912 34.2692 li
cp
406.268 26.1823 mo
408.151 26.1823 mo
406.267 26.1823 li
406.267 24.4384 li
408.151 24.4384 li
cp
406.268 26.1823 mo
cp
406.268 34.2692 mo
408.151 34.2692 mo
406.267 34.2692 li
406.267 27.1486 li
408.151 27.1486 li
cp
406.268 34.2692 mo
cp
412.486 34.2692 mo
409.615 27.1483 li
411.593 27.1483 li
412.935 30.7833 li
413.324 31.9963 li
413.427 31.6873 413.493 31.4843 413.518 31.3853 cv
413.582 31.1832 413.649 30.9822 413.72 30.7833 cv
415.075 27.1483 li
417.013 27.1483 li
414.182 34.2692 li
412.486 34.2692 li
cp
422.735 32.0032 mo
424.614 32.3173 li
424.371 33.0052 423.991 33.5303 423.469 33.8892 cv
422.95 34.2502 422.298 34.4293 421.514 34.4293 cv
420.276 34.4293 419.361 34.0272 418.766 33.2162 cv
418.296 32.5682 418.061 31.7493 418.061 30.7623 cv
418.061 29.5812 418.37 28.6572 418.988 27.9882 cv
419.603 27.3203 420.384 26.9863 421.327 26.9863 cv
422.387 26.9863 423.222 27.3362 423.835 28.0372 cv
424.447 28.7372 424.74 29.8082 424.715 31.2523 cv
419.993 31.2523 li
420.006 31.8112 420.157 32.2452 420.448 32.5543 cv
420.739 32.8663 421.103 33.0212 421.535 33.0212 cv
421.83 33.0212 422.078 32.9412 422.279 32.7813 cv
422.48 32.6193 422.634 32.3602 422.735 32.0032 cv
cp
422.842 30.0992 mo
422.828 29.5522 422.689 29.1373 422.421 28.8533 cv
422.153 28.5703 421.826 28.4282 421.442 28.4282 cv
421.029 28.4282 420.691 28.5792 420.423 28.8793 cv
420.155 29.1763 420.022 29.5842 420.027 30.0992 cv
422.842 30.0992 li
cp
428.5 34.2692 mo
426.616 34.2692 li
426.616 27.1483 li
428.365 27.1483 li
428.365 28.1602 li
428.664 27.6813 428.934 27.3663 429.172 27.2153 cv
429.413 27.0643 429.682 26.9863 429.987 26.9863 cv
430.418 26.9863 430.829 27.1052 431.228 27.3433 cv
430.644 28.9843 li
430.328 28.7803 430.033 28.6772 429.76 28.6772 cv
429.495 28.6772 429.273 28.7482 429.09 28.8953 cv
428.905 29.0392 428.763 29.3022 428.657 29.6823 cv
428.552 30.0623 428.5 30.8593 428.5 32.0693 cv
428.5 34.2692 li
cp
431.822 32.2363 mo
433.712 31.9482 li
433.793 32.3143 433.955 32.5933 434.202 32.7833 cv
434.448 32.9733 434.79 33.0703 435.235 33.0703 cv
435.722 33.0703 436.088 32.9802 436.333 32.7993 cv
436.501 32.6752 436.583 32.5062 436.583 32.2982 cv
436.583 32.1542 436.537 32.0352 436.448 31.9412 cv
436.354 31.8522 436.143 31.7703 435.818 31.6943 cv
434.299 31.3602 433.335 31.0532 432.927 30.7762 cv
432.365 30.3923 432.083 29.8563 432.083 29.1722 cv
432.083 28.5563 432.325 28.0372 432.813 27.6182 cv
433.301 27.1962 434.056 26.9863 435.079 26.9863 cv
436.054 26.9863 436.78 27.1462 437.254 27.4622 cv
437.727 27.7803 438.053 28.2493 438.231 28.8723 cv
436.455 29.1992 li
436.379 28.9222 436.235 28.7092 436.022 28.5632 cv
435.809 28.4142 435.507 28.3412 435.113 28.3412 cv
434.617 28.3412 434.262 28.4102 434.047 28.5493 cv
433.905 28.6472 433.834 28.7762 433.834 28.9313 cv
433.834 29.0662 433.896 29.1782 434.021 29.2722 cv
434.191 29.3983 434.777 29.5742 435.782 29.8032 cv
436.784 30.0303 437.485 30.3093 437.883 30.6412 cv
438.277 30.9783 438.474 31.4453 438.474 32.0422 cv
438.474 32.6943 438.201 33.2573 437.654 33.7272 cv
437.109 34.1962 436.304 34.4293 435.235 34.4293 cv
434.264 34.4293 433.497 34.2333 432.93 33.8383 cv
432.365 33.4473 431.996 32.9122 431.822 32.2363 cv
cp
440.569 26.1823 mo
442.453 26.1823 mo
440.569 26.1823 li
440.569 24.4384 li
442.453 24.4384 li
cp
440.569 26.1823 mo
cp
440.569 34.2692 mo
442.453 34.2692 mo
440.569 34.2692 li
440.569 27.1486 li
442.453 27.1486 li
cp
440.569 34.2692 mo
cp
448.094 27.1483 mo
448.094 28.6503 li
446.807 28.6503 li
446.807 31.5203 li
446.807 32.1013 446.819 32.4402 446.844 32.5363 cv
446.87 32.6332 446.924 32.7103 447.011 32.7742 cv
447.098 32.8362 447.206 32.8682 447.329 32.8682 cv
447.506 32.8682 447.758 32.8063 448.09 32.6873 cv
448.25 34.1472 li
447.81 34.3353 447.316 34.4293 446.76 34.4293 cv
446.421 34.4293 446.114 34.3723 445.842 34.2603 cv
445.569 34.1462 445.371 33.9973 445.242 33.8162 cv
445.114 33.6353 445.027 33.3903 444.977 33.0812 cv
444.938 32.8643 444.917 32.4202 444.917 31.7532 cv
444.917 28.6503 li
444.052 28.6503 li
444.052 27.1483 li
444.917 27.1483 li
444.917 25.7313 li
446.807 24.6332 li
446.807 27.1483 li
448.094 27.1483 li
cp
448.956 27.1483 mo
450.961 27.1483 li
452.664 32.2053 li
454.328 27.1483 li
456.278 27.1483 li
453.765 34.0012 li
453.314 35.2422 li
453.149 35.6563 452.991 35.9742 452.842 36.1943 cv
452.692 36.4133 452.52 36.5903 452.325 36.7272 cv
452.13 36.8632 451.893 36.9703 451.609 37.0452 cv
451.325 37.1213 451.005 37.1602 450.645 37.1602 cv
450.284 37.1602 449.929 37.1213 449.579 37.0452 cv
449.412 35.5693 li
449.707 35.6282 449.973 35.6563 450.21 35.6563 cv
450.648 35.6563 450.972 35.5283 451.183 35.2712 cv
451.392 35.0153 451.554 34.6882 451.666 34.2902 cv
448.956 27.1483 li
cp
172.654 41.4492 mo
172.654 41.5182 172.646 41.6823 172.703 41.7233 cv
172.703 41.2012 li
172.646 41.2422 172.654 41.4042 172.654 41.4492 cv
cp
172.654 42.0472 mo
172.664 42.2463 li
172.654 42.4943 li
172.703 42.4943 li
172.703 41.9722 li
172.652 41.9893 172.652 41.9952 172.654 42.0472 cv
cp
172.669 40.9532 mo
172.711 40.8862 172.703 40.9733 172.703 40.8782 cv
172.703 40.4053 li
172.644 40.4482 172.655 40.6083 172.654 40.6793 cv
172.657 40.8773 li
172.669 40.9532 li
cp
172.506 39.7172 mo
172.637 39.8652 li
172.454 40.1063 li
172.685 40.0112 172.628 40.0673 172.747 39.8132 cv
172.677 39.7422 li
172.506 39.7172 li
cp
159.664 36.5732 mo
159.708 36.5292 159.62 36.6182 159.664 36.5732 cv
cp
159.863 36.9222 mo
159.888 36.7722 li
159.896 36.6982 li
159.882 36.4692 li
159.415 36.3492 li
159.551 36.5522 159.799 36.6472 159.863 36.9222 cv
cp
184.946 36.9462 mo
184.946 36.7112 185.002 36.4902 184.86 36.4562 cv
184.752 36.4302 184.558 36.3583 184.448 36.3492 cv
184.561 36.4562 184.623 36.5173 184.729 36.6412 cv
184.769 36.6902 184.819 36.7252 184.852 36.7813 cv
184.869 36.8123 184.882 36.9003 184.946 36.9462 cv
cp
172.454 70.7833 mo
172.451 70.6592 li
172.451 70.2612 li
172.453 70.1672 li
171.857 70.0363 li
172.047 70.2012 172.048 70.2023 172.214 70.4012 cv
172.289 70.4902 172.454 70.7833 172.454 70.7833 cv
cp
182.259 28.6122 mo
182.303 28.5682 182.214 28.6563 182.259 28.6122 cv
cp
181.91 28.7363 mo
181.935 28.7612 li
181.939 28.7653 181.943 28.7422 181.945 28.7463 cv
181.949 28.7552 181.963 28.7272 181.972 28.7233 cv
182.014 28.7042 181.997 28.7183 182.033 28.7083 cv
182.11 28.6873 182.084 28.6862 182.141 28.6732 cv
182.165 28.6672 182.356 28.6122 182.358 28.6122 cv
182.43 28.6132 li
182.458 28.7112 li
182.66 28.7283 182.623 28.7592 182.806 28.6533 cv
183.279 28.6622 li
183.223 28.5782 183.033 28.5573 182.952 28.5392 cv
182.888 28.5253 182.623 28.4373 182.607 28.4373 cv
182.441 28.4373 182.025 28.6592 181.91 28.7363 cv
cp
157.773 28.6122 mo
157.817 28.5682 157.729 28.6563 157.773 28.6122 cv
cp
156.829 28.7393 mo
156.849 28.7523 li
157.374 28.6122 li
157.431 28.7252 157.534 28.7573 157.652 28.7162 cv
157.774 28.6732 157.697 28.6362 157.816 28.6512 cv
157.935 28.6652 157.976 28.6702 158.048 28.6743 cv
158.271 28.6323 li
157.498 28.4343 li
156.829 28.7393 li
cp
178.248 44.9783 mo
178.26 44.9742 178.265 45.0073 178.277 45.0002 cv
178.426 45.0082 li
178.418 45.1132 178.371 45.1042 178.476 45.1323 cv
178.501 44.9822 li
178.501 44.5103 li
178.501 44.4222 178.487 44.4033 178.426 44.3602 cv
178.397 44.4313 178.473 44.5103 178.352 44.5103 cv
178.228 44.5103 li
178.228 44.3602 li
178.106 44.3903 178.133 44.4703 178.125 44.5342 cv
178.125 44.8333 li
178.128 44.9332 li
178.12 45.0433 178.151 45.1563 178.228 45.1823 cv
178.228 45.0823 li
178.228 44.9473 178.27 45.0992 178.223 45.0032 cv
178.248 44.9783 li
cp
168.697 60.8063 mo
168.796 60.8613 169.099 60.6572 169.319 60.6572 cv
169.418 60.6572 li
169.469 60.8442 169.758 60.8182 169.866 60.6572 cv
169.961 60.7213 170.373 60.7822 170.463 60.6572 cv
170.17 60.6323 169.75 60.4573 169.562 60.4432 cv
169.487 60.4373 168.839 60.7382 168.697 60.8063 cv
cp
178.228 46.0773 mo
178.271 46.0333 178.183 46.1223 178.228 46.0773 cv
cp
178.128 46.1273 mo
178.125 46.2263 li
178.125 46.4252 li
178.128 46.5253 li
178.11 46.7582 178.159 46.7742 178.426 46.7742 cv
178.456 46.6622 178.501 46.6943 178.501 46.5753 cv
178.501 46.1022 li
178.501 46.0142 178.487 45.9952 178.423 45.9523 cv
178.402 46.1022 li
178.294 46.0582 178.228 46.1683 178.228 45.9282 cv
178.112 46.0052 178.135 46.0333 178.128 46.1273 cv
cp
167.278 53.8643 mo
167.303 53.8892 li
167.314 53.9012 167.374 53.8403 167.403 53.8403 cv
167.516 53.8403 167.526 54.0883 167.557 54.1592 cv
167.596 54.2493 167.659 54.4263 167.684 54.5253 cv
167.701 54.5862 167.788 54.8522 167.79 54.8782 cv
167.791 54.8992 167.856 55.2432 167.881 55.3043 cv
167.552 55.4072 li
167.388 55.7053 167.797 55.4742 167.932 55.3392 cv
168.133 55.1392 168.072 54.9612 168.038 54.7913 cv
167.99 54.5413 167.707 53.8953 167.714 53.6503 cv
167.801 53.5162 li
167.667 53.5272 167.307 53.8143 167.278 53.8643 cv
cp
169.185 52.5953 mo
169.378 52.7083 169.346 52.4943 169.465 52.7982 cv
169.484 52.8472 169.542 53.1453 169.553 53.1862 cv
169.6 53.3622 169.808 53.8903 169.519 53.9142 cv
169.543 53.9893 li
169.817 53.9313 170.002 53.7653 170.314 53.7653 cv
170.547 53.7653 170.597 53.7482 170.582 53.5162 cv
170.588 53.3672 li
170.488 53.3672 li
170.408 53.7482 170.268 53.5803 170.072 53.7003 cv
169.966 53.6663 li
169.983 53.6243 169.717 52.7393 169.715 52.4922 cv
169.833 52.4462 li
169.838 52.3613 li
169.185 52.5953 li
cp
175.442 52.5753 mo
175.344 52.8032 li
175.515 52.7452 li
175.461 52.6152 175.754 52.5142 175.855 52.4802 cv
176.038 52.6953 li
176.031 52.9922 175.939 53.0352 175.813 53.2432 cv
175.757 53.3353 175.46 53.6563 175.341 53.6663 cv
175.353 53.6953 li
175.299 53.7153 li
175.291 53.7902 li
175.479 53.7742 175.568 53.7543 175.708 53.7523 cv
175.789 53.7523 175.811 53.7642 175.908 53.7733 cv
175.983 53.7813 176.159 53.8403 176.162 53.8403 cv
176.299 53.8403 176.333 53.5842 176.36 53.5222 cv
176.261 53.4913 li
176.219 53.5563 176.173 53.5972 176.113 53.5842 cv
175.739 53.5662 li
175.755 53.3743 176.184 53.2012 176.326 52.9072 cv
176.422 52.7092 176.326 52.3472 175.963 52.3472 cv
175.868 52.3472 175.954 52.3552 175.889 52.3232 cv
175.442 52.5753 li
cp
171.31 52.4963 mo
171.354 52.4523 171.265 52.5402 171.31 52.4963 cv
cp
170.315 52.3073 mo
170.34 52.3613 170.347 52.3972 170.414 52.3972 cv
170.488 52.3972 li
170.536 52.6033 170.668 53.3223 170.736 53.4482 cv
170.83 53.6213 170.902 53.7032 171.104 53.7682 cv
171.39 53.8602 171.372 53.7623 171.613 53.7283 cv
171.677 53.6403 li
171.708 53.4172 li
171.725 53.3043 171.633 52.9393 171.633 52.6953 cv
171.757 52.6953 li
171.729 52.5883 171.336 52.4503 171.28 52.4183 cv
171.26 52.4462 li
171.22 52.4863 171.436 52.5712 171.474 52.6763 cv
171.499 52.7463 171.565 52.9692 171.572 53.0762 cv
171.589 53.3403 171.68 53.6423 171.335 53.7153 cv
171.216 53.6362 171.115 53.6912 171.022 53.4863 cv
170.983 53.3992 170.926 53.1882 170.924 53.0742 cv
170.921 52.9302 170.684 52.3073 170.964 52.4213 cv
170.936 52.3303 li
170.861 52.3303 li
170.315 52.3073 li
cp
167.876 53.3672 mo
167.93 53.7432 li
167.971 53.7473 li
168.099 53.3923 li
168.116 53.3702 168.295 53.2432 168.299 53.2432 cv
168.38 53.2432 168.556 53.8522 168.575 53.9113 cv
168.663 54.1802 168.794 54.3303 168.519 54.5142 cv
168.572 54.5862 li
168.702 54.5002 169.185 54.2213 169.194 54.1132 cv
169.061 54.1243 169.122 54.1633 169.07 54.1633 cv
168.948 54.1633 168.836 53.7203 168.834 53.6602 cv
168.831 53.5753 168.69 53.2292 168.647 53.0443 cv
168.746 52.8962 168.903 52.8823 169.047 52.8962 cv
169.02 52.9443 li
169.095 52.9443 li
169.095 52.9943 li
169.234 52.9612 169.192 52.7473 169.12 52.5963 cv
168.898 52.7443 168.746 52.9163 168.517 53.0082 cv
168.291 53.0983 168.145 53.3453 167.876 53.3672 cv
cp
166.333 55.7803 mo
166.377 55.7363 166.289 55.8242 166.333 55.7803 cv
cp
167.527 55.1832 mo
167.571 55.1392 167.483 55.2283 167.527 55.1832 cv
cp
167.328 55.0842 mo
167.373 55.0392 167.284 55.1282 167.328 55.0842 cv
cp
166.532 54.7852 mo
166.576 54.7413 166.488 54.8292 166.532 54.7852 cv
cp
166.815 54.1052 mo
166.815 54.1902 166.842 54.1642 166.913 54.1403 cv
166.806 54.6102 li
166.654 54.4932 li
166.573 54.3983 li
166.543 54.4053 li
166.608 54.2762 li
166.636 54.2863 li
166.61 54.2192 li
166.072 54.5673 li
166.087 54.5983 li
166.274 54.5712 li
166.635 54.9083 li
166.656 54.8853 li
166.656 54.8853 166.605 55.0853 166.595 55.1273 cv
166.574 55.2172 166.538 55.2842 166.5 55.3632 cv
166.48 55.4042 166.421 55.5563 166.387 55.6353 cv
166.338 55.7473 166.25 55.7813 166.192 55.8953 cv
166.536 55.7352 li
166.553 55.6912 li
166.681 55.6563 li
166.671 55.5392 166.665 55.5953 166.543 55.6093 cv
166.706 55.0342 li
166.781 55.0342 li
166.781 55.0842 li
166.858 55.0853 li
166.828 55.1323 li
166.847 55.1143 li
167.081 55.3353 li
166.938 55.4072 li
166.936 55.4973 li
167.133 55.4362 li
167.154 55.4072 li
167.284 55.2772 167.542 55.2733 167.652 55.1093 cv
167.538 55.0623 167.504 55.2153 167.251 55.0123 cv
167.138 54.9213 167.021 54.7612 166.88 54.7112 cv
166.88 54.3613 167.197 53.9532 167.209 53.8732 cv
166.815 54.1052 li
cp
177.145 53.2863 mo
177.146 53.3693 177.084 53.9672 176.953 53.9813 cv
176.749 54.0032 176.797 53.4163 176.796 53.3862 cv
176.795 53.1763 176.842 52.7982 177.033 52.6702 cv
177.208 52.8362 177.144 53.1403 177.145 53.2863 cv
cp
177.033 54.0883 mo
177.108 54.0883 li
177.472 54.0883 177.563 52.5712 176.983 52.5712 cv
176.361 52.5712 176.31 54.0883 177.033 54.0883 cv
cp
177.854 54.4122 mo
177.777 54.1992 177.742 54.2642 177.742 54.0452 cv
177.742 53.9373 177.742 53.8672 177.742 53.7593 cv
177.742 53.5472 177.758 53.2863 177.904 53.0693 cv
178.002 53.0992 li
177.993 53.1193 178.078 53.4973 178.078 53.5662 cv
178.078 53.6412 li
178.008 54.3132 li
177.918 54.4042 li
177.854 54.4122 li
cp
177.481 53.4172 mo
177.481 53.4183 177.506 53.4633 177.504 53.4662 cv
177.481 53.6663 li
177.481 53.7402 li
177.481 53.8563 177.516 54.0283 177.567 54.1522 cv
177.655 54.3652 177.769 54.3723 177.879 54.5363 cv
178.05 54.5363 178.097 54.5933 178.21 54.4692 cv
178.262 54.4122 178.337 54.2192 178.34 54.1563 cv
178.35 53.9792 178.393 53.6973 178.319 53.5253 cv
178.224 53.3063 178.157 53.0643 177.924 52.9722 cv
177.58 52.8353 177.573 53.3492 177.481 53.4172 cv
cp
179.024 54.2382 mo
179.068 54.1943 178.979 54.2822 179.024 54.2382 cv
cp
178.974 53.7902 mo
179.018 53.7463 178.929 53.8342 178.974 53.7902 cv
cp
178.451 54.3132 mo
178.451 54.4122 li
178.422 54.7952 178.889 55.4863 179.21 55.1702 cv
179.511 54.8743 179.172 54.0693 178.824 54.2133 cv
178.952 54.4042 179.022 54.4343 179.037 54.7183 cv
179.044 54.8593 179.071 55.0142 178.874 55.1093 cv
178.686 54.8273 178.686 54.6843 178.734 54.3492 cv
178.747 54.2532 178.759 54.1563 178.807 54.0482 cv
178.916 53.8002 178.904 53.8873 179.048 53.7952 cv
179.422 53.7943 li
179.422 53.7653 li
179.281 53.5552 178.932 53.5402 178.734 53.6752 cv
178.519 53.8223 178.467 54.1033 178.451 54.3132 cv
cp
171.509 51.7003 mo
171.553 51.6563 171.464 51.7443 171.509 51.7003 cv
cp
171.21 51.5012 mo
171.254 51.4573 171.166 51.5452 171.21 51.5012 cv
cp
175.59 51.3022 mo
175.634 51.2582 175.545 51.3463 175.59 51.3022 cv
cp
169.717 51.3022 mo
169.761 51.2582 169.673 51.3463 169.717 51.3022 cv
cp
170.563 51.2523 mo
170.607 51.2083 170.519 51.2963 170.563 51.2523 cv
cp
169.518 51.2023 mo
169.562 51.1583 169.474 51.2473 169.518 51.2023 cv
cp
169.02 50.9042 mo
169.064 50.8602 168.976 50.9482 169.02 50.9042 cv
cp
168.369 50.4523 mo
168.731 50.7263 li
168.749 50.7062 li
168.726 50.7473 li
169.717 51.3522 li
169.846 51.2902 170.027 51.2523 170.115 51.2523 cv
170.389 51.2593 li
170.513 51.2523 li
170.591 51.3043 170.928 51.3463 171.135 51.4763 cv
171.347 51.6102 171.499 51.6992 171.69 51.8672 cv
171.993 52.1373 171.965 51.9982 172.261 52.0812 cv
172.32 52.0983 172.851 52.1232 172.852 52.1202 cv
173.25 52.1202 li
173.35 52.1232 li
173.63 52.1022 173.883 52.0723 174.227 52.0383 cv
174.291 52.0322 174.541 52.0173 174.626 51.9323 cv
174.694 51.8622 174.951 51.6323 174.997 51.6553 cv
175.017 51.6252 li
175.211 51.4323 175.718 51.2523 175.988 51.2523 cv
176.261 51.2523 li
176.364 51.2523 176.425 51.2792 176.537 51.3052 cv
177.186 50.9583 li
177.202 50.9222 li
177.855 50.4462 li
177.73 50.4393 li
174.62 50.4313 171.503 50.4542 168.394 50.4272 cv
168.369 50.4523 li
cp
169.418 48.1172 mo
169.463 48.0732 169.374 48.1622 169.418 48.1172 cv
cp
170.389 48.0433 mo
170.352 47.9752 170.376 47.8353 170.376 47.7502 cv
170.376 47.6202 170.334 47.5742 170.488 47.4703 cv
170.712 47.4792 li
171.341 47.4672 171.975 47.4772 172.604 47.4742 cv
175.988 47.4703 li
176.148 47.5773 176.1 47.6063 176.1 47.7502 cv
176.1 47.7842 176.113 48.0182 176.112 48.0182 cv
176.092 48.0472 li
175.886 48.0112 li
174.136 47.9263 172.478 48.0352 170.762 48.0212 cv
170.389 48.0433 li
cp
171.907 47.9932 mo
171.862 48.0372 171.951 47.9492 171.907 47.9932 cv
cp
174.122 39.0612 mo
174.143 39.0712 174.359 38.9973 174.427 39.0062 cv
174.662 39.0363 174.572 39.0992 174.719 39.1113 cv
174.722 39.9072 li
174.897 39.7012 174.952 39.6583 175.242 39.6332 cv
176.275 41.2582 li
176.315 41.2722 li
177.058 42.4692 li
176.53 42.7852 li
176.71 42.8162 li
176.809 42.8152 li
176.909 42.8152 li
178.003 42.8333 li
178.202 42.6732 178.303 42.6113 178.54 42.7552 cv
178.71 42.8583 178.581 42.8312 178.768 42.8312 cv
178.841 42.8312 178.922 42.8152 178.974 42.8433 cv
178.851 43.0742 178.636 43.1042 178.638 43.3223 cv
178.641 43.7482 178.411 43.5602 178.426 43.7642 cv
178.423 43.8632 li
178.423 44.0623 li
178.427 44.0662 178.402 44.1113 178.402 44.1122 cv
178.531 44.1982 178.675 44.2402 178.675 44.4603 cv
178.675 45.0322 li
178.675 45.2112 178.576 45.2432 178.601 45.3063 cv
178.45 45.3193 178.419 45.3593 178.426 45.4553 cv
178.423 45.5552 li
178.423 45.6553 li
178.427 45.6583 178.402 45.7042 178.402 45.7042 cv
178.531 45.7913 178.675 45.8323 178.675 46.0522 cv
178.675 46.6252 li
178.675 46.9063 178.503 46.9482 178.302 46.9482 cv
178.089 46.9482 177.946 46.9193 177.94 46.6553 cv
177.937 46.5173 177.941 46.4102 177.941 46.2703 cv
177.941 46.1602 177.903 46.0002 178.009 45.8593 cv
178.209 45.5942 178.228 46.0062 178.228 45.3563 cv
178.128 45.3563 li
177.888 45.3563 177.941 44.7363 177.941 44.7032 cv
177.941 44.3912 177.862 44.3383 178.228 44.1373 cv
178.221 43.5643 li
177.988 43.7083 177.868 43.8262 177.608 43.9662 cv
177.497 44.0262 177.468 44.0632 177.328 44.1332 cv
177.244 44.1743 177.102 44.2393 177.046 44.2543 cv
176.809 44.3162 176.076 44.6273 175.863 44.5103 cv
175.834 42.7933 li
175.988 42.7993 li
175.991 42.7933 176.07 42.8152 176.112 42.8182 cv
176.212 42.8152 li
176.311 42.8152 li
176.461 42.8032 li
174.719 40.1563 li
174.723 41.1013 li
174.721 41.5333 174.722 41.9642 174.722 42.3953 cv
174.722 42.4952 li
174.709 42.6163 174.655 42.5693 174.445 42.5693 cv
174.31 42.5693 174.197 42.5693 174.122 42.5693 cv
174.047 42.5612 li
174.055 42.3713 li
174.036 41.3453 174.046 40.3143 174.044 39.2852 cv
174.059 39.1132 li
174.1 39.1013 li
174.122 39.0612 li
cp
178.178 44.1622 mo
178.133 44.2062 178.222 44.1172 178.178 44.1622 cv
cp
176.51 42.7933 mo
176.466 42.8372 176.555 42.7493 176.51 42.7933 cv
cp
168.693 42.6943 mo
175.515 42.6943 li
175.569 42.6943 175.698 42.8812 175.704 42.9243 cv
175.71 42.9742 175.702 43.1033 175.702 43.1722 cv
175.702 43.3433 175.702 43.4932 175.702 43.6702 cv
175.702 43.8112 175.681 44.5803 175.714 44.6592 cv
175.321 44.6923 174.793 45.1403 174.793 45.5052 cv
174.793 45.6793 li
174.793 45.9263 175.14 47.0002 175.416 47.0233 cv
175.389 47.0712 li
175.856 47.3353 li
175.793 47.4193 173.832 47.3593 173.568 47.3593 cv
172.669 47.3593 172.447 47.3463 170.613 47.3463 cv
170.837 47.1912 171.244 47.0433 171.364 46.8032 cv
171.478 46.5723 171.608 46.2203 171.608 46.0032 cv
171.608 45.7792 li
171.608 45.5052 171.437 45.2252 171.216 45.0012 cv
171.108 44.8912 170.594 44.5552 170.463 44.6093 cv
170.463 44.3273 170.632 44.0303 170.674 43.7703 cv
170.696 43.6343 170.749 43.4943 170.779 43.3782 cv
170.857 43.0762 170.809 43.2822 170.787 43.0173 cv
170.491 42.9542 li
170.331 43.0732 170.162 43.5782 170.126 43.6953 cv
170.097 43.7943 169.868 44.3782 169.842 44.4102 cv
169.523 44.4102 169.088 44.3732 168.888 44.1683 cv
168.709 43.9843 168.735 43.4993 168.722 43.3162 cv
168.734 43.2153 li
168.693 42.6943 li
cp
170.862 47.1973 mo
170.817 47.2413 170.906 47.1533 170.862 47.1973 cv
cp
170.563 41.8912 mo
170.638 41.8972 li
171.366 41.8923 172.099 41.8923 172.827 41.8972 cv
172.977 41.8942 li
172.964 42.5693 li
172.752 42.5883 li
172.089 42.5842 171.425 42.5883 170.762 42.5872 cv
170.563 42.5872 li
170.533 42.5953 170.314 42.6093 170.314 42.5203 cv
170.314 41.8972 li
170.439 41.8912 li
170.563 41.8912 li
cp
170.314 41.1013 mo
172.952 41.1143 li
172.981 41.1223 li
172.964 41.7982 li
172.956 41.8273 li
172.878 41.8253 li
172.05 41.8143 171.217 41.8232 170.389 41.8203 cv
170.314 41.8232 li
170.314 41.1013 li
cp
172.18 39.6583 mo
172.183 39.6542 172.399 39.4802 172.416 39.4703 cv
172.517 39.4102 172.58 39.4113 172.656 39.4302 cv
172.866 39.4852 173.002 39.6483 173.002 39.8572 cv
173.002 40.0333 172.826 40.2623 172.604 40.2803 cv
172.603 40.3123 li
172.952 40.3203 li
172.981 40.3262 li
172.964 41.0023 li
172.956 41.0313 li
172.878 41.0292 li
172.05 41.0173 171.217 41.0272 170.389 41.0233 cv
170.314 41.0182 li
170.314 40.3052 li
170.397 40.3392 171.274 40.3182 171.428 40.3182 cv
171.581 40.3182 172.472 40.3602 172.529 40.2803 cv
171.011 40.2803 li
170.931 40.1633 li
170.911 40.1813 li
170.946 40.1332 170.949 40.1392 171.036 40.1312 cv
171.584 40.0853 li
171.931 40.0482 li
171.932 40.0313 li
171.264 40.0313 171.189 40.0632 170.755 40.0922 cv
170.647 40.1002 170.36 40.2023 170.165 40.2333 cv
170.027 40.2562 169.733 40.3702 169.617 40.3802 cv
169.677 40.2662 169.792 40.0493 169.792 39.9573 cv
169.792 39.9532 169.767 39.9072 169.767 39.9072 cv
170.069 39.8823 170.474 39.7523 170.772 39.7153 cv
171.176 39.6652 171.579 39.6533 171.832 39.6332 cv
171.932 39.6362 li
172.131 39.6362 li
172.134 39.6332 172.18 39.6583 172.18 39.6583 cv
cp
172.566 40.3303 mo
172.608 40.3093 li
172.529 40.2972 li
172.566 40.3303 li
cp
171.011 39.6832 mo
170.967 39.7272 171.055 39.6392 171.011 39.6832 cv
cp
173.123 40.8022 mo
173.123 40.7032 li
173.117 40.1553 173.132 39.6083 173.129 39.0612 cv
173.126 38.9622 li
173.116 38.8262 173.36 38.7632 173.499 38.7632 cv
173.73 38.7632 173.777 38.8502 173.923 38.8622 cv
173.93 39.0112 li
173.92 39.5073 173.929 40.0082 173.926 40.5043 cv
173.926 40.6042 li
173.922 40.6052 173.947 40.6932 173.947 40.7283 cv
173.947 42.5693 li
173.45 42.5693 li
173.325 42.5632 li
173.225 42.5662 li
173.101 42.5693 li
173.139 42.4943 173.118 42.5972 173.126 42.4943 cv
173.123 42.3953 li
173.123 41.8972 173.123 41.4003 173.123 40.9022 cv
173.123 40.8022 li
cp
172.154 37.0792 mo
171.683 37.1453 li
171.617 37.1893 170.903 37.3303 170.708 37.4142 cv
170.691 37.4222 170.26 37.5922 170.21 37.6042 cv
170.051 37.6392 169.864 37.7623 169.748 37.8022 cv
169.738 37.8052 169.368 38.0023 169.281 38.0532 cv
169.106 38.1553 168.953 38.2692 168.785 38.3782 cv
168.619 38.4852 168.482 38.6262 168.332 38.7213 cv
168.193 38.8093 168.03 39.0732 167.876 39.0862 cv
167.896 39.1093 li
167.796 39.2092 li
167.676 39.2852 li
167.72 39.3972 167.299 39.6953 167.244 39.8032 cv
167.171 39.9473 166.898 40.2103 166.844 40.3492 cv
166.822 40.4053 166.536 40.8412 166.464 40.9592 cv
166.372 41.1102 166.279 41.3342 166.191 41.5322 cv
165.772 42.4733 165.635 43.2352 165.558 44.2112 cv
165.551 44.3112 li
165.558 44.8082 li
165.561 44.9083 li
165.531 45.3073 165.685 45.7042 165.697 46.0842 cv
165.7 46.1613 165.814 46.5262 165.846 46.6432 cv
165.901 46.8362 166.001 47.1302 166.053 47.2813 cv
166.113 47.4553 166.207 47.6793 166.296 47.8303 cv
166.336 47.8983 166.394 48.0182 166.428 48.0972 cv
166.47 48.1943 166.519 48.2413 166.583 48.3613 cv
166.66 48.5023 166.77 48.7172 166.9 48.8713 cv
166.939 48.9172 167.25 49.3093 167.232 49.3552 cv
167.353 49.4113 li
167.316 49.5023 167.588 49.7083 167.67 49.7902 cv
167.881 50.0012 167.831 50.0212 168.056 50.0212 cv
168.179 50.0212 168.758 50.0433 168.822 50.0062 cv
167.501 49.4713 li
167.321 49.2092 li
167.627 48.5153 li
167.82 48.6083 167.831 48.4473 168.004 48.5352 cv
168.12 48.5953 168.256 48.6332 168.373 48.6902 cv
168.449 48.5773 168.9 47.3752 168.932 47.2532 cv
169.047 46.8162 169.333 46.2792 169.43 45.8602 cv
169.484 45.6262 169.633 45.4022 169.681 45.2003 cv
169.732 44.9802 169.856 44.7523 169.93 44.5043 cv
169.973 44.3622 170.433 43.0922 170.488 43.0922 cv
170.577 43.0922 170.503 43.1423 170.684 43.1442 cv
170.741 43.2183 li
168.675 48.8073 li
169.244 49.0132 li
169.255 49.1483 169.307 49.2512 169.431 49.2623 cv
169.443 48.1672 li
169.51 48.0753 171.136 48.1302 171.365 48.1302 cv
172.011 48.1302 172.648 48.1302 173.294 48.1302 cv
173.95 48.1302 174.567 48.1302 175.223 48.1302 cv
175.545 48.1302 175.858 48.1302 176.181 48.1302 cv
176.355 48.1302 176.491 48.1302 176.666 48.1302 cv
176.748 48.1302 176.82 48.1312 176.902 48.1302 cv
177.082 48.1282 177.033 48.1373 177.033 48.3412 cv
177.039 48.4163 li
177.03 48.8542 177.042 49.2972 177.033 49.7352 cv
177.033 49.8342 li
169.418 49.8342 li
169.454 49.7493 169.464 49.3102 169.402 49.2902 cv
169.12 49.9922 li
168.896 50.0082 li
168.977 50.0532 175.046 50.0212 175.708 50.0212 cv
176.289 50.0212 176.832 50.0212 177.412 50.0212 cv
177.697 50.0212 177.968 50.0142 178.258 50.0212 cv
178.38 50.0242 178.939 49.3903 179.029 49.2432 cv
179.125 49.0872 179.243 48.9683 179.365 48.7822 cv
179.448 48.6563 179.571 48.4722 179.655 48.3262 cv
179.876 47.9362 179.977 47.7042 180.14 47.2933 cv
180.425 46.5773 180.641 45.6013 180.635 45.0573 cv
180.641 44.9332 li
180.635 44.2122 li
180.641 44.0623 li
180.607 43.2252 180.239 41.8622 179.862 41.2073 cv
179.757 41.0253 179.674 40.8563 179.513 40.5872 cv
179.388 40.3782 179.243 40.1772 179.07 39.9583 cv
178.953 39.8102 178.2 38.8613 177.974 38.8333 cv
178.008 38.8082 li
177.973 38.7952 li
177.199 38.2172 li
177.182 38.2402 li
177.182 38.1912 li
177.152 38.2053 176.418 37.7902 176.249 37.7053 cv
175.983 37.5712 175.515 37.4083 175.288 37.3483 cv
174.549 37.1522 173.969 37.0212 173.3 37.0212 cv
172.877 37.0212 li
172.154 37.0792 li
cp
173.025 59.7073 mo
172.941 59.8743 172.757 60.2352 172.659 60.3403 cv
172.552 60.4532 172.377 60.8013 172.261 60.9352 cv
172.084 61.1382 171.964 61.3193 171.783 61.5032 cv
171.723 61.5643 171.555 61.6992 171.474 61.7673 cv
171.378 61.8483 171.276 62.0093 171.235 62.0502 cv
171.214 62.0792 li
171.189 62.0463 li
171.18 62.1072 170.919 62.4553 170.862 62.5482 cv
170.754 62.7233 170.663 62.9083 170.615 63.0262 cv
170.424 63.5023 170.346 63.6902 170.314 64.1152 cv
170.317 64.2153 li
170.298 64.4302 170.47 64.6873 170.619 64.8312 cv
170.821 65.0262 171.034 64.9882 171.21 65.0602 cv
171.185 64.9512 171.028 64.6483 170.998 64.5773 cv
170.898 64.3422 170.892 64.3273 170.851 64.0493 cv
170.813 63.7963 171.007 63.7582 171.213 63.8132 cv
171.329 63.8442 171.679 64.0123 171.708 64.0413 cv
171.737 64.0612 li
171.704 64.0862 li
171.818 64.1002 172.026 64.2502 172.152 64.2792 cv
172.345 64.3242 172.389 64.3502 172.579 64.3643 cv
172.679 64.3613 li
172.778 64.3613 li
173.102 64.3882 173.536 64.0383 173.73 63.8232 cv
173.867 63.6722 174.242 62.9232 174.246 62.9213 cv
174.152 62.7813 174.194 62.5212 174.432 62.3853 cv
174.618 62.2783 174.875 62.2452 175.117 62.2242 cv
176.186 62.1382 li
176.409 62.1143 li
178.128 61.8802 179.707 61.8073 181.313 60.7322 cv
181.313 61.0593 181.14 61.5422 181.077 61.8442 cv
181.003 62.1992 180.914 62.4683 180.775 62.8802 cv
180.71 63.0723 180.675 63.2053 180.589 63.4122 cv
180.505 63.6163 180.513 63.6172 180.206 63.5502 cv
180.064 63.5182 179.811 63.4822 179.694 63.4713 cv
179.565 63.4592 179.276 63.3702 179.223 63.4432 cv
180.388 63.9503 li
180.294 64.0883 180.184 64.3853 180.126 64.5062 cv
180.065 64.6382 179.928 64.9133 179.834 65.0513 cv
179.777 65.1362 179.302 65.9562 179.198 65.9562 cv
179.153 65.9562 178.223 65.3713 178.078 65.3593 cv
178.968 66.2612 li
178.696 66.5723 li
178.198 67.0212 li
178.182 67.0552 li
178.164 67.0452 177.578 67.4222 177.492 67.4622 cv
177.296 67.5543 177.001 67.6832 176.76 67.7482 cv
175.928 66.1852 li
175.847 66.2463 175.991 66.4742 176.002 66.5602 cv
176.02 66.7073 176.061 66.8043 176.099 66.9453 cv
176.144 67.1122 176.3 67.7073 176.311 67.8472 cv
176.237 67.8472 li
175.91 67.9113 175.475 67.9193 175.143 67.8622 cv
174.893 67.8422 li
175.063 68.1002 175.431 68.4122 175.573 68.6602 cv
175.661 68.8132 175.757 68.9213 175.871 69.0853 cv
175.941 69.1862 176.067 69.3862 176.129 69.4952 cv
176.426 70.0082 176.76 70.8073 176.76 71.4802 cv
176.686 71.3732 176.565 71.1373 176.469 70.9742 cv
176.411 70.8743 176.132 70.6122 176.162 70.5342 cv
176.087 70.5342 li
176.109 70.5123 li
175.958 70.3652 li
175.936 70.3832 li
175.965 70.3362 li
175.905 70.3292 175.544 70.0443 175.42 69.9833 cv
175.251 69.8992 175.024 69.8032 174.843 69.7883 cv
175.108 70.5132 li
175.096 70.5383 li
175.013 70.4152 174.314 70.1442 174.153 70.1002 cv
173.705 69.9772 173.635 69.9423 173.101 69.9863 cv
173.046 70.2252 172.94 70.3752 172.887 70.6553 cv
172.842 70.8923 172.817 71.0892 172.803 71.2813 cv
172.806 71.3802 li
172.809 71.5883 172.795 71.7963 172.823 72.0023 cv
172.94 72.7502 li
173.027 72.7482 li
173.148 72.7482 173.704 72.9402 173.877 73.0182 cv
173.962 73.0563 174.218 73.1592 174.302 73.1943 cv
174.413 73.2402 174.66 73.3132 174.669 73.4202 cv
174.273 73.3552 li
173.649 73.2963 li
172.953 73.2372 li
172.628 73.2283 li
172.205 73.2213 li
171.857 73.2402 li
171.275 73.2662 170.78 73.3983 170.19 73.7933 cv
170.225 73.3752 170.645 73.0742 171.073 72.8602 cv
171.558 72.6182 171.915 72.5313 172.405 72.4003 cv
172.405 72.3002 li
172.405 71.9213 172.405 71.7343 172.227 71.2592 cv
172.079 70.8602 171.86 70.6323 171.621 70.3223 cv
171.438 70.0833 171.056 69.7443 170.802 69.5742 cv
170.649 69.4722 169.893 69.0643 169.941 68.9423 cv
169.673 68.9202 169.085 67.9373 169.016 67.8022 cv
168.815 67.4133 168.636 66.8253 168.672 66.3552 cv
168.669 66.2552 li
168.692 65.9313 li
168.738 65.5322 168.919 65.0662 169.044 64.8303 cv
169.118 64.6912 169.188 64.5543 169.302 64.3472 cv
169.404 64.1642 169.48 63.9532 169.583 63.7813 cv
169.698 63.5872 169.896 63.0792 169.991 62.7463 cv
170.041 62.5703 170.078 62.3903 170.078 62.2432 cv
170.078 62.1693 170.078 62.1052 170.078 62.0322 cv
170.079 61.8843 170.023 61.9152 169.991 61.7772 cv
169.83 61.7632 169.681 61.6522 169.468 61.6522 cv
169.224 61.6522 169.109 61.6522 168.771 61.6522 cv
168.731 61.6522 168.374 61.7263 168.373 61.7272 cv
168.366 61.5782 li
168.37 61.4783 li
168.37 61.3782 li
168.392 61.1353 168.289 61.1572 168.174 61.0803 cv
168.129 61.1343 li
168.176 61.2073 168.199 61.2062 168.199 61.3043 cv
168.199 61.6273 li
168.199 61.9813 168.091 62.2582 168 62.6472 cv
168.25 62.9453 li
168.216 63.0112 168.224 62.9252 168.224 63.0203 cv
168.224 63.3043 167.924 63.5352 167.901 63.8173 cv
167.809 63.7112 167.814 63.5803 167.676 63.5433 cv
167.577 63.9163 167.325 63.8182 167.179 63.9163 cv
167.17 63.8843 li
166.88 63.9642 li
166.983 63.7172 166.638 63.6743 166.905 63.1693 cv
166.789 63.0922 166.644 63.0912 166.631 62.9462 cv
166.905 62.9232 166.876 62.3983 167.179 62.3983 cv
167.204 62.3983 li
167.33 62.3983 167.557 62.5082 167.726 62.5482 cv
167.794 62.2292 167.896 62.0093 167.926 61.6522 cv
167.705 61.5463 167.693 61.4562 167.676 61.2543 cv
167.328 61.2032 li
167.174 61.1772 166.288 61.2172 166.258 61.5773 cv
166.208 61.5773 li
166.159 61.3663 166.106 61.2792 166.123 61.1353 cv
166.139 61.0002 166.14 60.9783 166.178 60.9022 cv
166.23 60.7982 166.308 60.7712 166.283 60.7073 cv
166.377 60.6962 166.485 60.5773 166.577 60.5283 cv
166.659 60.4833 166.837 60.4323 166.933 60.4102 cv
167.148 60.3602 167.277 60.3093 167.576 60.3082 cv
168.099 60.3063 168.359 60.3212 168.896 60.3333 cv
169.183 60.1412 169.523 59.9603 169.817 59.9603 cv
170.14 59.9603 li
171.333 60.1483 li
171.757 60.1343 li
171.837 60.1343 172.3 60.0732 172.386 60.0383 cv
172.439 60.0153 172.964 59.7623 172.965 59.7322 cv
173.025 59.7073 li
cp
171.907 72.5242 mo
171.862 72.5693 171.951 72.4802 171.907 72.5242 cv
cp
176.386 70.8333 mo
176.342 70.8773 176.43 70.7883 176.386 70.8333 cv
cp
175.888 66.1553 mo
175.844 66.1992 175.933 66.1113 175.888 66.1553 cv
cp
178.057 65.3552 mo
178.082 65.3383 li
178.049 65.3143 li
178.033 65.3303 li
178.057 65.3552 li
cp
179.198 63.3942 mo
179.154 63.4382 179.242 63.3492 179.198 63.3942 cv
cp
180.069 61.3793 mo
180.024 61.4232 180.113 61.3342 180.069 61.3793 cv
cp
171.21 65.0602 mo
171.166 65.1052 171.254 65.0162 171.21 65.0602 cv
cp
170.812 64.9612 mo
170.768 65.0052 170.856 64.9172 170.812 64.9612 cv
cp
169.319 60.0842 mo
169.275 60.1293 169.363 60.0402 169.319 60.0842 cv
cp
169.12 60.1843 mo
169.076 60.2292 169.164 60.1403 169.12 60.1843 cv
cp
166.905 63.1453 mo
166.861 63.1893 166.949 63.1013 166.905 63.1453 cv
cp
168.224 61.0803 mo
168.18 61.1243 168.268 61.0363 168.224 61.0803 cv
cp
172.629 35.2302 mo
172.629 35.2263 172.604 35.1802 172.604 35.1802 cv
173.674 35.2012 li
173.75 35.2203 li
173.791 35.3212 173.748 35.1693 173.748 35.3043 cv
173.748 35.3602 173.83 36.1282 173.838 36.1633 cv
173.869 36.2872 174.116 36.2573 174.207 36.2673 cv
174.421 36.2902 174.522 36.3242 174.644 36.3242 cv
174.719 36.3242 li
175.085 35.3613 li
176.159 35.6403 li
175.978 36.7213 li
176.062 36.7222 li
176.253 36.7222 176.722 37.0212 176.784 37.0212 cv
176.869 37.0212 177.307 36.1752 177.431 36.1752 cv
177.44 36.1752 178.28 36.6743 178.352 36.7222 cv
177.928 37.6683 li
178.048 37.7292 li
178.026 37.7662 li
178.049 37.7432 li
178.59 38.1992 li
179.462 37.5552 li
179.579 37.6852 li
179.776 37.8862 li
180.225 38.3323 li
179.544 39.1843 li
179.569 39.1683 li
180.094 39.8383 li
180.069 39.8572 li
181.058 39.3972 li
181.613 40.3793 li
181.524 40.4033 180.766 40.9553 180.766 41.0023 cv
180.766 41.0623 181.042 41.5372 181.064 41.7982 cv
182.132 41.5872 li
182.155 41.6432 182.408 42.6672 182.408 42.6693 cv
182.408 42.6982 181.481 43.0433 181.437 43.0673 cv
181.475 43.5132 li
181.522 43.9362 li
181.836 43.9562 li
182.607 44.0402 li
182.581 44.1862 li
182.59 44.4503 182.583 44.7192 182.585 44.9833 cv
182.58 45.1572 li
182.51 45.1273 181.931 45.2032 181.805 45.2172 cv
181.51 45.2482 181.487 45.1793 181.474 45.6503 cv
181.461 46.1232 181.256 46.0212 181.758 46.2313 cv
181.809 46.2532 182.311 46.4653 182.432 46.4752 cv
182.106 47.5693 li
181.09 47.3652 li
181.01 47.5352 181.023 47.6252 180.961 47.7653 cv
180.918 47.8602 180.773 48.1262 180.766 48.2172 cv
180.955 48.3292 li
180.994 48.3372 li
180.961 48.3622 li
181.375 48.6343 li
181.361 48.6633 li
181.604 48.8013 li
181.057 49.7552 li
180.854 49.7422 180.208 49.3362 180.094 49.3362 cv
179.966 49.3362 179.851 49.8152 179.671 49.8342 cv
179.694 49.8542 li
179.556 50.0173 li
180.204 50.8162 li
180.236 50.8223 li
179.429 51.6323 li
178.626 50.9532 li
178.197 51.2952 li
178.182 51.3312 li
178.147 51.3143 177.929 51.4232 177.929 51.5262 cv
177.929 51.5303 178.247 52.1992 178.29 52.3292 cv
178.381 52.5992 178.838 52.7582 178.974 52.8942 cv
179.003 52.9152 li
178.97 52.9402 li
179.056 52.9532 179.749 53.4642 179.932 53.5543 cv
180.296 53.7322 180.574 53.9592 180.964 53.9893 cv
181.064 53.9863 li
181.164 53.9863 li
181.271 53.9973 181.698 53.8353 181.816 53.7452 cv
181.909 53.6752 182.293 53.3502 182.383 53.3422 cv
182.356 53.2943 li
182.374 53.3143 li
182.77 53.0283 li
182.754 52.9952 li
182.771 53.0142 li
183.132 52.7482 li
183.13 54.0392 li
184.274 54.0392 li
184.261 56.7512 li
184.119 56.9293 183.398 57.1722 183.235 57.2103 cv
182.907 57.2872 182.517 57.3602 182.14 57.3602 cv
181.461 57.3602 180.79 57.2172 180.031 56.8383 cv
179.261 56.4532 178.647 55.9792 178.008 55.6273 cv
177.29 55.2322 176.414 54.8853 175.789 54.8853 cv
175.714 54.8853 li
175.202 54.8853 174.458 55.1713 174.082 55.6923 cv
173.879 55.9733 173.771 56.1382 173.582 56.4603 cv
173.38 56.8043 173.366 56.9783 173.201 57.3232 cv
173.157 57.2913 172.934 56.6823 172.825 56.5062 cv
172.637 56.2042 172.538 55.9752 172.322 55.7153 cv
171.867 55.1683 171.262 54.8853 170.662 54.8853 cv
170.588 54.8853 li
170.108 54.8853 169.544 55.0872 169.099 55.2603 cv
168.906 55.3362 168.54 55.5322 168.336 55.6432 cv
168.102 55.7712 167.853 55.9633 167.622 56.0753 cv
167.405 56.1802 167.145 56.3892 166.926 56.5233 cv
166.661 56.6873 166.47 56.7772 166.179 56.9202 cv
165.772 57.1193 165.106 57.3232 164.74 57.3232 cv
164.483 57.3232 164.29 57.3663 164.113 57.3613 cv
163.902 57.3552 163.572 57.3173 163.402 57.2703 cv
163.141 57.1982 162.98 57.1813 162.745 57.0792 cv
162.569 57.0032 162.365 56.8892 162.127 56.7762 cv
162.123 54.0392 li
163.247 54.0392 li
163.247 53.4423 li
163.256 53.2673 li
163.254 53.0682 li
163.254 52.8693 li
163.262 52.7712 li
163.268 52.7413 li
163.409 52.8622 li
163.394 52.8932 li
163.785 53.1553 li
163.824 53.1642 li
163.79 53.1893 li
163.991 53.2092 164.605 53.9423 165.238 53.9893 cv
165.338 53.9863 li
165.437 53.9863 li
165.822 54.0182 167.278 53.0693 167.527 52.8203 cv
167.548 52.7913 li
167.887 52.5773 li
167.873 52.5472 li
168.027 52.4742 li
167.986 52.3882 168.068 52.2562 168.093 52.2042 cv
168.133 52.1182 168.171 51.9952 168.198 51.9423 cv
168.273 51.7982 168.348 51.5643 168.423 51.4512 cv
168.28 51.3832 167.849 51.1122 167.801 50.9792 cv
167.676 50.9792 li
166.94 51.6072 li
166.949 51.6312 li
166.164 50.8483 li
166.797 50.0513 li
166.289 49.3572 li
165.315 49.7662 li
165.27 49.6782 164.79 48.8522 164.79 48.8392 cv
164.79 48.7813 165.184 48.4722 165.263 48.4662 cv
165.236 48.4172 li
165.607 48.1622 li
165.267 47.3942 li
164.366 47.5372 li
164.243 47.5452 li
163.955 46.4973 li
163.965 46.4713 li
164.941 46.1072 li
164.836 45.2573 li
164.516 45.2062 li
163.767 45.1563 li
163.807 45.0573 163.787 45.1602 163.795 45.0573 cv
163.792 44.9573 li
163.792 44.6923 163.792 44.4272 163.792 44.1613 cv
163.792 44.0623 li
163.795 44.0582 163.77 44.0132 163.77 44.0123 cv
164.843 43.9213 li
164.838 43.8882 li
164.921 43.0652 li
163.938 42.6832 li
164.222 41.6503 li
164.317 41.6492 li
165.263 41.7972 li
165.603 40.9733 li
165.501 40.9033 165.268 40.7372 165.168 40.6492 cv
165.055 40.5502 164.756 40.4232 164.805 40.3123 cv
164.856 40.1953 165.018 39.9323 165.062 39.8522 cv
165.139 39.7103 165.261 39.5032 165.313 39.4092 cv
166.263 39.8472 li
166.313 39.7762 166.806 39.1273 166.806 39.1113 cv
166.806 39.0883 166.209 38.4142 166.159 38.3403 cv
166.937 37.5753 li
167.317 37.8802 li
167.357 37.8882 li
167.324 37.9133 li
167.748 38.2192 li
167.835 38.0903 168.423 37.7103 168.423 37.6432 cv
168.423 37.5762 168.024 36.7872 168.035 36.7413 cv
168.059 36.6432 168.787 36.2813 168.946 36.1752 cv
169.063 36.3513 169.368 36.7463 169.511 36.9033 cv
169.654 37.0593 169.72 36.9622 169.928 36.8593 cv
170.073 36.7872 170.277 36.7213 170.364 36.6732 cv
170.204 35.6553 li
171.284 35.3513 li
171.681 36.3502 li
171.816 36.2863 172.011 36.2662 172.136 36.2632 cv
172.303 36.2582 172.534 36.2863 172.539 36.1312 cv
172.551 35.7742 172.629 35.4982 172.629 35.2302 cv
cp
181.064 57.1992 mo
181.02 57.2432 181.108 57.1542 181.064 57.1992 cv
cp
181.462 53.9142 mo
181.418 53.9592 181.506 53.8702 181.462 53.9142 cv
cp
179.372 51.5262 mo
179.328 51.5703 179.416 51.4822 179.372 51.5262 cv
cp
180.168 49.3362 mo
180.124 49.3812 180.213 49.2922 180.168 49.3362 cv
cp
181.064 47.3463 mo
181.02 47.3903 181.108 47.3022 181.064 47.3463 cv
cp
181.661 41.6732 mo
181.617 41.7183 181.706 41.6293 181.661 41.6732 cv
cp
180.865 39.4843 mo
180.821 39.5292 180.909 39.4402 180.865 39.4843 cv
cp
178.078 37.7922 mo
178.034 37.8372 178.122 37.7482 178.078 37.7922 cv
cp
170.314 36.6982 mo
170.27 36.7422 170.359 36.6542 170.314 36.6982 cv
cp
169.617 36.9963 mo
169.573 37.0413 169.662 36.9523 169.617 36.9963 cv
cp
168.124 37.8923 mo
168.08 37.9362 168.169 37.8483 168.124 37.8923 cv
cp
166.532 39.4843 mo
166.488 39.5292 166.576 39.4402 166.532 39.4843 cv
cp
167.229 51.3273 mo
167.184 51.3713 167.273 51.2833 167.229 51.3273 cv
cp
166.831 53.3173 mo
166.786 53.3613 166.875 53.2733 166.831 53.3173 cv
cp
166.333 53.6163 mo
166.289 53.6602 166.377 53.5723 166.333 53.6163 cv
cp
165.736 53.9142 mo
165.691 53.9592 165.78 53.8702 165.736 53.9142 cv
cp
159.291 28.1893 mo
159.44 28.1772 159.59 28.1752 159.838 28.1122 cv
159.94 28.0862 160.006 28.0612 160.125 28.0023 cv
160.179 27.9752 160.225 27.9603 160.268 27.9222 cv
160.283 27.9092 160.304 27.8882 160.317 27.8723 cv
160.324 27.8652 160.336 27.8513 160.341 27.8453 cv
160.345 27.8403 160.352 27.8073 160.361 27.8162 cv
160.39 27.8362 li
160.245 28.0422 160.167 28.2183 160.019 28.4443 cv
159.86 28.6902 159.781 28.8082 159.612 29.0073 cv
159.299 29.3773 158.879 29.6793 158.672 30.0593 cv
158.371 30.6143 158.282 30.7413 158.151 31.3292 cv
158.052 31.7742 158.387 32.2443 158.892 32.2443 cv
158.801 32.1072 158.708 31.9053 158.634 31.6813 cv
158.547 31.4172 158.547 31.3802 158.669 31.1992 cv
158.815 31.2112 159.163 31.2952 159.266 31.3983 cv
159.295 31.4193 li
159.262 31.4443 li
159.301 31.4512 159.697 31.6243 159.725 31.6353 cv
159.861 31.6943 160.02 31.6832 160.106 31.6843 cv
160.503 31.6902 160.756 31.3593 160.883 31.3483 cv
160.857 31.2822 161.151 30.9622 161.179 30.8953 cv
161.28 30.6583 161.356 30.6423 161.356 30.3782 cv
161.356 30.3032 li
161.356 29.8842 162.525 29.8672 162.875 29.8563 cv
163.116 29.8483 163.468 29.8093 163.705 29.7662 cv
163.915 29.7292 164.369 29.6572 164.591 29.6572 cv
164.658 29.6122 165.619 29.4443 165.864 29.3383 cv
166.042 29.2612 166.272 29.2092 166.495 29.0972 cv
166.597 29.0463 167.107 28.7653 167.154 28.7612 cv
167.142 28.7322 li
167.202 28.7073 li
167.186 28.9243 166.728 30.9542 166.532 31.0253 cv
166.378 31.0972 165.588 30.8203 165.511 30.9252 cv
165.626 30.9813 166.432 31.2833 166.432 31.3732 cv
166.432 31.3983 166.051 32.1332 166.009 32.2133 cv
165.917 32.3862 165.642 32.8442 165.487 32.9902 cv
165.32 32.9113 165.154 32.8182 165.044 32.7623 cv
164.938 32.7083 164.662 32.4943 164.591 32.5922 cv
165.246 33.2073 li
165.262 33.3143 li
164.99 33.4973 164.802 33.7952 164.455 33.9993 cv
164.291 34.0953 164.133 34.2042 163.966 34.2813 cv
163.862 34.3292 163.516 34.4583 163.471 34.4583 cv
163.4 34.4583 162.869 33.2582 162.75 33.2153 cv
162.784 33.2863 162.947 33.9412 162.964 34.0322 cv
162.992 34.1902 163.023 34.2073 163.058 34.3882 cv
163.093 34.5643 163.11 34.5833 162.849 34.5833 cv
162.657 34.5833 162.152 34.6252 161.929 34.5333 cv
161.965 34.6353 162.377 35.0833 162.473 35.2363 cv
162.53 35.3262 162.687 35.5352 162.731 35.5963 cv
162.842 35.7512 162.874 35.8212 162.971 35.9813 cv
163.05 36.1102 163.257 36.5153 163.307 36.7263 cv
163.337 36.8552 163.503 37.4863 163.471 37.5192 cv
163.45 37.5482 li
163.395 37.4672 163.261 37.2112 163.202 37.1052 cv
163.117 36.9542 162.964 36.8002 162.843 36.6793 cv
162.607 36.4432 162.251 36.1832 161.854 36.1503 cv
162.092 36.7422 li
161.874 36.6113 160.624 36.0872 160.435 36.3492 cv
160.325 36.5502 160.24 36.9523 160.211 37.1953 cv
160.184 37.5182 li
160.186 37.6432 li
160.284 38.5392 li
160.42 38.6293 160.468 38.6163 160.656 38.6663 cv
160.751 38.6912 160.921 38.7632 161.039 38.8022 cv
161.15 38.8392 161.637 39.0342 161.754 39.1362 cv
161.007 39.0623 li
160.411 39.0052 li
160.087 38.9943 li
159.664 38.9872 li
159.315 39.0052 li
158.887 39.0262 158.474 39.1732 158.046 39.4592 cv
158.103 38.7742 159.377 38.4183 159.863 38.3152 cv
159.874 37.8043 159.745 37.2703 159.459 36.8782 cv
159.21 36.5383 158.73 36.0582 158.333 35.8643 cv
157.996 35.7003 157.376 35.0833 157.198 34.7632 cv
156.951 34.3182 156.815 33.9622 156.778 33.4633 cv
156.78 33.3632 li
156.78 33.1652 li
156.734 32.5842 157.297 31.7463 157.541 31.1923 cv
157.72 30.7833 157.806 30.5703 157.928 30.1633 cv
158.065 29.7083 157.872 29.4332 157.399 29.4332 cv
157.026 29.4332 li
156.977 29.4332 156.823 29.4482 156.8 29.4542 cv
156.712 29.4783 156.573 29.5173 156.547 29.4863 cv
156.397 29.3052 156.717 29.0173 156.329 28.9852 cv
156.394 29.1083 156.404 29.1923 156.404 29.3082 cv
156.404 29.4672 156.385 29.5363 156.346 29.8193 cv
156.321 30.0043 156.245 30.1243 156.23 30.3032 cv
156.459 30.4573 156.455 30.5833 156.353 30.7703 cv
156.327 30.8193 156.168 31.1873 156.155 31.1992 cv
156.135 31.2283 li
155.971 30.9893 li
155.931 31.3032 155.461 31.2863 155.309 31.3483 cv
155.309 30.9713 155.122 31.0303 155.359 30.6772 cv
155.235 30.6772 li
155.086 30.5262 li
155.352 30.3812 155.343 30.0552 155.583 30.0552 cv
155.592 30.0552 155.899 30.1403 155.981 30.1793 cv
156.007 30.1862 li
156.183 29.4583 li
155.806 29.2783 156.203 29.0602 155.483 29.0602 cv
155.468 29.0602 155.402 29.0853 155.359 29.0853 cv
155.215 29.0853 154.845 29.1663 154.786 29.3832 cv
154.686 29.3492 154.659 29.0132 154.716 28.8643 cv
154.779 28.6992 154.941 28.5322 155.154 28.4763 cv
155.597 28.3602 155.932 28.3132 156.23 28.3132 cv
156.304 28.3132 li
156.976 28.3632 li
157.716 27.8682 157.95 28.0892 158.768 28.1642 cv
159.091 28.1982 li
159.191 28.1923 li
159.291 28.1893 li
cp
161.456 38.9872 mo
161.411 39.0313 161.5 38.9423 161.456 38.9872 cv
cp
164.541 32.5182 mo
164.541 32.5433 li
164.616 32.5182 li
164.541 32.5182 li
cp
165.736 31.0253 mo
165.691 31.0693 165.78 30.9813 165.736 31.0253 cv
cp
165.437 30.8842 mo
165.511 30.8842 li
165.437 30.8842 li
cp
165.536 29.4332 mo
165.492 29.4772 165.581 29.3882 165.536 29.4332 cv
cp
164.641 29.6323 mo
164.596 29.6763 164.685 29.5872 164.641 29.6323 cv
cp
160.809 31.3732 mo
160.764 31.4183 160.853 31.3292 160.809 31.3732 cv
cp
159.664 31.6223 mo
159.62 31.6672 159.708 31.5782 159.664 31.6223 cv
cp
158.669 32.2192 mo
158.624 32.2632 158.713 32.1752 158.669 32.2192 cv
cp
155.881 28.3383 mo
155.838 28.3823 155.926 28.2943 155.881 28.3383 cv
cp
158.271 35.8022 mo
158.226 35.8463 158.314 35.7582 158.271 35.8022 cv
cp
158.569 38.7872 mo
158.525 38.8323 158.613 38.7432 158.569 38.7872 cv
cp
185.411 27.8513 mo
185.359 27.9553 185.134 28.2952 185.109 28.3572 cv
185.038 28.5322 184.924 28.6293 184.823 28.7842 cv
184.616 29.1063 184.386 29.2952 184.087 29.5942 cv
183.594 30.0883 183.179 30.9443 183.179 31.4982 cv
183.179 31.6693 183.234 31.8862 183.378 32.0212 cv
183.486 32.1213 183.798 32.2933 183.901 32.2443 cv
183.932 32.1732 183.312 31.1992 183.802 31.1992 cv
183.983 31.1992 184.426 31.5153 184.76 31.6353 cv
184.981 31.7142 185.461 31.7053 185.643 31.5233 cv
185.663 31.4932 li
185.725 31.5233 186.127 31.1373 186.091 31.0502 cv
186.165 31.0502 li
186.145 31.0012 186.297 30.7263 186.314 30.6953 cv
186.434 30.4713 186.389 30.5443 186.389 30.3282 cv
186.389 29.9742 187.016 29.9202 187.186 29.9053 cv
187.559 29.8842 li
188.206 29.8273 li
189.752 29.6342 li
189.749 29.6072 li
190.214 29.6072 191.739 29.1102 192.013 28.8362 cv
192.034 28.8063 li
192.263 28.6882 li
192.207 28.9243 192.167 29.0892 192.129 29.3223 cv
192.109 29.4373 191.984 29.8063 191.977 29.9373 cv
191.976 29.9453 191.839 30.4063 191.803 30.4913 cv
191.751 30.6132 191.669 30.9872 191.565 31.0253 cv
190.623 30.9033 li
190.614 30.9393 li
191.494 31.3412 li
191.395 31.4913 191.35 31.6293 191.266 31.7972 cv
191.182 31.9642 191.139 32.0342 191.041 32.2142 cv
190.94 32.3992 190.587 32.8972 190.545 33.0153 cv
189.657 32.5292 li
190.34 33.2463 li
190.166 33.5092 189.784 33.7512 189.599 33.9362 cv
189.579 33.9653 li
189.539 33.9453 189.133 34.2272 189.071 34.2493 cv
188.864 34.3203 188.698 34.4402 188.48 34.4583 cv
187.824 33.2062 li
187.783 33.2682 188.05 34.1772 188.092 34.3882 cv
188.12 34.5333 188.166 34.5632 187.95 34.5712 cv
187.87 34.5742 187.786 34.5953 187.702 34.5953 cv
187.559 34.5953 187.401 34.6083 187.236 34.5833 cv
187.013 34.5472 li
186.986 34.5792 li
187.306 34.9633 li
187.285 34.9813 li
187.36 34.9813 li
187.337 35.0352 187.71 35.4752 187.758 35.5532 cv
187.868 35.7333 188.02 35.9592 188.103 36.1542 cv
188.2 36.3802 188.316 36.5912 188.383 36.8442 cv
188.409 36.9412 188.523 37.5002 188.505 37.5192 cv
188.484 37.5482 li
188.412 37.4432 188.328 37.2122 188.214 37.0632 cv
188.091 36.9033 187.979 36.7822 187.839 36.6412 cv
187.606 36.4083 187.231 36.1793 186.887 36.1503 cv
187.126 36.7413 li
186.975 36.6563 186.591 36.4952 186.47 36.4553 cv
186.25 36.3832 186.085 36.3242 185.842 36.3002 cv
185.742 36.2913 185.513 36.2842 185.479 36.3342 cv
185.442 36.3892 185.357 36.6163 185.355 36.6293 cv
185.334 36.7872 185.245 37.0463 185.245 37.2452 cv
185.243 37.9423 li
185.245 38.0032 185.3 38.5203 185.394 38.5892 cv
185.446 38.6172 185.669 38.6542 185.748 38.6772 cv
185.853 38.7073 185.949 38.7482 186.101 38.8022 cv
186.284 38.8693 186.664 39.0333 186.812 39.1362 cv
186.091 39.0612 li
185.395 39.0023 li
185.12 38.9932 li
184.697 38.9872 li
184.399 39.0062 li
183.918 39.0342 183.545 39.1483 183.08 39.4592 cv
183.094 39.2883 183.261 38.9302 183.478 38.9122 cv
183.451 38.8632 li
183.543 38.8552 184.01 38.5602 184.213 38.5062 cv
184.463 38.4402 184.649 38.3672 184.896 38.3152 cv
184.896 38.2153 li
184.905 37.9913 li
184.896 37.3292 184.496 36.8552 184.021 36.3542 cv
183.732 36.0482 183.518 35.9763 183.198 35.7343 cv
183.046 35.6202 182.932 35.5493 182.788 35.4222 cv
182.681 35.3273 182.557 35.1143 182.458 35.1052 cv
182.487 35.0352 182.287 34.8282 182.233 34.7333 cv
182.149 34.5872 182.108 34.4872 182.052 34.3903 cv
181.908 34.1423 181.879 33.8652 181.828 33.6243 cv
181.813 33.5532 181.811 33.0773 181.841 32.9462 cv
181.925 32.5652 181.97 32.4462 182.124 32.0842 cv
182.163 31.9922 182.29 31.7573 182.33 31.6923 cv
182.401 31.5803 182.43 31.4843 182.49 31.3793 cv
182.586 31.2153 182.734 30.8622 182.817 30.6332 cv
183.024 30.0593 183.224 29.4332 182.432 29.4332 cv
182.059 29.4332 li
181.59 29.5023 li
181.562 29.3832 li
181.562 29.3082 li
181.562 29.2302 181.592 28.9852 181.437 28.9852 cv
181.434 28.9852 181.388 29.0092 181.387 29.0103 cv
181.419 29.0563 181.437 29.0922 181.437 29.1592 cv
181.437 29.3333 li
181.431 29.4583 li
181.437 29.5872 181.364 30.0443 181.263 30.2543 cv
181.333 30.3583 181.462 30.4263 181.462 30.5773 cv
181.462 30.6022 li
181.462 30.7242 181.201 31.0753 181.189 31.2242 cv
181.069 31.0363 li
180.964 31.0253 li
180.881 31.2192 li
180.341 31.3422 li
180.373 31.2252 li
180.229 31.0173 180.261 30.8732 180.392 30.6772 cv
180.198 30.6143 li
180.164 30.6063 li
180.183 30.5903 li
180.126 30.5212 li
180.33 30.4113 180.433 30.0552 180.566 30.0552 cv
180.641 30.0552 li
180.661 30.0552 180.965 30.1553 181.014 30.1793 cv
181.178 29.9352 181.124 29.6432 181.213 29.4583 cv
180.771 29.1622 181.314 29.0853 180.442 29.0853 cv
180.176 29.0853 179.992 29.1563 179.795 29.3832 cv
179.765 29.2692 179.73 29.2623 179.721 29.1342 cv
179.723 29.0352 li
179.682 28.5262 180.507 28.3593 180.84 28.3383 cv
181.263 28.3162 li
181.338 28.3132 li
182.035 28.3613 li
182.15 28.1902 182.58 28.0593 182.806 28.0643 cv
183.005 28.0573 li
183.848 28.1862 li
183.942 28.1782 183.965 28.1973 184.075 28.1893 cv
184.175 28.1923 li
184.274 28.1923 li
184.548 28.1642 li
184.772 28.1342 185.126 28.0593 185.245 27.9402 cv
185.276 27.9282 li
185.411 27.8513 li
cp
186.962 34.5333 mo
186.917 34.5782 187.006 34.4893 186.962 34.5333 cv
cp
187.783 33.1652 mo
187.738 33.2092 187.827 33.1213 187.783 33.1652 cv
cp
189.923 33.6132 mo
189.879 33.6572 189.967 33.5682 189.923 33.6132 cv
cp
189.629 32.5383 mo
189.653 32.5222 li
189.594 32.4733 li
189.579 32.4882 li
189.629 32.5383 li
cp
190.618 30.9313 mo
190.624 30.9063 li
190.519 30.9053 li
190.618 30.9313 li
cp
188.131 29.8312 mo
188.087 29.8752 188.175 29.7863 188.131 29.8312 cv
cp
185.444 31.6223 mo
185.4 31.6672 185.488 31.5782 185.444 31.6223 cv
cp
181.661 28.3383 mo
181.617 28.3823 181.706 28.2943 181.661 28.3383 cv
cp
231.116 66.1663 mo
231.394 66.2292 231.394 66.2292 231.394 66.3082 cv
231.049 66.4692 230.749 66.8533 231.027 67.2502 cv
230.881 67.2673 230.769 67.2952 230.662 67.3442 cv
230.595 67.5132 230.564 67.6813 230.542 67.8453 cv
230.14 67.9222 229.716 68.5322 229.438 68.8552 cv
229.131 68.9633 228.825 69.0972 228.518 69.2313 cv
228.442 68.3422 228.404 67.8932 228.459 67.0602 cv
228.332 67.0602 li
228.284 66.5062 228.23 66.3713 227.732 66.3082 cv
227.732 66.1163 li
227.044 66.1302 226.322 66.3453 225.594 66.5452 cv
224.919 66.7703 224.228 67.0012 223.566 67.0782 cv
223.681 66.7203 223.763 66.6072 223.763 66.2463 cv
224.072 66.1702 224.736 64.3522 224.881 64.0253 cv
224.938 63.9922 224.997 63.9922 225.025 63.9922 cv
225.305 63.2242 225.487 62.4532 225.668 61.6483 cv
225.928 60.5433 226.14 59.4592 226.575 58.4172 cv
227.8 57.7712 230.439 57.7252 231.19 59.3193 cv
231.522 59.4882 231.713 61.0493 231.767 61.5433 cv
231.704 61.5723 231.685 61.6013 231.658 61.6583 cv
231.713 63.2632 231.612 64.5062 231.116 66.1663 cv
cp
225.545 69.9592 mo
225.18 70.0443 224.733 70.1462 224.181 70.2473 cv
224.046 70.1902 223.873 70.1602 223.737 70.1022 cv
224.549 69.7852 225.047 69.5413 225.548 69.4373 cv
226.054 69.3323 226.58 69.3453 227.375 69.5242 cv
227.185 69.6273 227.15 69.6273 225.545 69.9592 cv
cp
223.275 52.3212 mo
223.017 53.1553 223.25 54.1512 223.132 55.1232 cv
222.455 55.6093 221.704 56.0983 220.91 56.5292 cv
220.154 56.9373 219.416 57.2852 218.68 57.5472 cv
218.603 57.1843 218.603 57.1843 218.688 55.3292 cv
218.348 53.9142 218.084 53.2682 218.034 52.8533 cv
218.987 52.4033 219.962 51.9943 220.981 51.7623 cv
221.934 51.5242 222.905 51.4282 223.955 51.5283 cv
223.625 52.0482 223.625 52.0482 223.275 52.3212 cv
cp
221.702 63.7582 mo
221.405 64.7742 221.221 65.8262 220.761 66.6522 cv
220.366 67.2792 219.834 67.7443 218.946 67.8762 cv
218.948 67.6763 218.987 67.4833 218.989 67.2913 cv
219.096 67.2913 li
219.109 66.5372 219.117 65.7933 219.127 65.0493 cv
219.101 65.0493 219.045 65.0463 219.022 65.0463 cv
218.948 63.8743 218.642 62.1252 219.293 61.1412 cv
219.656 60.9243 220.1 60.7343 220.279 60.3453 cv
220.47 60.2952 220.672 60.2122 220.859 60.1613 cv
221.252 60.0062 221.67 59.8102 222.089 59.7133 cv
222.089 59.5682 li
222.394 59.5742 222.396 59.3223 222.787 59.4672 cv
222.573 60.8533 222.266 62.3453 221.702 63.7582 cv
cp
214.343 60.1743 mo
214.343 60.3433 li
213.958 60.4222 213.697 60.9133 213.309 61.0543 cv
213.199 61.1323 213.11 61.2103 213.031 61.3242 cv
211.875 62.5513 210.827 63.8182 209.753 65.1252 cv
209.777 63.6033 210.397 61.9763 210.492 60.4503 cv
210.607 60.0132 210.747 59.5963 210.87 59.1793 cv
211.151 58.6633 212.177 57.1802 213.102 56.0782 cv
213.695 55.4042 214.253 54.8773 214.568 54.8522 cv
214.824 55.7712 215.967 59.6973 214.343 60.1743 cv
cp
215.089 68.5903 mo
214.359 68.7692 213.635 68.9802 212.916 69.1943 cv
212.601 69.2762 212.269 69.3762 211.929 69.4532 cv
211.927 69.5082 211.924 69.5703 211.924 69.6522 cv
211.434 69.7852 211.319 69.8652 210.709 69.9902 cv
210.765 69.7692 210.793 69.5253 210.86 69.3043 cv
211.301 69.1702 212.185 67.4083 212.957 66.3403 cv
213.235 65.9843 213.488 65.6802 213.712 65.5742 cv
213.919 65.1102 214.075 65.0253 214.139 64.8903 cv
214.193 64.8903 214.226 64.8903 214.272 64.8643 cv
214.335 64.4993 214.532 64.4202 214.811 64.1752 cv
214.862 65.3123 214.917 66.4783 214.984 67.6152 cv
215.066 67.7883 215.196 68.3123 215.089 68.5903 cv
cp
235.435 61.2642 mo
235.225 60.0703 234.748 58.8383 234.654 57.7322 cv
234.6 57.7003 234.536 57.7003 234.493 57.6743 cv
234.38 57.4142 234.268 57.1472 234.168 56.8663 cv
234.112 56.8663 234.05 56.8652 233.997 56.8652 cv
233.997 56.8082 234 56.7502 234.002 56.6912 cv
233.701 56.5292 233.701 56.5292 233.619 56.2982 cv
233.532 56.2733 233.419 56.2432 233.333 56.2183 cv
231.765 54.3912 228.932 54.4553 226.766 54.5333 cv
226.383 54.2582 226.22 54.0012 226.23 53.5612 cv
226.181 53.5303 226.121 53.5032 226.064 53.5032 cv
225.982 53.2762 225.903 53.0532 225.795 52.8312 cv
225.765 52.7153 225.719 52.6033 225.663 52.5242 cv
225.275 52.4343 224.976 51.7943 224.932 51.5153 cv
225.231 51.4952 225.533 51.4432 225.814 51.4133 cv
226.878 51.3492 227.926 51.3093 229.035 51.5153 cv
229.726 51.5043 230.418 51.4833 231.116 51.4672 cv
231.201 51.3552 231.201 51.3552 231.925 51.0922 cv
232.293 50.4012 232.283 49.4843 232.296 48.7372 cv
231.563 46.9503 229.645 47.8442 228.219 47.9293 cv
227.666 47.9733 227.111 48.0272 226.529 48.0992 cv
226.306 48.0953 226.092 48.1163 225.865 48.1163 cv
224.503 48.2382 223.17 48.4683 221.784 48.4952 cv
221.62 48.5543 221.336 48.6072 221.027 48.6572 cv
219.339 48.9393 216.203 49.1932 215.917 49.4913 cv
215.143 49.5643 214.969 49.6743 214.499 49.6652 cv
214.226 49.7982 213.743 49.9323 213.197 50.0142 cv
211.58 50.2612 209.299 50.3372 208.887 50.8032 cv
208.952 52.0313 208.637 52.6613 209.871 53.2623 cv
210.985 53.2762 212.042 53.0732 213.156 53.0062 cv
213.516 52.9512 213.899 52.9562 214.256 52.9653 cv
214.208 53.0732 214.208 53.0732 213.417 53.5632 cv
213.39 53.7023 213.278 53.8392 213.137 53.9443 cv
212.765 54.3002 212.101 54.6243 211.924 55.0103 cv
211.429 55.3663 209.698 57.7172 209.554 57.7172 cv
209.243 58.5142 209.107 58.5753 208.873 59.1522 cv
208.569 60.6202 207.067 64.9482 207.467 65.8962 cv
207.401 66.7263 206.729 70.8212 207.105 71.3282 cv
206.776 71.7673 207.401 73.8533 207.646 74.4973 cv
208.625 75.5372 208.862 74.9583 209.779 74.8663 cv
209.864 74.6923 209.945 74.5303 210.032 74.3672 cv
210.063 74.3672 210.114 74.3392 210.172 74.3392 cv
210.203 74.0643 210.223 73.7883 210.275 73.5322 cv
210.354 73.5322 210.405 73.5322 210.466 73.5363 cv
210.492 73.2573 210.55 73.0182 210.584 72.7372 cv
211.391 72.6613 212.134 72.3182 212.87 72.0192 cv
213.423 71.8063 213.95 71.6232 214.538 71.6033 cv
215.708 71.1462 217.51 71.2302 218.843 71.1462 cv
218.963 70.8362 219.793 70.5992 220.71 70.3962 cv
221.714 70.1902 222.826 70.0602 223.239 70.0972 cv
223.267 70.2623 223.291 70.4332 223.316 70.6252 cv
223.673 70.7073 224.034 70.8043 224.419 70.9183 cv
224.419 70.9943 224.445 71.0593 224.445 71.1353 cv
224.499 71.1652 224.552 71.1652 224.613 71.1973 cv
224.606 71.4142 224.628 71.6423 224.654 71.8702 cv
225.009 71.9792 225.009 71.9792 225.152 72.0922 cv
225.257 72.0922 225.405 72.0953 225.512 72.0953 cv
226.235 72.1093 226.958 72.1193 227.704 72.1323 cv
227.814 72.1592 227.893 72.2213 228 72.2413 cv
228 72.4163 li
228.168 72.4443 228.352 72.4443 228.531 72.4742 cv
230.02 73.0522 232.365 73.5052 233.065 71.4592 cv
233.113 71.4642 233.177 71.4642 233.193 71.4642 cv
233.256 71.1893 233.66 70.6382 234.431 69.0682 cv
234.725 68.2963 234.926 67.0812 235.133 66.4742 cv
235.44 66.1423 235.361 66.0023 235.371 65.6152 cv
235.389 64.1453 235.412 62.7062 235.435 61.2642 cv
cp
244.849 54.4133 mo
244.847 54.5283 244.847 54.6693 244.839 54.8043 cv
245.289 54.8912 245.758 54.9902 246.201 55.1033 cv
248.054 55.0753 248.054 55.0753 249.556 54.9022 cv
249.556 54.7603 li
249.692 54.8492 249.692 54.8492 250.494 54.8892 cv
250.53 54.8362 250.56 54.7753 250.585 54.7233 cv
250.864 54.6462 251.142 54.5883 251.426 54.5123 cv
251.426 54.4612 251.431 54.4053 251.449 54.3743 cv
253.901 54.0493 256.118 53.5303 258.542 52.7822 cv
259.801 52.0593 262.214 52.0402 263.579 51.9443 cv
263.742 51.8682 263.908 51.8143 264.107 51.7552 cv
264.994 51.5812 266.156 51.6542 266.097 50.2883 cv
266.375 50.2662 266.375 50.2662 267.152 50.4213 cv
267.185 49.8932 267.223 49.5043 267.057 49.0883 cv
266.97 49.0593 266.863 49.0342 266.753 49.0012 cv
266.651 48.6953 266.651 48.6633 266.418 48.6102 cv
266.278 47.3823 265.55 48.0422 265.228 47.3992 cv
265.003 47.3953 264.643 47.3622 264.176 47.3823 cv
262.924 47.4163 261.085 47.5823 260.937 48.0552 cv
260.782 48.0792 260.58 48.1083 260.388 48.1262 cv
260.388 48.1802 260.388 48.2382 260.386 48.2703 cv
259.967 48.3992 259.379 48.4752 259.257 48.8932 cv
258.353 49.2333 257.428 49.3903 256.508 49.6572 cv
256.573 49.4033 256.631 49.1843 256.71 48.9622 cv
257.502 48.4492 256.994 47.1633 256.695 46.5482 cv
256.587 46.5162 256.503 46.5142 256.417 46.4922 cv
256.394 46.4033 256.394 46.3212 256.366 46.2413 cv
254.208 46.1553 253.822 45.9833 253.702 48.3353 cv
254.031 48.5892 254.051 48.8442 254.215 49.3093 cv
254.462 49.5112 254.736 49.7352 254.892 50.1223 cv
253.084 50.5443 253.084 50.5443 253 50.6293 cv
252.285 50.6163 251.953 50.6122 251.308 50.8203 cv
251.306 50.8782 251.306 50.9343 251.306 50.9653 cv
250.892 50.9583 250.698 50.9263 250.392 51.1143 cv
248.637 51.4752 246.803 51.4193 244.98 51.3932 cv
244.433 52.4393 243.927 53.1262 244.55 54.3292 cv
244.627 54.3583 244.732 54.3953 244.849 54.4133 cv
cp
266.837 54.6293 mo
266.227 54.4843 266.227 54.4843 266.145 54.4053 cv
265.805 54.3953 265.014 54.3583 264.069 54.3702 cv
262.434 54.4053 260.406 54.6243 260.092 55.4802 cv
259.5 55.6332 259.586 55.6862 259.602 56.2982 cv
259.99 56.4722 259.988 56.7712 260.45 56.9492 cv
261.515 58.1592 262.505 58.3632 264.007 58.5563 cv
264.301 58.5883 264.636 58.6163 265.003 58.6893 cv
266.833 58.5693 266.502 58.6453 267.593 57.3383 cv
267.938 57.2283 268.209 57.1992 268.488 56.9352 cv
268.498 56.3832 268.375 55.6832 267.816 55.5043 cv
267.77 55.2272 267.77 55.2272 267.629 54.9763 cv
267.392 54.9163 267.141 54.8602 266.886 54.7952 cv
266.861 54.7432 266.861 54.6912 266.837 54.6293 cv
cp
270.569 70.2952 mo
270.51 70.2692 270.482 70.2333 270.433 70.2183 cv
270.548 69.6583 270.548 69.6583 270.531 69.0753 cv
269.626 68.6743 269.851 68.0433 268.853 68.1113 cv
268.833 68.0272 268.804 67.9432 268.804 67.8903 cv
267.803 67.6763 267.231 67.1982 266.263 67.0153 cv
266.135 66.5153 264.749 66.3082 263.892 66.2053 cv
263.667 66.1702 263.474 66.1512 263.364 66.1453 cv
263.335 66.0602 263.335 66.0023 263.335 65.9473 cv
262.48 65.8802 262.406 65.3022 261.683 65.2582 cv
261.683 65.3123 261.683 65.3702 261.681 65.4492 cv
261.297 65.3632 261.216 65.3942 261.185 65.0303 cv
260.881 64.9683 260.751 64.8303 260.334 64.7692 cv
260.309 64.7073 260.284 64.6312 260.255 64.5742 cv
259.76 64.4252 259.292 64.1143 258.91 63.9102 cv
258.805 62.8602 259.865 61.1583 260.268 60.2753 cv
260.32 60.2753 260.373 60.2443 260.426 60.2443 cv
260.529 59.3102 260.516 58.5313 260.334 57.6683 cv
260.146 57.4752 259.379 56.6572 259.324 56.5493 cv
259.144 56.5162 258.963 56.4882 258.769 56.4512 cv
258.399 56.8152 258.151 56.7792 257.711 56.8242 cv
257.25 57.8483 257.122 58.8422 256.856 59.9742 cv
256.542 60.4653 256.409 60.4343 256.342 60.9922 cv
256.289 60.9922 256.205 60.9922 256.149 60.9882 cv
256.141 61.1793 256.141 61.3732 256.138 61.5392 cv
255.972 61.6533 255.804 61.7352 255.643 61.8143 cv
255.61 61.8962 255.579 62.0082 255.551 62.1132 cv
255.132 62.2772 253.175 61.2473 252.984 60.8912 cv
252.576 60.7103 252.384 60.5153 251.063 59.8602 cv
251.26 59.3593 251.431 59.1992 251.474 58.6453 cv
251.551 58.6453 251.661 58.6453 251.753 58.6483 cv
251.779 58.5723 251.779 58.4882 251.781 58.3732 cv
251.842 58.3422 251.863 58.3422 251.891 58.3143 cv
252.008 58.0992 252.008 58.0992 251.983 57.3533 cv
252.019 57.3303 252.067 57.3303 252.095 57.2933 cv
252.249 56.6912 252.371 55.7753 251.597 55.7623 cv
251.539 55.6542 251.485 55.5123 251.434 55.3983 cv
251.129 55.2922 251.129 55.2922 250.492 55.3013 cv
250.492 55.2502 250.492 55.1943 250.494 55.1672 cv
249.741 55.3253 249.488 55.7023 248.895 56.0912 cv
248.89 56.5602 248.527 57.0563 248.459 57.6622 cv
248.19 57.7162 246.413 59.0662 245.962 59.3732 cv
245.962 59.4222 245.958 59.5043 245.932 59.5643 cv
245.447 59.6373 244.903 59.8262 244.405 59.9003 cv
244.011 60.6172 243.731 60.8082 243.419 61.6882 cv
243.358 61.6882 243.299 61.6882 243.22 61.6852 cv
243.156 62.1013 242.836 62.7593 243.107 63.2073 cv
243.779 63.1873 243.546 63.3823 244.131 63.5823 cv
244.134 63.4453 244.134 63.4453 244.3 63.3903 cv
244.819 62.4822 244.786 62.4822 245.874 62.3903 cv
246.844 61.7952 247.796 61.6982 248.792 61.3533 cv
248.792 61.2993 248.8 61.2162 248.8 61.1622 cv
248.913 61.1622 249.023 61.1873 249.123 61.1912 cv
249.434 61.6143 249.587 61.9202 249.529 62.5803 cv
250.057 62.4492 250.057 62.4492 250.384 62.5112 cv
250.326 62.9003 250.573 63.3453 251.03 63.4902 cv
251.03 63.6033 251.028 63.6893 251.025 63.7972 cv
251.142 63.7972 li
251.178 63.8873 251.175 63.9672 251.175 64.0742 cv
251.602 64.3903 252.456 65.2322 252.494 65.8693 cv
251.917 66.1152 251.878 66.8602 251.145 67.1293 cv
251.145 67.1832 251.142 67.2632 251.142 67.3182 cv
250.514 67.5623 249.912 68.2712 249.276 68.4573 cv
249.245 68.5413 249.214 68.5903 249.186 68.6743 cv
249.01 68.7032 248.841 68.7562 248.709 68.8082 cv
248.231 69.6583 245.79 69.3513 245.551 69.8992 cv
245.292 69.9232 245.041 69.9473 244.786 69.9963 cv
244.754 70.0573 244.721 70.0842 244.704 70.1362 cv
244.254 70.1293 243.81 70.0972 243.366 70.0892 cv
243.371 70.0363 243.371 69.9763 243.371 69.9512 cv
243.041 69.8622 242.98 69.7283 242.627 69.6882 cv
242.648 70.0522 242.732 69.9393 242.849 70.2473 cv
242.648 70.2692 242.449 70.2692 242.262 70.2952 cv
242.257 70.6602 242.367 70.7153 242.436 71.0482 cv
242.364 71.0443 242.305 71.0443 242.251 71.0392 cv
242.216 71.2623 242.16 71.4943 242.119 71.7073 cv
242.21 71.7322 242.264 71.7673 242.351 71.7872 cv
243.312 73.9482 248.272 72.5262 250.04 72.5502 cv
250.046 72.4893 250.075 72.4272 250.075 72.3842 cv
250.492 72.2133 250.992 72.0363 251.36 71.8132 cv
251.36 71.7322 251.362 71.6533 251.362 71.5662 cv
251.589 71.4852 251.779 71.3802 251.972 71.2963 cv
252.008 71.2422 252.008 71.1602 252.034 71.1132 cv
253.178 70.8472 254.249 69.5823 255.086 68.8453 cv
255.428 68.8492 256.409 69.2263 256.491 69.7032 cv
256.826 69.7653 257.571 70.0762 257.615 70.5222 cv
257.809 70.5253 258.91 71.1722 258.96 71.3433 cv
259.129 71.4003 259.291 71.4592 259.484 71.5493 cv
259.484 71.6602 259.484 71.7963 259.482 71.9332 cv
259.702 71.9662 260.028 72.2502 260.421 72.3923 cv
260.794 72.7852 261.297 73.0162 261.9 73.1362 cv
261.936 73.2213 261.936 73.3073 261.952 73.3602 cv
262.365 73.6462 262.725 73.7023 263.308 73.7673 cv
263.308 73.8212 263.3 73.8812 263.3 73.9622 cv
263.579 73.9943 263.666 73.9662 263.78 74.0472 cv
263.849 74.1083 263.944 74.1932 264.051 74.3593 cv
264.47 74.3672 264.521 74.2003 264.904 74.4562 cv
265.489 74.3513 266.156 74.1202 266.794 74.4313 cv
267.292 74.2133 267.905 74.1453 268.079 73.5872 cv
268.278 73.4802 268.278 73.4802 268.577 73.4603 cv
268.584 73.4332 268.584 73.3713 268.584 73.3193 cv
268.667 73.2892 268.727 73.2632 268.804 73.2632 cv
269.011 72.7963 270.15 70.8472 270.505 70.7653 cv
270.594 70.6252 270.594 70.6252 270.569 70.2952 cv
cp
297.701 61.5513 mo
297.701 61.6052 297.732 61.6583 297.732 61.7422 cv
298.143 61.7753 298.75 61.9222 299.394 61.9592 cv
300.283 62.0303 301.2 61.9072 301.427 60.9922 cv
301.492 60.9672 301.517 60.9412 301.571 60.9412 cv
301.593 60.6312 301.631 60.3303 301.688 60.0502 cv
302.289 59.4592 301.473 57.6912 301.875 57.3102 cv
301.737 57.0322 301.345 55.4183 301.372 55.2343 cv
301.299 55.2272 301.203 55.1953 301.131 55.1943 cv
300.912 54.7733 300.684 54.9922 300.502 54.6332 cv
300.135 54.4843 299.803 54.3953 299.509 54.3383 cv
298.863 54.2172 298.304 54.3253 297.617 54.7603 cv
297.584 54.8912 297.584 55.0342 297.55 55.1763 cv
297.492 55.1943 297.443 55.1943 297.413 55.2192 cv
296.965 56.8812 296.572 57.8992 294.999 58.8422 cv
294.35 59.5602 292.953 60.5632 292.135 61.0543 cv
292.121 60.4642 291.929 60.1873 291.931 59.9963 cv
290.946 59.4222 291.188 59.2933 291.158 58.1522 cv
291.209 58.1262 291.262 58.1262 291.351 58.0992 cv
291.727 57.3572 293.305 57.2172 294.089 57.0582 cv
295.139 56.5162 295.177 56.4092 295.701 56.2543 cv
295.707 56.1633 295.707 56.1113 295.707 56.0532 cv
296.018 55.9252 296.235 55.9252 296.35 55.5662 cv
296.409 55.5662 296.464 55.5402 296.508 55.5402 cv
296.516 55.0723 296.414 54.9833 296.421 54.7913 cv
296.36 54.7603 296.334 54.7382 296.286 54.7382 cv
296.334 54.5742 296.398 54.4313 296.488 54.2712 cv
296.516 54.2463 296.57 54.2463 296.625 54.2133 cv
296.636 53.7642 296.537 53.6512 296.542 53.3782 cv
296.5 53.3453 296.445 53.3253 296.385 53.3253 cv
296.385 53.2313 296.358 53.1553 296.358 53.1022 cv
295.752 52.7863 295.351 52.2842 294.741 52.2062 cv
294.741 52.0222 li
294.046 51.8442 293.52 51.8353 292.886 51.8282 cv
292.922 51.5242 292.945 51.2473 293.006 50.9653 cv
293.901 50.6492 293.065 49.0803 292.848 48.6102 cv
292.797 48.6102 292.712 48.6102 292.66 48.6072 cv
292.467 47.7762 290.963 47.0552 290.176 46.9622 cv
290.182 46.9063 290.182 46.8483 290.182 46.7673 cv
288.744 46.8273 287.227 46.8983 285.909 47.5322 cv
285.561 48.1392 285.618 48.5292 285.909 49.1722 cv
285.97 49.1722 285.993 49.1722 286.049 49.1752 cv
285.955 50.0593 286.059 50.1202 286.162 50.8862 cv
286.251 50.9263 286.331 50.9542 286.412 50.9542 cv
286.655 51.5693 286.759 51.6252 286.818 51.7623 cv
286.979 51.8282 287.153 51.8812 287.341 51.9092 cv
287.341 51.9943 287.37 52.0792 287.37 52.1302 cv
287.449 52.1622 287.5 52.2203 287.584 52.2432 cv
287.686 52.8353 287.51 53.3292 287.5 53.9973 cv
287.449 53.9973 287.39 54.0203 287.339 54.0203 cv
287.25 54.2413 287.188 54.4343 287.107 54.6583 cv
286.581 54.7302 286.402 55.0103 285.986 55.0803 cv
285.932 55.1943 285.906 55.2772 285.875 55.3832 cv
285.485 55.2112 284.764 55.6503 284.481 55.7493 cv
282.923 55.9553 281.35 56.1483 279.82 56.1802 cv
279.485 56.4512 279.398 56.4142 279.306 56.8403 cv
278.754 57.0012 278.19 57.2112 277.669 57.3942 cv
276.31 58.7382 277.412 59.3102 277.725 60.7302 cv
277.835 60.7552 277.945 60.7822 278.024 60.8162 cv
278.791 61.8713 280.172 61.8713 281.393 61.9122 cv
281.429 61.8632 281.431 61.8013 281.457 61.7502 cv
281.671 61.7852 281.96 61.6483 282.343 61.6583 cv
283.265 61.1403 284.691 60.5552 285.743 60.3453 cv
285.776 60.2642 285.804 60.2083 285.804 60.1563 cv
286.165 60.0983 286.53 60.0573 286.889 60.0262 cv
286.941 60.4183 286.941 60.4183 287.074 60.5313 cv
287.242 60.5352 287.433 60.5352 287.618 60.5402 cv
287.618 60.8422 287.61 61.1793 287.607 61.4822 cv
286.285 61.5513 284.655 61.1622 284.685 62.9072 cv
284.481 62.9072 li
284.481 62.9922 284.478 63.1033 284.478 63.1823 cv
284.152 63.2333 283.774 63.7582 283.768 64.1193 cv
282.525 64.2872 282.66 64.1542 282.208 65.2573 cv
282.09 65.3702 281.697 65.4982 281.255 65.8262 cv
281.252 65.9072 281.252 65.9932 281.224 66.0463 cv
280.859 66.0972 280.645 66.0352 280.525 66.4213 cv
279.856 66.7733 279.641 66.5283 279.378 67.2632 cv
279.066 67.3403 278.732 67.4252 278.43 67.5292 cv
278.43 67.5912 278.43 67.6412 278.428 67.7242 cv
278.318 67.7242 278.201 67.7482 278.098 67.7443 cv
278.065 67.8613 278.065 67.9722 278.065 68.0803 cv
277.976 68.1113 277.869 68.1302 277.79 68.1622 cv
277.268 69.0933 277.378 69.5132 277.386 70.6483 cv
277.439 70.6752 277.493 70.7122 277.549 70.7122 cv
277.544 70.7603 277.544 70.8472 277.544 70.8983 cv
278.073 71.0443 278.594 71.3063 279.171 71.3962 cv
279.171 71.5912 li
279.616 71.5992 280.065 71.6083 280.504 71.6113 cv
280.819 71.3672 281.896 71.1293 282.4 71.0842 cv
282.405 70.9993 282.405 70.9432 282.405 70.8903 cv
283.148 70.7943 283.817 70.6882 284.41 70.1143 cv
284.55 70.0842 284.665 70.0892 284.795 70.0673 cv
284.797 70.0073 284.797 69.9263 284.797 69.8732 cv
285.109 69.8182 285.414 69.7653 285.689 69.7142 cv
285.692 69.6373 285.692 69.5792 285.692 69.5242 cv
286.144 69.3972 286.19 69.2532 286.584 69.1462 cv
286.69 69.3453 286.69 69.3453 286.744 69.7333 cv
286.665 69.7333 286.578 69.7562 286.527 69.7852 cv
286.489 70.0922 286.489 70.0922 286.593 70.3743 cv
286.451 70.8102 286.162 70.9482 285.947 71.3602 cv
285 71.7833 285.033 72.8362 285.85 73.4603 cv
285.809 74.1852 285.61 75.2892 286.66 75.4713 cv
286.672 76.3593 287.086 76.6462 287.996 76.8492 cv
288.527 76.6962 288.527 76.6962 288.581 76.5812 cv
289.05 76.7012 289.518 76.8732 290.084 76.5482 cv
290.062 76.3513 290.064 76.1362 290.034 75.9382 cv
291.004 75.5372 290.892 74.2302 290.739 73.4293 cv
289.717 71.1323 290.043 69.4532 290.167 66.9882 cv
290.105 66.9882 290.051 66.9843 289.972 66.9843 cv
289.972 66.9482 289.975 66.8942 289.975 66.8433 cv
290.585 66.5992 290.905 65.9092 290.913 65.3273 cv
291.052 65.2463 291.188 65.1992 291.332 65.1132 cv
291.357 65.0123 291.384 64.8962 291.423 64.7852 cv
291.536 64.7573 291.617 64.7302 291.727 64.7073 cv
291.752 64.5192 291.844 64.2922 291.896 64.0972 cv
292.176 63.9313 292.314 63.9313 292.437 63.6312 cv
292.494 63.6072 292.544 63.6122 292.628 63.5803 cv
292.751 62.8962 293.035 62.2023 293.87 62.0942 cv
293.901 62.0212 293.931 61.9672 293.952 61.8782 cv
294.32 61.7803 294.633 61.5602 294.746 61.1702 cv
295.362 60.8743 295.701 60.0502 296.409 59.7263 cv
296.537 60.2512 297.009 61.4313 297.701 61.5513 cv
cp
309.371 46.8802 mo
309.276 46.0222 308.683 44.6862 308.079 44.3412 cv
306.917 44.1882 306.732 44.1002 305.815 44.0612 cv
304.163 44.8372 305.034 46.0712 305.013 47.6553 cv
305.335 48.1262 304.996 48.7902 305.294 49.0673 cv
305.284 50.1002 305.404 50.8723 305.527 51.9573 cv
305.499 54.0103 305.465 56.0643 305.435 58.1193 cv
305.404 58.4232 305.111 63.3492 304.689 63.7603 cv
304.671 64.7852 304.418 65.5023 304.308 66.5872 cv
304.229 66.5823 304.117 66.5823 304.038 66.5803 cv
303.856 67.5463 302.298 67.7443 301.46 68.3422 cv
300.705 68.6652 299.979 69.0933 299.285 69.5303 cv
298.442 69.9872 297.634 70.4492 296.794 70.6602 cv
296.761 70.7653 296.761 70.8812 296.756 70.9943 cv
297.626 70.9742 298.426 70.9003 299.267 70.7772 cv
300.071 70.6752 300.868 70.5222 301.71 70.3743 cv
301.737 70.4293 301.764 70.4512 301.788 70.5092 cv
302.482 70.4922 302.482 70.4922 303.54 70.2582 cv
303.56 70.3123 303.56 70.3682 303.593 70.4573 cv
303.976 70.4592 304.37 70.4662 304.752 70.4722 cv
305.389 70.7833 305.769 70.9872 306.553 71.0513 cv
306.553 71.2463 li
308.132 71.1602 307.797 70.8983 308.757 69.6442 cv
308.827 68.8983 308.745 66.8182 308.811 63.8743 cv
309.241 63.3292 308.413 59.7913 308.326 59.0992 cv
308.372 57.9653 308.39 56.8273 308.438 55.7203 cv
308.589 54.8362 308.245 52.1382 308.716 51.6702 cv
308.822 50.5652 308.896 49.4872 308.959 48.3743 cv
309.2 47.9332 309.396 47.5482 309.179 47.0792 cv
309.235 46.9932 309.289 46.9423 309.371 46.8802 cv
cp
329.762 65.0212 mo
329.783 63.7692 329.402 63.1823 329.136 62.1832 cv
329.103 60.8743 328.665 58.9822 329.124 57.8613 cv
330.107 56.4583 333.547 56.4512 334.452 55.1362 cv
334.572 54.9922 334.659 54.8323 334.687 54.6403 cv
334.592 54.6403 334.546 54.6403 334.488 54.6332 cv
334.49 54.5773 334.49 54.5452 334.464 54.4952 cv
334.336 53.8273 333.838 53.8472 333.775 53.2083 cv
333.489 53.1262 333.517 53.0632 333.407 52.9012 cv
332.75 52.5833 332.084 52.2933 331.43 51.9822 cv
330.904 51.5322 330.248 50.9653 329.752 50.7062 cv
329.76 50.6273 329.76 50.5732 329.76 50.5112 cv
328.399 50.0742 328.048 49.7153 326.624 50.1973 cv
326.253 51.1802 325.873 52.2593 325.411 53.2803 cv
325.122 54.3002 325.117 54.7172 324.108 55.0342 cv
324.296 54.2913 323.671 53.1992 323.395 52.5833 cv
322.652 52.3502 321.227 51.7742 321.041 52.9402 cv
320.264 53.0853 320.198 54.0052 320.008 54.6912 cv
319.455 55.2443 319.028 56.0103 318.767 56.7552 cv
318.759 57.2032 318.683 58.5313 319.289 58.7053 cv
320.453 60.4763 322.628 60.0872 324.437 59.5643 cv
324.483 60.4783 324.56 60.5602 324.246 61.4703 cv
323.814 61.7642 323.814 61.7642 319.853 63.9852 cv
318.504 64.7933 316.936 66.1923 315.385 66.1663 cv
314.745 66.7032 314.707 66.7393 313.932 66.7302 cv
313.483 67.3323 313.36 67.5712 312.648 67.7822 cv
312.528 68.0922 311.93 68.9963 311.595 69.1013 cv
311.613 69.8732 311.511 71.4583 312.586 71.6403 cv
312.862 72.1722 313.406 72.4003 313.991 72.0433 cv
314.21 72.5262 314.323 72.5582 314.931 72.5662 cv
315.091 72.2852 315.276 72.0112 315.47 71.7673 cv
316.8 71.4003 318.049 71.2482 319.551 71.0753 cv
319.551 70.7733 li
319.472 70.7733 319.411 70.7692 319.36 70.7692 cv
319.327 70.7153 319.298 70.6602 319.301 70.5992 cv
318.639 70.4003 317.75 70.3323 317.099 70.2103 cv
317.127 70.0153 317.161 69.8212 317.194 69.6002 cv
317.809 69.4172 317.95 68.8672 318.445 68.7032 cv
318.448 68.6453 318.448 68.5953 318.448 68.5413 cv
318.532 68.5413 318.644 68.5463 318.729 68.5463 cv
320.057 67.1252 322.307 66.6273 323.545 64.8962 cv
323.63 64.8713 323.724 64.8513 323.773 64.8542 cv
323.773 64.6563 li
324.169 64.4072 324.59 64.1633 324.981 63.9243 cv
325.403 65.7343 325.87 67.3743 325.898 69.3162 cv
325.816 69.3162 325.76 69.3102 325.707 69.3102 cv
325.704 69.4293 325.702 69.5322 325.702 69.6793 cv
325.615 69.6793 325.561 69.6772 325.51 69.6772 cv
325.188 70.1943 324.715 70.1533 324.159 70.3162 cv
324.141 70.3962 324.108 70.5092 324.105 70.6152 cv
323.382 71.0142 322.585 70.6752 322.103 70.9772 cv
322.739 71.4282 325.209 71.2463 325.469 72.2133 cv
326.217 72.3672 326.874 72.9863 327.816 73.1982 cv
328.334 73.1813 329.474 73.1982 329.707 72.4742 cv
329.76 72.4763 329.827 72.4763 329.898 72.4813 cv
329.931 72.2822 329.931 72.2822 330.127 72.0953 cv
329.995 69.7402 329.727 67.4323 329.675 65.1302 cv
329.707 65.0762 329.732 65.0463 329.762 65.0212 cv
cp
352.639 57.3693 mo
352.29 56.7552 351.595 55.1943 351.061 55.0182 cv
350.791 54.7382 350.459 54.5883 350.326 54.3743 cv
350.081 54.3702 349.804 54.2833 349.667 54.1312 cv
349.393 54.1262 349.278 54.0463 346.126 53.4222 cv
344.801 53.4542 343.639 53.4672 342.349 53.7822 cv
342.349 53.6962 342.324 53.6122 342.324 53.5303 cv
342.658 53.2842 343.084 52.8483 343.342 52.4902 cv
344.093 52.1932 344.104 51.4752 344.443 50.9263 cv
344.507 50.9263 344.525 50.9603 344.596 50.9603 cv
344.699 50.4633 344.732 50.1873 344.686 49.7393 cv
344.541 49.7393 li
344.42 49.3162 344.438 49.2653 344.536 48.8762 cv
343.429 48.1633 343.573 47.8892 342.324 48.1503 cv
341.869 48.5563 341.018 49.5173 340.877 50.0682 cv
340.793 50.0682 340.745 50.1002 340.651 50.0963 cv
340.257 50.8353 339.111 51.4542 338.852 52.0612 cv
338.798 52.0853 338.738 52.0853 338.661 52.0853 cv
338.659 52.1442 336.403 54.3292 336.295 54.3542 cv
335.734 55.1522 335.459 55.0992 334.801 55.6663 cv
334.695 55.8892 334.556 56.2183 334.431 56.6013 cv
334.227 57.3533 334.074 58.2603 334.401 58.7913 cv
334.482 58.9003 334.597 59.0173 334.73 59.0712 cv
334.921 59.3253 335.106 59.5543 335.305 59.7792 cv
335.098 60.3242 334.986 60.4642 334.38 61.8422 cv
334.355 61.8422 li
334.336 61.8422 334.276 61.8422 334.245 61.8383 cv
334.237 62.3693 334.069 62.9763 334.332 63.4222 cv
334.416 63.5313 334.493 63.6483 334.633 63.7382 cv
334.722 65.3123 337.258 64.1862 338.068 63.7003 cv
338.074 63.5062 338.074 63.5062 338.36 63.1172 cv
339.141 62.7222 339.568 61.6982 339.718 60.8912 cv
340.224 60.4022 339.609 58.9752 339.568 58.3652 cv
339.984 57.9532 340.711 57.6992 341.325 57.5922 cv
341.473 57.2653 342.033 56.8273 342.387 57.1642 cv
342.722 60.2753 339.815 62.3162 338.411 64.7322 cv
337.997 64.9172 337.997 64.9172 337.831 64.9163 cv
337.764 65.3362 337.739 65.3942 337.875 65.8552 cv
338.142 65.9432 338.393 66.0093 338.671 66.0892 cv
338.73 66.2872 338.786 66.4532 338.801 66.6492 cv
340.582 66.7612 341.905 65.5342 342.773 64.1583 cv
342.863 64.1633 342.969 64.1343 343.051 64.1343 cv
343.054 64.0493 343.089 63.9672 343.089 63.8793 cv
343.534 63.6693 343.314 63.2803 343.823 63.1172 cv
343.823 62.9843 343.853 62.8383 343.853 62.7092 cv
344.839 61.4703 344.471 60.3242 345.843 59.4072 cv
345.907 59.1033 345.999 58.8013 346.088 58.5253 cv
346.027 58.4982 346.003 58.4622 345.965 58.4352 cv
346.003 58.2133 346.035 57.9973 346.096 57.7753 cv
346.037 57.7482 345.976 57.7422 345.927 57.7162 cv
345.927 57.6042 345.902 57.4963 345.907 57.3832 cv
345.845 57.3832 345.792 57.3572 345.736 57.3253 cv
345.774 57.1893 345.774 57.0192 345.799 56.8533 cv
346.329 56.9183 346.952 57.1442 347.549 57.1312 cv
347.546 57.1843 347.564 57.2653 347.564 57.3253 cv
348.42 57.7803 348.588 59.2242 348.3 60.1403 cv
348.584 61.4742 348.083 62.2372 347.475 63.4512 cv
347.115 63.7213 346.663 64.1583 346.594 64.6033 cv
345.01 65.0493 343.874 67.0322 342.201 67.3882 cv
341.184 67.3182 341.095 67.2142 340.155 67.1143 cv
340.155 67.1702 340.153 67.2222 340.18 67.3043 cv
340.041 67.3323 339.922 67.3572 339.815 67.3882 cv
339.805 67.9672 340.697 68.3412 340.959 68.9772 cv
341.369 69.3843 342.449 69.9232 343.021 70.1732 cv
343.685 70.0762 343.764 69.9902 344.129 69.9963 cv
344.471 69.7852 344.668 69.5322 345.121 69.5413 cv
345.532 68.9963 346.25 69.2012 346.43 68.7083 cv
346.873 68.6563 346.873 68.6563 347.375 68.6912 cv
347.426 68.5823 347.426 68.5823 348.987 67.9142 cv
349.418 67.3593 349.912 67.2822 350.335 66.6243 cv
351.209 66.1953 352.422 64.2203 352.412 63.3292 cv
352.55 63.3292 li
352.672 62.3652 352.916 61.3942 353.042 60.4843 cv
352.925 58.8732 352.925 58.8732 352.639 57.3693 cv
cp
361.387 61.8563 mo
361.449 61.8563 li
363.5 61.6093 364.322 60.3182 363.536 58.1152 cv
363.226 58.0543 363.226 57.9423 363.106 57.7803 cv
362.595 57.4633 362.01 57.1843 361.461 57.0012 cv
360.164 56.6172 359.025 56.8832 359.058 58.8273 cv
359.132 58.8472 359.188 58.8832 359.272 58.9152 cv
359 60.8472 359.648 61.5242 361.387 61.8563 cv
cp
360.521 55.1563 mo
360.826 55.2972 361.155 55.5322 361.477 55.7283 cv
361.918 55.9902 362.33 56.2062 362.698 56.1633 cv
363.359 56.0643 364.135 56.0983 364.421 55.9902 cv
364.644 55.6862 364.669 55.3873 365.027 55.2822 cv
365.019 54.8652 365.223 54.2042 364.835 54.0812 cv
365.209 53.0942 364.831 52.6453 363.944 52.4072 cv
363.538 51.6772 362.426 51.5522 361.538 51.7623 cv
361.155 51.8652 360.815 52.0543 360.595 52.2772 cv
360.445 52.3013 360.34 52.2963 360.205 52.3253 cv
360.141 53.0732 359.793 53.5632 360.478 54.1022 cv
360.499 54.4393 360.494 54.7952 360.521 55.1563 cv
cp
366.787 60.5212 mo
365.824 60.7053 365.998 61.5602 365.251 61.6332 cv
365.226 61.7502 365.196 61.8832 365.169 61.9922 cv
365.111 61.9902 365.019 61.9902 364.976 61.9902 cv
364.976 62.0413 364.93 62.1343 364.93 62.1832 cv
364.883 62.1572 364.856 62.1343 364.831 62.1013 cv
364.794 62.1553 364.794 62.2073 364.758 62.2972 cv
364.687 62.2913 364.605 62.2913 364.491 62.2872 cv
364.404 62.5933 363.928 63.1293 363.653 63.2162 cv
363.65 63.3292 363.648 63.4393 363.648 63.5803 cv
363.454 63.6033 363.25 63.6033 363.088 63.6312 cv
363.106 63.7092 363.137 63.7972 363.163 63.8513 cv
363.017 63.8472 362.889 63.8422 362.782 63.8422 cv
362.631 64.3942 362.181 64.2523 362.1 64.7783 cv
362.048 64.7783 361.982 64.7783 361.895 64.7742 cv
361.895 64.9163 361.893 65.0212 361.893 65.1583 cv
361.762 65.1882 361.612 65.3242 361.334 65.4293 cv
361.28 65.4542 361.231 65.4833 361.142 65.5112 cv
361.114 65.6802 361.084 65.8433 361.05 65.9763 cv
360.861 65.9763 li
360.828 66.1423 360.799 66.3123 360.764 66.4492 cv
360.624 66.4462 360.491 66.4462 360.383 66.4462 cv
360.059 67.2673 359.206 67.4252 358.854 68.3303 cv
358.774 68.3303 358.713 68.3303 358.66 68.3282 cv
358.603 68.4172 358.547 68.4943 358.524 68.6033 cv
358.527 68.1852 358.56 67.7742 358.565 67.3572 cv
358.475 67.3572 358.399 67.3572 358.292 67.3513 cv
358.195 67.9963 357.877 68.6793 357.319 68.9982 cv
357.245 70.6962 356.557 71.8212 358.121 72.9252 cv
358.706 72.8242 359.482 72.6663 360.092 72.4763 cv
360.268 72.0732 360.772 71.9072 361.16 71.6622 cv
361.229 71.5782 361.245 71.5262 361.245 71.4763 cv
361.37 71.2222 361.477 71.1462 361.806 71.0903 cv
362.437 69.9102 362.552 69.4653 363.854 69.1553 cv
363.857 68.9902 363.893 68.8262 363.898 68.6563 cv
363.98 68.6293 364.041 68.5953 364.115 68.5773 cv
364.118 68.4963 364.118 68.3843 364.118 68.2993 cv
363.928 68.2963 363.928 68.2963 363.928 68.2142 cv
364.067 68.2142 364.186 68.2142 364.322 68.2172 cv
364.322 68.1052 364.322 68.0253 364.327 67.9142 cv
364.521 67.9142 li
364.562 67.4462 364.388 66.9152 364.91 66.8182 cv
365.119 65.6572 365.704 64.6932 365.862 63.5883 cv
365.939 63.5262 366.023 63.5062 366.112 63.4453 cv
366.115 63.2272 366.118 62.9763 366.125 62.7352 cv
366.646 62.2972 366.776 61.3812 366.958 60.7213 cv
366.902 60.7213 366.84 60.7213 366.784 60.7183 cv
366.787 60.6312 366.787 60.5803 366.787 60.5212 cv
cp
373.105 66.9393 mo
373.1 66.9922 373.1 67.0472 373.1 67.1013 cv
373.011 67.1293 372.909 67.1252 372.817 67.1483 cv
372.705 67.1832 372.625 67.1832 372.546 67.2053 cv
372.51 67.2593 372.482 67.3182 372.457 67.3693 cv
372.153 67.3362 372.153 67.3362 371.68 67.4733 cv
371.325 67.0212 371.299 64.6932 372.02 64.7053 cv
372.329 65.0912 372.572 65.3162 372.842 65.4612 cv
373.174 65.6273 373.563 65.6973 374.175 65.7852 cv
374.373 66.6182 373.91 66.7482 373.105 66.9393 cv
cp
387.097 56.0233 mo
387.066 55.9703 387.048 55.8892 387.028 55.8242 cv
386.884 55.7963 386.765 55.7402 386.634 55.7092 cv
386.601 55.6572 386.585 55.5762 386.585 55.5173 cv
386.206 55.3463 385.337 54.9982 385.238 54.6583 cv
384.62 54.6293 383.989 54.6213 383.35 54.5792 cv
382.711 54.8773 382.711 54.8773 377.585 56.2432 cv
377.815 55.1423 378.027 54.4202 378.487 53.4323 cv
379.043 53.2972 379.043 53.2972 379.44 53.1102 cv
381.069 53.1343 382.675 53.4063 384.302 53.2883 cv
384.982 53.1102 385.371 52.9172 385.845 52.8762 cv
385.875 52.8112 385.875 52.7322 385.899 52.6782 cv
386.372 52.5443 386.65 52.4393 387.084 52.1442 cv
387.084 51.8613 li
387.582 51.7062 387.421 51.0942 387.286 50.7313 cv
387.209 50.7263 387.137 50.7263 387.099 50.7263 cv
386.971 50.1973 386.552 50.0233 386.154 49.7432 cv
384.688 48.8563 382.574 49.0222 381.118 49.8323 cv
380.479 49.8802 379.84 49.9252 379.208 49.9683 cv
378.834 49.1042 378.847 48.5253 378.387 47.6843 cv
378.178 47.6843 li
378.178 47.4932 li
378.129 47.4932 378.079 47.4893 378.027 47.4893 cv
378.027 47.2922 li
376.329 47.1533 376.352 47.8502 376.329 49.4293 cv
376.186 49.7883 376.042 50.1472 375.897 50.5073 cv
375.614 50.6122 375.595 50.5573 375.503 50.8593 cv
374.917 50.9092 374.27 51.3123 373.797 51.5283 cv
373.544 51.5753 373.297 51.6332 373.049 51.6813 cv
371.854 51.9412 370.799 52.1182 369.489 52.4672 cv
368.393 53.2213 368.638 53.6163 368.646 54.9462 cv
369.277 55.5623 369.816 55.2972 370.633 55.2012 cv
370.641 55.0842 370.659 54.9772 370.708 54.8403 cv
370.793 54.8652 370.834 54.8892 370.924 54.9222 cv
370.924 54.8652 370.932 54.7872 370.932 54.7372 cv
371.008 54.7372 371.008 54.7372 371.003 54.9263 cv
371.701 54.7153 372.344 54.4633 373.008 54.2913 cv
373.647 54.1072 374.347 53.9523 375.07 53.8992 cv
375.197 54.2712 375.179 55.7092 374.955 55.9252 cv
374.996 56.5953 375.013 57.7333 374.341 58.1633 cv
374.316 58.2203 374.288 58.3013 374.252 58.3593 cv
374.194 58.3812 374.117 58.4102 374.033 58.4352 cv
373.829 58.7943 373.271 59.2322 372.959 59.5833 cv
372.965 59.4722 372.934 59.3613 372.934 59.2822 cv
372.934 59.1992 li
373.029 59.1992 373.124 59.1992 373.215 59.2053 cv
373.282 58.7302 373.282 58.7302 373.451 58.3463 cv
373.463 57.3182 373.463 57.3182 373.348 56.1802 cv
373.287 56.1763 373.231 56.1763 373.146 56.1763 cv
373.124 56.0383 373.092 55.9822 372.98 55.8732 cv
372.929 55.7822 372.825 55.7073 372.714 55.5623 cv
370.477 54.6152 370.099 58.2133 369.862 59.6252 cv
369.386 61.0862 368.888 62.3802 368.709 63.9272 cv
368.51 63.9272 li
368.357 64.8903 368.24 65.9263 368.11 66.9443 cv
367.913 66.9443 li
368.102 69.3602 367.155 71.6672 368.336 74.1282 cv
368.584 74.2463 370.02 74.2372 370.442 74.2463 cv
371 73.3682 371.506 70.1852 371.862 69.9683 cv
372.14 70.0573 372.439 70.0842 372.776 70.0892 cv
373.246 70.0673 373.747 69.9902 374.191 69.8693 cv
374.373 71.3602 374.763 72.6472 376.673 72.6713 cv
377.601 71.9072 377.685 71.8063 377.894 70.6622 cv
378.152 66.7032 378.528 67.7073 382.331 67.4042 cv
382.667 67.2422 383.002 67.1093 383.332 66.9752 cv
383.334 66.9183 383.36 66.8672 383.365 66.7813 cv
383.871 66.6813 383.894 66.4822 383.881 66.0173 cv
383.485 65.7852 383.546 65.4833 383.496 65.0933 cv
382.645 64.7502 382.459 64.5513 382.096 64.3812 cv
380.76 64.3613 379.309 65.0043 378.084 65.2913 cv
378.066 65.2343 378.004 65.2032 377.976 65.1512 cv
378.073 64.5413 377.989 64.4022 378.047 63.9852 cv
378.62 63.7443 378.62 63.7443 379.287 63.6693 cv
380.372 63.0212 384.04 62.5563 384.193 61.1663 cv
383.79 60.9922 383.761 60.7722 383.679 60.4642 cv
383.431 60.2913 383.159 60.1522 382.903 60.0062 cv
382.724 59.2653 382.285 59.3892 381.705 59.3802 cv
380.131 59.9122 378.711 60.4982 377.162 60.6732 cv
377.116 60.0903 377.151 59.7543 377.263 59.2653 cv
377.317 59.2292 377.404 59.2062 377.483 59.1852 cv
377.483 59.1232 377.516 59.0463 377.544 58.9943 cv
379.453 58.1022 381.703 56.9113 383.902 56.9453 cv
385.11 57.7112 385.056 59.1293 385.205 60.5103 cv
385.148 64.3442 385.298 69.0853 383.189 72.5422 cv
380.914 72.9313 379.225 73.4042 377.064 72.9252 cv
377.258 74.0392 378.436 73.7222 379.123 74.4003 cv
380.637 75.0032 382.126 75.4193 383.7 75.9382 cv
384.111 75.9163 384.372 75.8643 384.754 75.7032 cv
384.982 75.4053 384.982 75.4053 387.336 70.3383 cv
387.455 69.8123 387.602 69.2833 387.709 68.7562 cv
387.741 66.8472 387.488 65.2653 387.817 63.5192 cv
387.88 63.3002 387.937 63.0532 388 62.8043 cv
388.011 62.2473 388.241 59.4252 387.907 57.5842 cv
387.753 56.7863 387.515 56.1722 387.097 56.0233 cv
cp
391.007 47.2083 mo
391.007 47.1572 391.009 47.0903 391.009 47.0103 cv
390.29 46.8892 389.041 46.6823 388.453 46.9503 cv
388.422 47.0552 388.397 47.1923 388.366 47.3002 cv
388.231 47.3002 388.146 47.3622 388.054 47.4443 cv
387.697 47.8723 387.837 49.1042 388.021 49.5443 cv
388.021 49.5732 388.046 49.6063 388.046 49.6063 cv
388.718 49.8853 388.625 50.6953 389.173 50.8682 cv
389.255 51.0922 389.222 51.0612 389.528 51.2352 cv
389.528 51.2883 389.528 51.3713 389.523 51.4282 cv
389.602 51.4583 389.661 51.4802 389.725 51.5402 cv
390.328 51.5242 392.018 51.7162 392.274 50.9133 cv
392.369 50.9172 392.465 50.9172 392.555 50.9172 cv
392.968 49.0673 392.933 47.8182 391.007 47.2083 cv
cp
415.094 73.9102 mo
415.061 73.8812 415.043 73.8533 415.002 73.7963 cv
413.593 73.7963 412.972 72.8502 411.813 72.5012 cv
411.677 72.4122 411.537 72.3022 411.399 72.2213 cv
410.63 72.0112 409.059 70.5463 409.072 69.7653 cv
409.026 69.7653 408.97 69.7653 408.939 69.7363 cv
408.725 69.2422 408.367 69.1202 408.288 68.5953 cv
407.925 68.5073 407.925 68.5073 406.967 68.6232 cv
406.403 70.5303 404.692 70.5052 403.343 71.5413 cv
402.902 71.6992 402.319 71.7482 401.92 71.9402 cv
401.92 71.9902 401.918 72.0433 401.918 72.1323 cv
401.256 72.0953 400.853 72.4202 400.164 72.4662 cv
400.127 72.5262 400.127 72.6013 400.105 72.6613 cv
399.522 72.8732 398.97 72.8873 398.414 73.1033 cv
398.383 73.1852 398.383 73.2422 398.35 73.3262 cv
398.015 73.2892 397.711 73.2872 397.384 73.2822 cv
397.349 73.3112 397.334 73.3392 397.291 73.3713 cv
394.164 73.1022 394.046 71.5463 394.077 69.1873 cv
394.399 69.1663 394.665 69.1382 394.951 69.1462 cv
397.17 70.3123 401.859 68.5773 403.195 66.7463 cv
403.522 66.5823 403.576 66.4492 403.751 66.3923 cv
403.757 66.2822 403.783 66.1752 403.813 66.0582 cv
403.928 66.0463 404.036 66.0023 404.143 65.9813 cv
404.053 64.9042 404.339 64.5413 404.551 63.6893 cv
404.401 63.6563 404.401 63.6563 404.368 63.5422 cv
404.518 63.3492 404.518 63.3492 404.559 63.1362 cv
404.6 63.1033 404.656 63.0773 404.714 63.0773 cv
404.937 62.4722 404.787 61.7753 404.958 61.1412 cv
403.959 61.1323 402.467 61.8013 401.754 61.2842 cv
401.716 61.2073 401.693 61.1193 401.667 61.0363 cv
401.538 61.0363 li
401.538 60.9822 401.541 60.9293 401.542 60.8643 cv
401.476 60.8333 401.422 60.8333 401.4 60.8323 cv
401.032 60.1113 400.697 59.1083 400.929 58.4172 cv
401.093 58.3143 403.269 57.8123 406.025 56.9113 cv
406.423 56.6973 406.449 56.5043 406.651 56.1152 cv
406.336 55.1763 406.567 53.8972 406.528 52.9813 cv
406.308 52.9813 li
405.831 51.1442 405.448 50.8593 406.393 49.0753 cv
407.598 48.2573 408.385 49.1843 409.509 49.8403 cv
409.769 50.6122 410.28 51.7062 410.267 52.6503 cv
410.545 53.2393 410.525 56.3702 412.275 54.5703 cv
413.026 54.6912 413.649 54.8403 414.42 55.0903 cv
414.457 55.1813 414.457 55.2653 414.476 55.3513 cv
414.729 55.2692 414.786 55.3253 415.084 55.4672 cv
415.105 56.2183 415.671 56.6702 415.587 57.3052 cv
415.021 57.9083 414.964 58.4902 414.096 58.5372 cv
413.874 58.9122 413.567 59.1873 413.097 59.2372 cv
413.089 59.3223 413.089 59.4022 413.089 59.4913 cv
412.957 59.5112 412.806 59.5643 412.691 59.6152 cv
412.666 59.6412 412.666 59.7053 412.666 59.7543 cv
411.47 59.6522 410.75 59.8102 410.645 61.0292 cv
411.005 61.3123 411.225 61.8143 411.383 62.3162 cv
411.429 62.3453 411.486 62.3453 411.549 62.3732 cv
411.575 62.4822 411.601 62.6223 411.626 62.7363 cv
411.739 62.7623 411.843 62.7673 411.953 62.7982 cv
412.39 63.4952 412.39 63.4952 412.5 63.8873 cv
413.023 63.9763 413.432 63.9852 413.429 64.6243 cv
413.646 64.6533 413.674 64.6243 413.866 64.9083 cv
414.247 64.9642 414.536 65.1672 414.893 65.2582 cv
414.893 65.3942 li
416.063 65.8262 417.309 66.4822 418.634 66.5023 cv
419.217 67.0322 420.384 66.8533 420.895 67.6152 cv
421.084 67.7272 421.257 67.8652 421.452 67.9843 cv
421.414 68.1503 421.38 68.3212 421.352 68.4872 cv
420.911 68.7863 420.614 69.4982 420.754 70.0602 cv
419.996 70.4003 418.338 71.5992 417.97 72.3972 cv
417.35 72.7803 417.388 72.5872 417.048 73.3022 cv
416.814 73.4603 416.586 73.6223 416.364 73.7883 cv
416.044 73.7543 415.794 73.6143 415.641 73.8882 cv
415.459 73.9102 415.289 73.9102 415.094 73.9102 cv
cp
447.777 64.3903 mo
446.574 64.5032 446.49 64.5742 444.357 64.8812 cv
444.382 64.6722 444.382 64.6722 444.776 64.2413 cv
445.951 62.4183 445.979 60.4092 444.431 59.9963 cv
443.843 59.8602 443.042 59.9293 442.041 60.2742 cv
441.335 60.6302 440.664 61.0363 440.053 61.4443 cv
438.771 62.2833 437.514 63.1732 436.086 63.7762 cv
435.617 64.1033 435.527 64.3613 435.376 64.4113 cv
435.313 64.7762 435.328 65.7153 435.885 65.8502 cv
435.885 66.0132 li
435.972 66.0132 436.025 66.0342 436.091 66.0342 cv
436.118 66.0892 436.118 66.1373 436.143 66.1953 cv
436.355 66.2172 436.355 66.2172 437.208 66.0762 cv
437.663 65.4612 438.883 64.5903 440.015 64.0173 cv
440.513 63.7402 441.019 63.5352 441.407 63.4393 cv
441.125 63.9553 441.07 64.3442 441.032 64.9402 cv
441.584 65.4683 440.983 65.9763 439.976 66.4792 cv
438.403 67.2382 435.857 67.8762 435.119 68.2042 cv
434.91 68.2012 434.306 68.4492 434.115 68.4492 cv
433.839 68.4462 433.582 68.4402 433.313 68.4373 cv
433.229 68.5333 433.163 68.6423 433.098 68.7473 cv
432.036 69.2762 432.005 69.3782 431.5 69.5522 cv
430.394 69.7242 428.304 69.8732 427.709 70.8242 cv
427.645 70.8203 427.591 70.8203 427.502 70.8203 cv
427.012 72.1392 427.273 72.6362 428.317 73.5103 cv
428.317 73.6392 li
428.874 73.6702 429.285 73.7543 429.944 73.7413 cv
429.944 73.6843 429.944 73.6132 429.947 73.5602 cv
430.978 73.0532 430.978 73.0532 432.753 72.0162 cv
433.555 71.7443 434.334 71.3303 435.16 71.2463 cv
435.759 71.0753 435.985 70.7402 436.638 70.6962 cv
436.638 70.6453 436.638 70.5922 436.643 70.5402 cv
436.907 70.4713 437.203 70.4152 437.476 70.3743 cv
438.115 70.0153 439.04 69.7892 439.93 69.5703 cv
440.845 69.3292 441.739 69.0773 442.207 68.6732 cv
444.114 69.2952 442.219 71.2963 441.75 72.3052 cv
441.299 72.5272 441.299 72.5272 441.212 72.6652 cv
440.967 72.6843 440.441 72.7822 439.879 72.9282 cv
438.725 73.1943 437.326 73.6412 437.241 73.8533 cv
436.886 73.9482 436.551 74.0513 436.238 74.1702 cv
436.202 74.1982 436.194 74.2532 436.176 74.2762 cv
435.846 74.3203 435.525 74.3713 435.201 74.4423 cv
435.198 74.5212 435.165 74.6243 435.165 74.7573 cv
435.918 75.1572 435.918 75.1572 436.804 75.4813 cv
436.802 75.5842 436.799 75.7162 436.799 75.8212 cv
437.032 75.9012 437.141 76.0602 437.737 76.5052 cv
438.414 76.6752 439.078 76.7042 439.826 76.7203 cv
440.091 76.7272 440.357 76.7272 440.615 76.7333 cv
442.004 76.4943 442.692 75.6763 443.884 75.1392 cv
443.884 75.0892 443.913 75.0162 443.917 74.9672 cv
444.033 74.9373 444.125 74.8842 444.211 74.8652 cv
446.88 73.8312 446.615 71.3882 446.185 68.9902 cv
446.068 68.9092 446.038 68.6832 445.864 68.4193 cv
446.482 67.2252 449.202 67.6862 450.441 67.9423 cv
452.006 67.8533 452.479 67.1642 452.558 65.9142 cv
451.475 63.6693 450.305 63.2482 447.777 64.3903 cv
cp
456.468 56.5673 mo
455.924 55.4343 455.546 55.0883 454.351 54.7153 cv
453.232 54.6953 450.134 55.1223 449.546 54.7982 cv
449.692 54.7023 449.692 54.7023 449.871 54.2593 cv
450.74 53.5112 450.714 52.9443 450.727 51.9573 cv
450.343 50.9133 450.136 50.7242 450.084 50.4692 cv
449.991 50.4692 449.907 50.4692 449.782 50.4633 cv
449.733 50.3052 449.692 50.1982 449.641 50.0693 cv
450.269 49.9982 450.88 49.9263 451.498 49.8652 cv
451.542 49.7842 451.564 49.7092 451.6 49.6572 cv
451.804 49.5573 451.804 49.5573 452.305 49.5162 cv
452.335 49.4332 452.367 49.3873 452.392 49.3342 cv
453.643 48.8273 454.057 45.9003 452.859 45.6472 cv
452.821 45.5643 452.806 45.5182 452.806 45.4893 cv
452.454 45.3542 452.285 45.3533 452.195 45.0652 cv
450.957 44.9952 449.417 45.5162 449.11 44.1332 cv
448.591 43.6893 448.446 44.0992 448.091 43.3693 cv
447.243 43.3802 446.336 43.1572 446.346 44.1492 cv
446.188 44.1652 446.042 44.1982 445.867 44.2153 cv
445.777 44.6832 445.69 45.1503 445.616 45.6193 cv
445.396 45.9243 445.284 46.0283 445.246 46.4152 cv
445.042 46.4113 444.839 46.4352 444.632 46.4293 cv
444.42 46.4603 444.245 46.4532 444.041 46.4783 cv
444.041 46.6633 li
443.562 46.7322 443.124 46.8002 442.804 47.0792 cv
442.722 46.5853 442.776 46.0443 442.278 45.7982 cv
442.254 45.6652 442.227 45.5682 442.194 45.4362 cv
442.05 45.4362 li
441.862 44.7813 441.21 44.7792 440.602 44.7822 cv
440.561 44.9963 440.398 45.1243 440.289 45.2772 cv
440.235 45.3323 440.166 45.3773 440.102 45.4532 cv
440.082 45.4042 440.053 45.3773 440.02 45.3522 cv
439.803 45.7153 439.803 45.7153 439.438 46.9272 cv
439.233 46.9272 li
439.067 47.5732 439.128 47.7313 439.297 48.4382 cv
439.203 49.0303 439.098 49.5992 438.975 50.1962 cv
438.973 50.5602 438.875 50.6412 438.755 51.7852 cv
438.681 52.1722 438.621 52.5552 438.551 52.9503 cv
438.464 52.9482 438.406 52.9453 438.342 52.9453 cv
438.278 53.5402 438.393 53.9553 438.467 54.6083 cv
438.526 54.6113 438.559 54.6113 438.61 54.6113 cv
438.812 55.2112 438.781 55.7032 439.509 56.0532 cv
439.478 56.1052 439.445 56.1592 439.417 56.2363 cv
438.534 56.4072 437.765 56.6782 436.904 56.7192 cv
437.331 55.9202 437.331 55.9202 437.394 55.6633 cv
437.331 55.6633 437.272 55.6583 437.203 55.6583 cv
438.178 54.2963 438.045 53.2762 438.161 51.6873 cv
438.099 51.6642 438.017 51.6642 437.957 51.6332 cv
437.916 50.3052 437.678 49.5253 437.119 48.3542 cv
437.003 48.3542 436.912 48.3203 436.787 48.3203 cv
436.746 47.5123 436.575 47.2023 436.025 46.5922 cv
435.936 46.5883 435.826 46.5883 435.724 46.5842 cv
435.729 46.5402 435.729 46.4822 435.729 46.4323 cv
432.932 46.5222 435.076 48.3422 434.125 49.1622 cv
433.873 50.3043 434.033 51.4282 433.699 52.6962 cv
433.155 53.1533 433.474 55.3173 433.558 56.0402 cv
433.786 56.3392 434.807 57.2352 434.863 57.5712 cv
432.843 58.2943 432.843 58.2943 432.263 58.4172 cv
432.202 57.9252 432.148 57.7922 432.419 57.4362 cv
432.304 56.8073 432.202 56.2042 432.097 55.5823 cv
431.934 55.5493 431.829 55.4993 431.711 55.4722 cv
431.596 55.2112 431.509 54.9512 431.384 54.6862 cv
430.125 54.5123 429.949 54.7943 429.441 55.7233 cv
428.91 57.2722 428.47 58.9323 427.863 60.5552 cv
426.777 61.7883 427.122 62.8063 427.459 64.2402 cv
427.505 64.2402 427.602 64.2413 427.658 64.2413 cv
427.719 64.3773 427.771 64.5062 427.832 64.6362 cv
428.067 64.6403 428.304 64.6722 428.57 64.7042 cv
428.652 65.0413 428.859 64.9932 428.938 65.3323 cv
430.255 65.7922 430.943 65.0742 431.247 64.0422 cv
431.405 64.0422 431.528 64.0422 431.666 64.0463 cv
431.88 63.5773 432.412 63.2742 432.478 62.9893 cv
432.578 62.9713 432.625 62.9453 432.72 62.9473 cv
433.568 61.6642 436.674 60.6373 438.324 60.4852 cv
438.914 60.3323 439.478 60.1862 440.071 60.0693 cv
441.013 59.8212 441.966 59.6252 442.962 59.4783 cv
443.41 59.3032 443.913 59.1362 444.444 58.9833 cv
446.664 58.3923 449.462 58.1503 451.554 57.9783 cv
451.355 58.1763 451.168 58.4352 450.875 58.5093 cv
450.542 59.2842 449.273 59.3732 449.143 60.2512 cv
449.289 60.2573 449.404 60.2573 449.544 60.2623 cv
449.587 60.4482 449.583 60.6232 449.605 60.8082 cv
449.869 60.9133 450.017 60.8602 450.103 61.1743 cv
450.571 61.3892 452.242 61.3082 452.463 60.7452 cv
452.846 60.6992 453.265 60.4393 453.559 60.3932 cv
453.559 60.3203 453.562 60.2103 453.562 60.1323 cv
453.741 60.0823 453.891 60.0333 454.093 59.9882 cv
454.093 59.9072 454.128 59.8552 454.154 59.7803 cv
454.335 59.7493 454.5 59.7333 454.667 59.7092 cv
454.667 59.5303 li
454.832 59.4733 454.992 59.4343 455.164 59.3533 cv
455.164 59.1943 li
455.462 59.0912 455.464 58.9122 455.794 58.8453 cv
455.796 58.7842 455.796 58.7122 455.796 58.6592 cv
456.596 58.4102 456.459 57.1353 456.468 56.5673 cv
false sop
.699947 .676783 .637873 .738277 cmyk
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
