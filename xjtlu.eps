%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: xjtlu.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: Fred
%%CreationDate: 2013/5/27, 14:47:49
%%BoundingBox: 0 0 306 79
%%HiResBoundingBox: 0 0 305.7630 78.9930
%%CropBox: 0 0 305.7630 78.9930
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1096 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2013-05-27T14:45:03+08:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2013-05-27T14:45:17+08:00"
   xmp:MetadataDate="2013-05-27T14:45:17+08:00"
   pdf:Producer="Acrobat Distiller 9.0.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:0a3a6854-00ad-4483-bb3c-21aaef65621d"
   xmpMM:InstanceID="uuid:51c7b10c-9c0d-47cd-9be3-3812e1ad84c4">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Nipic_3710150_201106291221216...</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Fred</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -78.993 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 78.993 li
305.763 78.993 li
305.763 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 0 mo
305.76 0 li
305.76 78.933 li
0 78.933 li
cp
clp
295.107 53.397 mo
295.059 53.397 294.993 53.393 294.898 53.393 cv
294.571 53.831 294.571 53.831 293.917 54.362 cv
293.835 54.395 293.764 54.439 293.682 54.467 cv
293.026 54.694 292.313 54.889 292.341 55.587 cv
292.242 55.614 292.158 55.609 292.071 55.634 cv
292.158 53.793 292.158 53.793 292.045 53.272 cv
292.234 52.413 292.4 51.666 292.372 50.859 cv
292.699 50.865 293.023 50.865 293.378 50.876 cv
293.493 51.111 293.606 51.317 293.723 51.558 cv
293.723 51.582 293.723 51.602 293.741 51.602 cv
294.308 51.773 294.615 52.738 295.325 53.088 cv
295.252 53.185 295.168 53.287 295.107 53.397 cv
cp
22.343 78.993 mo
22.368 78.993 li
22.422 78.972 li
22.436 78.932 li
22.671 78.823 li
22.687 78.787 li
23.467 78.326 li
23.483 78.289 li
24.014 77.977 li
24.03 77.941 li
24.562 77.629 li
24.576 77.59 li
24.86 77.43 li
24.875 77.392 li
25.159 77.231 li
25.173 77.192 li
26.043 76.663 26.895 76.008 27.747 75.439 cv
27.761 75.402 li
28.17 75.132 li
28.137 75.108 li
28.176 75.1 li
28.568 74.834 li
28.535 74.809 li
28.575 74.803 li
29.362 74.24 li
29.333 74.193 li
29.35 74.212 li
29.738 73.946 li
29.752 73.91 li
30.241 73.525 li
30.258 73.543 li
30.229 73.496 li
30.246 73.514 li
30.739 73.127 li
30.756 73.145 li
30.727 73.098 li
30.747 73.118 li
31.334 72.629 li
31.353 72.648 li
31.324 72.601 li
31.345 72.622 li
32.019 72.023 li
32.044 71.998 li
32.061 72.017 li
32.926 71.236 li
32.946 71.254 li
32.919 71.206 li
33.072 71.189 34.596 69.627 34.777 69.405 cv
34.873 69.288 36.35 67.637 36.303 67.523 cv
36.378 67.523 li
36.356 67.472 36.749 66.953 36.831 66.858 cv
36.945 66.728 37.238 66.291 37.301 66.186 cv
37.397 66.025 38.158 64.897 38.173 64.758 cv
38.198 64.791 li
38.219 64.762 li
38.222 64.759 38.369 64.46 38.426 64.37 cv
38.462 64.311 38.623 64.04 38.656 63.959 cv
38.723 63.799 39.014 63.286 39.103 63.133 cv
39.438 62.561 39.702 61.882 39.966 61.357 cv
40.074 61.142 40.209 60.826 40.336 60.513 cv
40.423 60.3 40.592 59.924 40.693 59.643 cv
40.791 59.37 40.982 58.963 41.042 58.747 cv
41.109 58.504 41.261 58.097 41.347 57.877 cv
41.795 56.728 42.074 55.502 42.452 54.241 cv
42.583 53.804 43.333 50.637 43.271 50.506 cv
43.295 50.511 li
43.37 50.207 li
43.37 49.964 43.468 49.58 43.527 49.322 cv
43.575 49.114 43.628 48.665 43.671 48.416 cv
43.771 47.842 43.843 47.29 43.926 46.685 cv
44.062 45.697 44.214 44.398 44.289 43.415 cv
44.428 41.473 li
44.607 38.851 44.679 36.072 44.639 33.463 cv
44.639 23.412 li
43.892 23.412 li
29.534 23.412 15.176 23.412 .817993 23.412 cv
.071991 23.412 li
.071991 33.413 li
0 36.11 .118988 38.807 .276001 41.499 cv
.29599 41.723 li
.333984 42.37 .348999 42.64 .424988 43.361 cv
.441986 43.52 .46698 43.96 .485992 44.098 cv
.506989 44.245 .531982 44.377 .53299 44.492 cv
.53299 44.594 .569 44.727 .569 44.883 cv
.569 44.931 .589996 44.975 .579987 45.009 cv
.917999 47.62 li
.962982 47.97 1.55099 51.599 1.689 51.7 cv
1.689 51.7 1.664 51.746 1.664 51.75 cv
1.664 51.955 1.89099 52.6 1.92499 52.925 cv
1.94299 53.095 2.03198 53.278 2.073 53.495 cv
2.108 53.683 2.19199 53.913 2.22299 54.107 cv
2.25598 54.308 2.33798 54.491 2.37601 54.681 cv
2.39999 54.799 2.50699 55.198 2.539 55.279 cv
2.63098 55.514 2.797 56.084 2.87 56.396 cv
2.94998 56.736 3.133 57.132 3.224 57.484 cv
3.31299 57.829 3.49399 58.216 3.61099 58.557 cv
3.72101 58.878 3.90399 59.381 4.04099 59.697 cv
4.202 60.069 4.39899 60.502 4.51801 60.849 cv
4.591 61.061 4.711 61.246 4.76099 61.371 cv
4.83099 61.545 4.923 61.737 5.02798 61.947 cv
5.129 62.15 5.17999 62.275 5.285 62.485 cv
5.39099 62.696 5.45999 62.865 5.55798 63.034 cv
5.65698 63.202 5.71399 63.309 5.82001 63.518 cv
5.90399 63.685 6.02798 63.939 6.086 64.022 cv
6.16998 64.142 6.33301 64.402 6.39999 64.545 cv
6.453 64.658 6.65399 64.934 6.702 65.054 cv
6.737 65.142 7.306 66.032 7.35699 66.087 cv
7.44199 66.177 7.54999 66.402 7.67899 66.561 cv
7.78598 66.693 7.91299 66.932 8.01599 67.044 cv
8.20499 67.251 9.366 68.896 9.55301 68.917 cv
9.51999 68.995 9.75 69.187 9.82098 69.27 cv
9.923 69.387 10.033 69.51 10.143 69.62 cv
10.377 69.852 10.591 70.087 10.821 70.311 cv
10.992 70.476 12.104 71.593 12.24 71.604 cv
12.201 71.673 12.245 71.696 12.341 71.705 cv
12.313 71.752 li
12.334 71.732 li
13.016 72.296 li
13.031 72.332 li
13.613 72.794 li
13.637 72.819 li
13.622 72.839 li
13.737 72.902 li
13.704 72.927 li
13.744 72.934 li
14.215 73.315 li
14.233 73.297 li
14.204 73.344 li
14.221 73.326 li
14.713 73.713 li
14.731 73.695 li
14.703 73.744 li
14.861 73.757 16.569 75.22 16.771 75.238 cv
16.757 75.267 li
17.097 75.481 li
17.111 75.519 li
17.793 75.979 li
17.808 76.016 li
19.112 76.883 li
19.079 76.907 li
19.117 76.914 li
19.409 77.079 li
19.391 77.111 li
19.709 77.281 li
19.676 77.306 li
19.714 77.312 li
20.008 77.48 li
19.975 77.504 li
20.011 77.513 li
21.401 78.375 li
21.368 78.4 li
21.406 78.406 li
22.343 78.993 li
cp
56.281 34.269 mo
59.641 29.139 li
56.597 24.438 li
58.916 24.438 li
60.889 27.597 li
62.818 24.438 li
65.119 24.438 li
62.061 29.213 li
65.421 34.269 li
63.027 34.269 li
60.847 30.87 li
58.662 34.269 li
56.281 34.269 li
cp
68.757 26.182 mo
66.873 26.182 li
66.873 24.4381 li
68.757 24.4381 li
68.757 26.182 li
cp
68.757 34.269 mo
66.873 34.269 li
66.873 27.1484 li
68.757 27.1484 li
68.757 34.269 li
cp
71.114 23.914 mo
71.114 23.772 71.175 23.628 71.301 23.486 cv
71.427 23.342 71.615 23.271 71.864 23.271 cv
72.15 23.271 72.375 23.388 72.535 23.619 cv
72.698 23.852 72.778 24.093 72.778 24.344 cv
72.778 24.843 72.634 25.311 72.348 25.738 cv
72.061 26.168 71.649 26.489 71.114 26.704 cv
70.898 26.436 li
71.256 26.221 71.525 25.997 71.704 25.766 cv
71.883 25.533 71.972 25.292 71.972 25.04 cv
71.972 24.862 71.83 24.702 71.544 24.557 cv
71.258 24.415 71.114 24.2 71.114 23.914 cv
cp
77.051 29.32 mo
75.341 29.011 li
75.534 28.322 75.863 27.814 76.333 27.482 cv
76.804 27.153 77.5 26.986 78.425 26.986 cv
79.267 26.986 79.892 27.086 80.304 27.285 cv
80.714 27.484 81.004 27.737 81.171 28.043 cv
81.338 28.35 81.423 28.911 81.423 29.73 cv
81.403 31.93 li
81.403 32.554 81.433 33.017 81.494 33.314 cv
81.554 33.61 81.668 33.93 81.833 34.269 cv
79.968 34.269 li
79.919 34.143 79.857 33.958 79.786 33.713 cv
79.757 33.6 79.734 33.527 79.72 33.491 cv
79.398 33.804 79.054 34.038 78.688 34.196 cv
78.322 34.351 77.93 34.429 77.514 34.429 cv
76.781 34.429 76.202 34.23 75.781 33.834 cv
75.358 33.436 75.147 32.932 75.147 32.323 cv
75.147 31.923 75.243 31.563 75.435 31.248 cv
75.627 30.932 75.898 30.691 76.243 30.524 cv
76.589 30.357 77.09 30.21 77.743 30.085 cv
78.621 29.92 79.233 29.765 79.571 29.623 cv
79.571 29.435 li
79.571 29.071 79.482 28.814 79.303 28.659 cv
79.125 28.505 78.789 28.428 78.292 28.428 cv
77.956 28.428 77.694 28.494 77.507 28.627 cv
77.319 28.758 77.168 28.988 77.051 29.32 cv
cp
79.571 30.849 mo
79.331 30.93 78.949 31.026 78.425 31.138 cv
77.903 31.25 77.562 31.36 77.399 31.465 cv
77.155 31.641 77.031 31.861 77.031 32.129 cv
77.031 32.394 77.13 32.621 77.326 32.813 cv
77.523 33.005 77.772 33.102 78.077 33.102 cv
78.418 33.102 78.74 32.989 79.05 32.768 cv
79.278 32.598 79.427 32.39 79.498 32.143 cv
79.549 31.982 79.571 31.675 79.571 31.225 cv
79.571 30.849 li
cp
90.205 34.269 mo
88.321 34.269 li
88.321 30.635 li
88.321 29.865 88.279 29.368 88.2 29.142 cv
88.119 28.918 87.987 28.741 87.806 28.615 cv
87.625 28.492 87.407 28.428 87.154 28.428 cv
86.826 28.428 86.533 28.517 86.274 28.696 cv
86.016 28.876 85.837 29.112 85.741 29.407 cv
85.645 29.703 85.597 30.247 85.597 31.044 cv
85.597 34.269 li
83.714 34.269 li
83.714 27.148 li
85.462 27.148 li
85.462 28.194 li
86.084 27.389 86.867 26.986 87.81 26.986 cv
88.225 26.986 88.607 27.061 88.95 27.21 cv
89.294 27.361 89.555 27.551 89.731 27.784 cv
89.907 28.018 90.031 28.281 90.099 28.577 cv
90.17 28.872 90.205 29.293 90.205 29.842 cv
90.205 34.269 li
cp
100.596 24.438 mo
102.576 24.438 li
102.576 30.662 li
102.576 31.474 102.503 32.101 102.361 32.539 cv
102.169 33.111 101.821 33.571 101.315 33.916 cv
100.809 34.264 100.143 34.436 99.317 34.436 cv
98.347 34.436 97.6 34.166 97.076 33.621 cv
96.555 33.079 96.289 32.282 96.287 31.232 cv
98.156 31.016 li
98.179 31.58 98.262 31.978 98.404 32.211 cv
98.619 32.564 98.946 32.74 99.383 32.74 cv
99.825 32.74 100.139 32.614 100.321 32.36 cv
100.505 32.108 100.596 31.584 100.596 30.787 cv
100.596 24.438 li
cp
107.004 26.182 mo
105.12 26.182 li
105.12 24.4381 li
107.004 24.4381 li
107.004 26.182 li
cp
107.004 34.269 mo
105.12 34.269 li
105.12 27.1484 li
107.004 27.1484 li
107.004 34.269 li
cp
110.789 29.32 mo
109.079 29.011 li
109.272 28.322 109.601 27.814 110.07 27.482 cv
110.542 27.153 111.238 26.986 112.162 26.986 cv
113.005 26.986 113.63 27.086 114.042 27.285 cv
114.452 27.484 114.742 27.737 114.909 28.043 cv
115.076 28.35 115.161 28.911 115.161 29.73 cv
115.14 31.93 li
115.14 32.554 115.17 33.017 115.232 33.314 cv
115.292 33.61 115.406 33.93 115.571 34.269 cv
113.706 34.269 li
113.657 34.143 113.596 33.958 113.524 33.713 cv
113.495 33.6 113.472 33.527 113.458 33.491 cv
113.135 33.804 112.792 34.038 112.426 34.196 cv
112.06 34.351 111.668 34.429 111.251 34.429 cv
110.519 34.429 109.94 34.23 109.519 33.834 cv
109.096 33.436 108.885 32.932 108.885 32.323 cv
108.885 31.923 108.981 31.563 109.174 31.248 cv
109.366 30.932 109.636 30.691 109.981 30.524 cv
110.327 30.357 110.828 30.21 111.48 30.085 cv
112.359 29.92 112.971 29.765 113.309 29.623 cv
113.309 29.435 li
113.309 29.071 113.22 28.814 113.042 28.659 cv
112.863 28.505 112.526 28.428 112.03 28.428 cv
111.693 28.428 111.432 28.494 111.245 28.627 cv
111.057 28.758 110.906 28.988 110.789 29.32 cv
cp
113.309 30.849 mo
113.069 30.93 112.686 31.026 112.162 31.138 cv
111.641 31.25 111.3 31.36 111.137 31.465 cv
110.893 31.641 110.769 31.861 110.769 32.129 cv
110.769 32.394 110.868 32.621 111.064 32.813 cv
111.261 33.005 111.51 33.102 111.815 33.102 cv
112.156 33.102 112.478 32.989 112.787 32.768 cv
113.016 32.598 113.165 32.39 113.236 32.143 cv
113.286 31.982 113.309 31.675 113.309 31.225 cv
113.309 30.849 li
cp
117.028 30.607 mo
117.028 29.981 117.183 29.375 117.49 28.789 cv
117.799 28.206 118.236 27.757 118.802 27.45 cv
119.367 27.141 119.999 26.986 120.697 26.986 cv
121.773 26.986 122.656 27.336 123.345 28.037 cv
124.034 28.737 124.377 29.621 124.377 30.689 cv
124.377 31.765 124.03 32.658 123.336 33.367 cv
122.64 34.077 121.766 34.429 120.711 34.429 cv
120.056 34.429 119.436 34.283 118.843 33.987 cv
118.25 33.692 117.799 33.26 117.49 32.69 cv
117.183 32.12 117.028 31.426 117.028 30.607 cv
cp
118.96 30.707 mo
118.96 31.415 119.127 31.955 119.463 32.33 cv
119.797 32.706 120.212 32.893 120.704 32.893 cv
121.196 32.893 121.608 32.706 121.94 32.33 cv
122.274 31.955 122.441 31.41 122.441 30.694 cv
122.441 29.998 122.274 29.46 121.94 29.085 cv
121.608 28.709 121.196 28.522 120.704 28.522 cv
120.212 28.522 119.797 28.709 119.463 29.085 cv
119.127 29.46 118.96 30.002 118.96 30.707 cv
cp
129.563 27.148 mo
129.563 28.65 li
128.277 28.65 li
128.277 31.52 li
128.277 32.101 128.288 32.44 128.313 32.536 cv
128.339 32.633 128.394 32.71 128.48 32.774 cv
128.567 32.836 128.675 32.868 128.798 32.868 cv
128.975 32.868 129.227 32.806 129.558 32.687 cv
129.719 34.147 li
129.279 34.335 128.785 34.429 128.229 34.429 cv
127.89 34.429 127.583 34.372 127.311 34.26 cv
127.038 34.146 126.839 33.997 126.711 33.816 cv
126.583 33.635 126.495 33.39 126.446 33.081 cv
126.407 32.864 126.386 32.42 126.386 31.753 cv
126.386 28.65 li
125.521 28.65 li
125.521 27.148 li
126.386 27.148 li
126.386 25.731 li
128.277 24.633 li
128.277 27.148 li
129.563 27.148 li
cp
131.43 30.607 mo
131.43 29.981 131.585 29.375 131.893 28.789 cv
132.202 28.206 132.638 27.757 133.204 27.45 cv
133.769 27.141 134.401 26.986 135.099 26.986 cv
136.175 26.986 137.058 27.336 137.747 28.037 cv
138.436 28.737 138.779 29.621 138.779 30.689 cv
138.779 31.765 138.432 32.658 137.738 33.367 cv
137.042 34.077 136.168 34.429 135.113 34.429 cv
134.458 34.429 133.838 34.283 133.245 33.987 cv
132.652 33.692 132.202 33.26 131.893 32.69 cv
131.585 32.12 131.43 31.426 131.43 30.607 cv
cp
133.362 30.707 mo
133.362 31.415 133.529 31.955 133.865 32.33 cv
134.199 32.706 134.614 32.893 135.106 32.893 cv
135.598 32.893 136.009 32.706 136.342 32.33 cv
136.676 31.955 136.843 31.41 136.843 30.694 cv
136.843 29.998 136.676 29.46 136.342 29.085 cv
136.009 28.709 135.598 28.522 135.106 28.522 cv
134.614 28.522 134.199 28.709 133.865 29.085 cv
133.529 29.46 133.362 30.002 133.362 30.707 cv
cp
147.178 34.269 mo
145.295 34.269 li
145.295 30.635 li
145.295 29.865 145.254 29.368 145.174 29.142 cv
145.093 28.918 144.96 28.741 144.78 28.615 cv
144.599 28.492 144.382 28.428 144.128 28.428 cv
143.8 28.428 143.507 28.517 143.249 28.696 cv
142.99 28.876 142.811 29.112 142.715 29.407 cv
142.619 29.703 142.571 30.247 142.571 31.044 cv
142.571 34.269 li
140.687 34.269 li
140.687 27.148 li
142.436 27.148 li
142.436 28.194 li
143.059 27.389 143.841 26.986 144.784 26.986 cv
145.199 26.986 145.581 27.061 145.924 27.21 cv
146.268 27.361 146.529 27.551 146.705 27.784 cv
146.881 28.018 147.004 28.281 147.073 28.577 cv
147.144 28.872 147.178 29.293 147.178 29.842 cv
147.178 34.269 li
cp
149.361 34.738 mo
151.513 34.999 li
151.549 35.251 151.632 35.422 151.76 35.516 cv
151.938 35.651 152.223 35.718 152.605 35.718 cv
153.097 35.718 153.465 35.644 153.712 35.496 cv
153.878 35.397 154.003 35.239 154.088 35.02 cv
154.145 34.864 154.174 34.576 154.174 34.154 cv
154.174 33.115 li
153.612 33.885 152.9 34.269 152.042 34.269 cv
151.085 34.269 150.327 33.864 149.768 33.056 cv
149.332 32.415 149.112 31.621 149.112 30.668 cv
149.112 29.473 149.4 28.563 149.974 27.931 cv
150.549 27.302 151.263 26.986 152.117 26.986 cv
152.996 26.986 153.724 27.372 154.296 28.146 cv
154.296 27.148 li
156.058 27.148 li
156.058 33.539 li
156.058 34.379 155.99 35.006 155.85 35.422 cv
155.713 35.839 155.518 36.164 155.269 36.402 cv
155.017 36.638 154.683 36.823 154.266 36.958 cv
153.847 37.091 153.319 37.16 152.68 37.16 cv
151.472 37.16 150.615 36.952 150.112 36.54 cv
149.606 36.125 149.354 35.601 149.354 34.967 cv
149.354 34.903 149.356 34.828 149.361 34.738 cv
cp
151.043 30.561 mo
151.043 31.316 151.19 31.87 151.483 32.221 cv
151.776 32.571 152.135 32.747 152.566 32.747 cv
153.026 32.747 153.415 32.566 153.733 32.207 cv
154.049 31.847 154.209 31.314 154.209 30.607 cv
154.209 29.87 154.056 29.322 153.751 28.965 cv
153.449 28.606 153.065 28.428 152.6 28.428 cv
152.147 28.428 151.776 28.604 151.483 28.954 cv
151.19 29.307 151.043 29.84 151.043 30.561 cv
cp
162.627 31.202 mo
157.879 31.202 li
157.879 29.3181 li
162.627 29.3181 li
162.627 31.202 li
cp
164.278 34.269 mo
164.278 24.519 li
166.263 24.519 li
166.263 32.612 li
171.198 32.612 li
171.198 34.269 li
164.278 34.269 li
cp
174.929 26.182 mo
173.046 26.182 li
173.046 24.4381 li
174.929 24.4381 li
174.929 26.182 li
cp
174.929 34.269 mo
173.046 34.269 li
173.046 27.1484 li
174.929 27.1484 li
174.929 34.269 li
cp
179.264 34.269 mo
176.394 27.148 li
178.371 27.148 li
179.713 30.783 li
180.101 31.996 li
180.205 31.687 180.271 31.484 180.296 31.385 cv
180.36 31.183 180.427 30.982 180.498 30.783 cv
181.852 27.148 li
183.791 27.148 li
180.96 34.269 li
179.264 34.269 li
cp
189.512 32.003 mo
191.392 32.317 li
191.149 33.005 190.769 33.53 190.247 33.889 cv
189.728 34.25 189.075 34.429 188.292 34.429 cv
187.054 34.429 186.139 34.027 185.544 33.216 cv
185.074 32.568 184.839 31.749 184.839 30.762 cv
184.839 29.581 185.147 28.657 185.766 27.988 cv
186.381 27.32 187.161 26.986 188.105 26.986 cv
189.164 26.986 190 27.336 190.613 28.037 cv
191.225 28.737 191.517 29.808 191.492 31.252 cv
186.771 31.252 li
186.784 31.811 186.935 32.245 187.226 32.554 cv
187.517 32.866 187.881 33.021 188.313 33.021 cv
188.608 33.021 188.856 32.941 189.057 32.781 cv
189.259 32.619 189.412 32.36 189.512 32.003 cv
cp
189.62 30.099 mo
189.606 29.552 189.467 29.137 189.199 28.853 cv
188.931 28.57 188.604 28.428 188.219 28.428 cv
187.807 28.428 187.468 28.579 187.201 28.879 cv
186.933 29.176 186.8 29.584 186.805 30.099 cv
189.62 30.099 li
cp
195.277 34.269 mo
193.394 34.269 li
193.394 27.148 li
195.142 27.148 li
195.142 28.16 li
195.442 27.681 195.712 27.366 195.95 27.215 cv
196.19 27.064 196.46 26.986 196.765 26.986 cv
197.196 26.986 197.607 27.105 198.005 27.343 cv
197.422 28.984 li
197.107 28.78 196.811 28.677 196.538 28.677 cv
196.273 28.677 196.051 28.748 195.868 28.895 cv
195.682 29.039 195.541 29.302 195.435 29.682 cv
195.33 30.062 195.277 30.859 195.277 32.069 cv
195.277 34.269 li
cp
199.209 27.148 mo
200.967 27.148 li
200.967 28.194 li
201.193 27.835 201.502 27.544 201.891 27.322 cv
202.281 27.098 202.713 26.986 203.187 26.986 cv
204.013 26.986 204.716 27.311 205.29 27.958 cv
205.867 28.606 206.155 29.511 206.155 30.668 cv
206.155 31.856 205.865 32.781 205.286 33.44 cv
204.704 34.1 203.999 34.429 203.173 34.429 cv
202.779 34.429 202.422 34.351 202.102 34.196 cv
201.784 34.038 201.447 33.77 201.093 33.39 cv
201.093 36.979 li
199.209 36.979 li
199.209 27.148 li
cp
201.074 30.588 mo
201.074 31.387 201.232 31.98 201.55 32.36 cv
201.866 32.742 202.253 32.935 202.711 32.935 cv
203.148 32.935 203.512 32.758 203.803 32.408 cv
204.093 32.058 204.24 31.481 204.24 30.682 cv
204.24 29.934 204.088 29.38 203.789 29.018 cv
203.489 28.657 203.118 28.476 202.676 28.476 cv
202.217 28.476 201.834 28.652 201.529 29.009 cv
201.225 29.364 201.074 29.89 201.074 30.588 cv
cp
207.66 30.607 mo
207.66 29.981 207.816 29.375 208.123 28.789 cv
208.432 28.206 208.869 27.757 209.434 27.45 cv
210 27.141 210.631 26.986 211.33 26.986 cv
212.405 26.986 213.289 27.336 213.978 28.037 cv
214.667 28.737 215.01 29.621 215.01 30.689 cv
215.01 31.765 214.662 32.658 213.969 33.367 cv
213.273 34.077 212.399 34.429 211.343 34.429 cv
210.689 34.429 210.068 34.283 209.476 33.987 cv
208.883 33.692 208.432 33.26 208.123 32.69 cv
207.816 32.12 207.66 31.426 207.66 30.607 cv
cp
209.592 30.707 mo
209.592 31.415 209.759 31.955 210.096 32.33 cv
210.43 32.706 210.844 32.893 211.336 32.893 cv
211.828 32.893 212.24 32.706 212.573 32.33 cv
212.907 31.955 213.074 31.41 213.074 30.694 cv
213.074 29.998 212.907 29.46 212.573 29.085 cv
212.24 28.709 211.828 28.522 211.336 28.522 cv
210.844 28.522 210.43 28.709 210.096 29.085 cv
209.759 29.46 209.592 30.002 209.592 30.707 cv
cp
216.494 30.607 mo
216.494 29.981 216.65 29.375 216.957 28.789 cv
217.266 28.206 217.703 27.757 218.269 27.45 cv
218.834 27.141 219.466 26.986 220.163 26.986 cv
221.24 26.986 222.123 27.336 222.812 28.037 cv
223.5 28.737 223.844 29.621 223.844 30.689 cv
223.844 31.765 223.496 32.658 222.803 33.367 cv
222.107 34.077 221.232 34.429 220.177 34.429 cv
219.522 34.429 218.903 34.283 218.309 33.987 cv
217.717 33.692 217.266 33.26 216.957 32.69 cv
216.65 32.12 216.494 31.426 216.494 30.607 cv
cp
218.426 30.707 mo
218.426 31.415 218.593 31.955 218.93 32.33 cv
219.264 32.706 219.678 32.893 220.17 32.893 cv
220.662 32.893 221.075 32.706 221.406 32.33 cv
221.741 31.955 221.908 31.41 221.908 30.694 cv
221.908 29.998 221.741 29.46 221.406 29.085 cv
221.075 28.709 220.662 28.522 220.17 28.522 cv
219.678 28.522 219.264 28.709 218.93 29.085 cv
218.593 29.46 218.426 30.002 218.426 30.707 cv
cp
227.649 34.269 mo
225.765 34.269 li
225.765 24.4385 li
227.649 24.4385 li
227.649 34.269 li
cp
236.238 24.438 mo
238.222 24.438 li
238.222 29.762 li
238.222 30.607 238.248 31.156 238.295 31.405 cv
238.38 31.808 238.584 32.131 238.902 32.374 cv
239.223 32.619 239.66 32.74 240.214 32.74 cv
240.777 32.74 241.203 32.626 241.489 32.394 cv
241.775 32.165 241.946 31.881 242.003 31.547 cv
242.063 31.211 242.091 30.655 242.091 29.877 cv
242.091 24.438 li
244.075 24.438 li
244.075 29.602 li
244.075 30.783 244.022 31.616 243.915 32.104 cv
243.807 32.591 243.611 33.001 243.322 33.337 cv
243.033 33.672 242.647 33.939 242.166 34.138 cv
241.683 34.338 241.051 34.436 240.273 34.436 cv
239.335 34.436 238.623 34.328 238.137 34.111 cv
237.652 33.894 237.27 33.612 236.988 33.267 cv
236.707 32.921 236.522 32.557 236.432 32.177 cv
236.302 31.614 236.238 30.783 236.238 29.682 cv
236.238 24.438 li
cp
253.079 34.269 mo
251.195 34.269 li
251.195 30.635 li
251.195 29.865 251.153 29.368 251.073 29.142 cv
250.993 28.918 250.86 28.741 250.68 28.615 cv
250.498 28.492 250.282 28.428 250.027 28.428 cv
249.7 28.428 249.407 28.517 249.148 28.696 cv
248.89 28.876 248.712 29.112 248.615 29.407 cv
248.519 29.703 248.471 30.247 248.471 31.044 cv
248.471 34.269 li
246.587 34.269 li
246.587 27.148 li
248.336 27.148 li
248.336 28.194 li
248.958 27.389 249.741 26.986 250.684 26.986 cv
251.099 26.986 251.481 27.061 251.824 27.21 cv
252.167 27.361 252.429 27.551 252.604 27.784 cv
252.781 28.018 252.905 28.281 252.973 28.577 cv
253.044 28.872 253.079 29.293 253.079 29.842 cv
253.079 34.269 li
cp
257.318 26.182 mo
255.434 26.182 li
255.434 24.4381 li
257.318 24.4381 li
257.318 26.182 li
cp
257.318 34.269 mo
255.434 34.269 li
255.434 27.1484 li
257.318 27.1484 li
257.318 34.269 li
cp
261.653 34.269 mo
258.782 27.148 li
260.76 27.148 li
262.102 30.783 li
262.491 31.996 li
262.594 31.687 262.66 31.484 262.685 31.385 cv
262.749 31.183 262.816 30.982 262.887 30.783 cv
264.242 27.148 li
266.18 27.148 li
263.349 34.269 li
261.653 34.269 li
cp
271.902 32.003 mo
273.781 32.317 li
273.538 33.005 273.158 33.53 272.636 33.889 cv
272.117 34.25 271.465 34.429 270.681 34.429 cv
269.443 34.429 268.528 34.027 267.933 33.216 cv
267.463 32.568 267.228 31.749 267.228 30.762 cv
267.228 29.581 267.537 28.657 268.155 27.988 cv
268.77 27.32 269.551 26.986 270.494 26.986 cv
271.554 26.986 272.389 27.336 273.002 28.037 cv
273.614 28.737 273.907 29.808 273.882 31.252 cv
269.16 31.252 li
269.173 31.811 269.324 32.245 269.615 32.554 cv
269.906 32.866 270.27 33.021 270.702 33.021 cv
270.997 33.021 271.245 32.941 271.446 32.781 cv
271.647 32.619 271.801 32.36 271.902 32.003 cv
cp
272.009 30.099 mo
271.995 29.552 271.856 29.137 271.588 28.853 cv
271.32 28.57 270.993 28.428 270.609 28.428 cv
270.196 28.428 269.858 28.579 269.59 28.879 cv
269.322 29.176 269.189 29.584 269.194 30.099 cv
272.009 30.099 li
cp
277.667 34.269 mo
275.783 34.269 li
275.783 27.148 li
277.532 27.148 li
277.532 28.16 li
277.831 27.681 278.101 27.366 278.339 27.215 cv
278.58 27.064 278.849 26.986 279.154 26.986 cv
279.585 26.986 279.996 27.105 280.395 27.343 cv
279.811 28.984 li
279.495 28.78 279.2 28.677 278.927 28.677 cv
278.662 28.677 278.44 28.748 278.257 28.895 cv
278.072 29.039 277.93 29.302 277.824 29.682 cv
277.719 30.062 277.667 30.859 277.667 32.069 cv
277.667 34.269 li
cp
280.989 32.236 mo
282.879 31.948 li
282.96 32.314 283.122 32.593 283.369 32.783 cv
283.615 32.973 283.957 33.07 284.402 33.07 cv
284.889 33.07 285.255 32.98 285.5 32.799 cv
285.668 32.675 285.75 32.506 285.75 32.298 cv
285.75 32.154 285.704 32.035 285.615 31.941 cv
285.521 31.852 285.31 31.77 284.985 31.694 cv
283.466 31.36 282.502 31.053 282.094 30.776 cv
281.532 30.392 281.25 29.856 281.25 29.172 cv
281.25 28.556 281.492 28.037 281.98 27.618 cv
282.468 27.196 283.223 26.986 284.246 26.986 cv
285.221 26.986 285.947 27.146 286.421 27.462 cv
286.894 27.78 287.22 28.249 287.398 28.872 cv
285.622 29.199 li
285.546 28.922 285.402 28.709 285.189 28.563 cv
284.976 28.414 284.674 28.341 284.28 28.341 cv
283.784 28.341 283.429 28.41 283.214 28.549 cv
283.072 28.647 283.001 28.776 283.001 28.931 cv
283.001 29.066 283.063 29.178 283.188 29.272 cv
283.358 29.398 283.944 29.574 284.949 29.803 cv
285.951 30.03 286.652 30.309 287.05 30.641 cv
287.444 30.978 287.641 31.445 287.641 32.042 cv
287.641 32.694 287.368 33.257 286.821 33.727 cv
286.276 34.196 285.471 34.429 284.402 34.429 cv
283.431 34.429 282.664 34.233 282.097 33.838 cv
281.532 33.447 281.163 32.912 280.989 32.236 cv
cp
291.62 26.182 mo
289.736 26.182 li
289.736 24.4381 li
291.62 24.4381 li
291.62 26.182 li
cp
291.62 34.269 mo
289.736 34.269 li
289.736 27.1484 li
291.62 27.1484 li
291.62 34.269 li
cp
297.261 27.148 mo
297.261 28.65 li
295.974 28.65 li
295.974 31.52 li
295.974 32.101 295.986 32.44 296.011 32.536 cv
296.037 32.633 296.091 32.71 296.178 32.774 cv
296.265 32.836 296.373 32.868 296.496 32.868 cv
296.673 32.868 296.925 32.806 297.257 32.687 cv
297.417 34.147 li
296.977 34.335 296.483 34.429 295.927 34.429 cv
295.588 34.429 295.281 34.372 295.009 34.26 cv
294.736 34.146 294.538 33.997 294.409 33.816 cv
294.281 33.635 294.194 33.39 294.144 33.081 cv
294.105 32.864 294.084 32.42 294.084 31.753 cv
294.084 28.65 li
293.219 28.65 li
293.219 27.148 li
294.084 27.148 li
294.084 25.731 li
295.974 24.633 li
295.974 27.148 li
297.261 27.148 li
cp
298.123 27.148 mo
300.128 27.148 li
301.831 32.205 li
303.495 27.148 li
305.445 27.148 li
302.932 34.001 li
302.481 35.242 li
302.316 35.656 302.158 35.974 302.009 36.194 cv
301.859 36.413 301.687 36.59 301.492 36.727 cv
301.297 36.863 301.06 36.97 300.776 37.045 cv
300.492 37.121 300.172 37.16 299.812 37.16 cv
299.451 37.16 299.096 37.121 298.746 37.045 cv
298.579 35.569 li
298.874 35.628 299.14 35.656 299.377 35.656 cv
299.815 35.656 300.139 35.528 300.35 35.271 cv
300.559 35.015 300.721 34.688 300.833 34.29 cv
298.123 27.148 li
cp
21.821 41.449 mo
21.821 41.518 21.813 41.682 21.87 41.723 cv
21.87 41.201 li
21.813 41.242 21.821 41.404 21.821 41.449 cv
cp
21.821 42.047 mo
21.831 42.246 li
21.821 42.494 li
21.87 42.494 li
21.87 41.972 li
21.819 41.989 21.819 41.995 21.821 42.047 cv
cp
21.836 40.953 mo
21.878 40.886 21.87 40.973 21.87 40.878 cv
21.87 40.405 li
21.811 40.448 21.822 40.608 21.821 40.679 cv
21.824 40.877 li
21.836 40.953 li
cp
21.673 39.717 mo
21.804 39.865 li
21.621 40.106 li
21.852 40.011 21.795 40.067 21.914 39.813 cv
21.844 39.742 li
21.673 39.717 li
cp
8.83099 36.573 mo
8.875 36.529 8.78699 36.618 8.83099 36.573 cv
cp
9.03 36.922 mo
9.05499 36.772 li
9.06299 36.698 li
9.04898 36.469 li
8.582 36.349 li
8.71799 36.552 8.966 36.647 9.03 36.922 cv
cp
34.113 36.946 mo
34.113 36.711 34.169 36.49 34.027 36.456 cv
33.919 36.43 33.725 36.358 33.615 36.349 cv
33.728 36.456 33.79 36.517 33.896 36.641 cv
33.936 36.69 33.986 36.725 34.019 36.781 cv
34.036 36.812 34.049 36.9 34.113 36.946 cv
cp
21.621 70.783 mo
21.618 70.659 li
21.618 70.261 li
21.62 70.167 li
21.024 70.036 li
21.214 70.201 21.215 70.202 21.381 70.401 cv
21.456 70.49 21.621 70.783 21.621 70.783 cv
cp
31.426 28.612 mo
31.47 28.568 31.381 28.656 31.426 28.612 cv
cp
31.077 28.736 mo
31.102 28.761 li
31.106 28.765 31.11 28.742 31.112 28.746 cv
31.116 28.755 31.13 28.727 31.139 28.723 cv
31.181 28.704 31.164 28.718 31.2 28.708 cv
31.277 28.687 31.251 28.686 31.308 28.673 cv
31.332 28.667 31.523 28.612 31.525 28.612 cv
31.597 28.613 li
31.625 28.711 li
31.827 28.728 31.79 28.759 31.973 28.653 cv
32.446 28.662 li
32.39 28.578 32.2 28.557 32.119 28.539 cv
32.055 28.525 31.79 28.437 31.774 28.437 cv
31.608 28.437 31.192 28.659 31.077 28.736 cv
cp
6.94 28.612 mo
6.98401 28.568 6.896 28.656 6.94 28.612 cv
cp
5.996 28.739 mo
6.01599 28.752 li
6.54099 28.612 li
6.59799 28.725 6.70099 28.757 6.819 28.716 cv
6.94101 28.673 6.86398 28.636 6.983 28.651 cv
7.10199 28.665 7.14301 28.67 7.215 28.674 cv
7.43799 28.632 li
6.66501 28.434 li
5.996 28.739 li
cp
27.415 44.978 mo
27.427 44.974 27.432 45.007 27.444 45 cv
27.593 45.008 li
27.585 45.113 27.538 45.104 27.643 45.132 cv
27.668 44.982 li
27.668 44.51 li
27.668 44.422 27.654 44.403 27.593 44.36 cv
27.564 44.431 27.64 44.51 27.519 44.51 cv
27.395 44.51 li
27.395 44.36 li
27.273 44.39 27.3 44.47 27.292 44.534 cv
27.292 44.833 li
27.295 44.933 li
27.287 45.043 27.318 45.156 27.395 45.182 cv
27.395 45.082 li
27.395 44.947 27.437 45.099 27.39 45.003 cv
27.415 44.978 li
cp
17.864 60.806 mo
17.963 60.861 18.266 60.657 18.486 60.657 cv
18.585 60.657 li
18.636 60.844 18.925 60.818 19.033 60.657 cv
19.128 60.721 19.54 60.782 19.63 60.657 cv
19.337 60.632 18.917 60.457 18.729 60.443 cv
18.654 60.437 18.006 60.738 17.864 60.806 cv
cp
27.395 46.077 mo
27.438 46.033 27.35 46.122 27.395 46.077 cv
cp
27.295 46.127 mo
27.292 46.226 li
27.292 46.425 li
27.295 46.525 li
27.277 46.758 27.326 46.774 27.593 46.774 cv
27.623 46.662 27.668 46.694 27.668 46.575 cv
27.668 46.102 li
27.668 46.014 27.654 45.995 27.59 45.952 cv
27.569 46.102 li
27.461 46.058 27.395 46.168 27.395 45.928 cv
27.279 46.005 27.302 46.033 27.295 46.127 cv
cp
16.445 53.864 mo
16.47 53.889 li
16.481 53.901 16.541 53.84 16.57 53.84 cv
16.683 53.84 16.693 54.088 16.724 54.159 cv
16.763 54.249 16.826 54.426 16.851 54.525 cv
16.868 54.586 16.955 54.852 16.957 54.878 cv
16.958 54.899 17.023 55.243 17.048 55.304 cv
16.719 55.407 li
16.555 55.705 16.964 55.474 17.099 55.339 cv
17.3 55.139 17.239 54.961 17.205 54.791 cv
17.157 54.541 16.874 53.895 16.881 53.65 cv
16.968 53.516 li
16.834 53.527 16.474 53.814 16.445 53.864 cv
cp
18.352 52.595 mo
18.545 52.708 18.513 52.494 18.632 52.798 cv
18.651 52.847 18.709 53.145 18.72 53.186 cv
18.767 53.362 18.975 53.89 18.686 53.914 cv
18.71 53.989 li
18.984 53.931 19.169 53.765 19.481 53.765 cv
19.714 53.765 19.764 53.748 19.749 53.516 cv
19.755 53.367 li
19.655 53.367 li
19.575 53.748 19.435 53.58 19.239 53.7 cv
19.133 53.666 li
19.15 53.624 18.884 52.739 18.882 52.492 cv
19 52.446 li
19.005 52.361 li
18.352 52.595 li
cp
24.609 52.575 mo
24.511 52.803 li
24.682 52.745 li
24.628 52.615 24.921 52.514 25.022 52.48 cv
25.205 52.695 li
25.198 52.992 25.106 53.035 24.98 53.243 cv
24.924 53.335 24.627 53.656 24.508 53.666 cv
24.52 53.695 li
24.466 53.715 li
24.458 53.79 li
24.646 53.774 24.735 53.754 24.875 53.752 cv
24.956 53.752 24.978 53.764 25.075 53.773 cv
25.15 53.781 25.326 53.84 25.329 53.84 cv
25.466 53.84 25.5 53.584 25.527 53.522 cv
25.428 53.491 li
25.386 53.556 25.34 53.597 25.28 53.584 cv
24.906 53.566 li
24.922 53.374 25.351 53.201 25.493 52.907 cv
25.589 52.709 25.493 52.347 25.13 52.347 cv
25.035 52.347 25.121 52.355 25.056 52.323 cv
24.609 52.575 li
cp
20.477 52.496 mo
20.521 52.452 20.432 52.54 20.477 52.496 cv
cp
19.482 52.307 mo
19.507 52.361 19.514 52.397 19.581 52.397 cv
19.655 52.397 li
19.703 52.603 19.835 53.322 19.903 53.448 cv
19.997 53.621 20.069 53.703 20.271 53.768 cv
20.557 53.86 20.539 53.762 20.78 53.728 cv
20.844 53.64 li
20.875 53.417 li
20.892 53.304 20.8 52.939 20.8 52.695 cv
20.924 52.695 li
20.896 52.588 20.503 52.45 20.447 52.418 cv
20.427 52.446 li
20.387 52.486 20.603 52.571 20.641 52.676 cv
20.666 52.746 20.732 52.969 20.739 53.076 cv
20.756 53.34 20.847 53.642 20.502 53.715 cv
20.383 53.636 20.282 53.691 20.189 53.486 cv
20.15 53.399 20.093 53.188 20.091 53.074 cv
20.088 52.93 19.851 52.307 20.131 52.421 cv
20.103 52.33 li
20.028 52.33 li
19.482 52.307 li
cp
17.043 53.367 mo
17.097 53.743 li
17.138 53.747 li
17.266 53.392 li
17.283 53.37 17.462 53.243 17.466 53.243 cv
17.547 53.243 17.723 53.852 17.742 53.911 cv
17.83 54.18 17.961 54.33 17.686 54.514 cv
17.739 54.586 li
17.869 54.5 18.352 54.221 18.361 54.113 cv
18.228 54.124 18.289 54.163 18.237 54.163 cv
18.115 54.163 18.003 53.72 18.001 53.66 cv
17.998 53.575 17.857 53.229 17.814 53.044 cv
17.913 52.896 18.07 52.882 18.214 52.896 cv
18.187 52.944 li
18.262 52.944 li
18.262 52.994 li
18.401 52.961 18.359 52.747 18.287 52.596 cv
18.065 52.744 17.913 52.916 17.684 53.008 cv
17.458 53.098 17.312 53.345 17.043 53.367 cv
cp
15.5 55.78 mo
15.544 55.736 15.456 55.824 15.5 55.78 cv
cp
16.694 55.183 mo
16.738 55.139 16.65 55.228 16.694 55.183 cv
cp
16.495 55.084 mo
16.54 55.039 16.451 55.128 16.495 55.084 cv
cp
15.699 54.785 mo
15.743 54.741 15.655 54.829 15.699 54.785 cv
cp
15.982 54.105 mo
15.982 54.19 16.009 54.164 16.08 54.14 cv
15.973 54.61 li
15.821 54.493 li
15.74 54.398 li
15.71 54.405 li
15.775 54.276 li
15.803 54.286 li
15.777 54.219 li
15.239 54.567 li
15.254 54.598 li
15.441 54.571 li
15.802 54.908 li
15.823 54.885 li
15.823 54.885 15.772 55.085 15.762 55.127 cv
15.741 55.217 15.705 55.284 15.667 55.363 cv
15.647 55.404 15.588 55.556 15.554 55.635 cv
15.505 55.747 15.417 55.781 15.359 55.895 cv
15.703 55.735 li
15.72 55.691 li
15.848 55.656 li
15.838 55.539 15.832 55.595 15.71 55.609 cv
15.873 55.034 li
15.948 55.034 li
15.948 55.084 li
16.025 55.085 li
15.995 55.132 li
16.014 55.114 li
16.248 55.335 li
16.105 55.407 li
16.103 55.497 li
16.3 55.436 li
16.321 55.407 li
16.451 55.277 16.709 55.273 16.819 55.109 cv
16.705 55.062 16.671 55.215 16.418 55.012 cv
16.305 54.921 16.188 54.761 16.047 54.711 cv
16.047 54.361 16.364 53.953 16.376 53.873 cv
15.982 54.105 li
cp
26.312 53.286 mo
26.313 53.369 26.251 53.967 26.12 53.981 cv
25.916 54.003 25.964 53.416 25.963 53.386 cv
25.962 53.176 26.009 52.798 26.2 52.67 cv
26.375 52.836 26.311 53.14 26.312 53.286 cv
cp
26.2 54.088 mo
26.275 54.088 li
26.639 54.088 26.73 52.571 26.15 52.571 cv
25.528 52.571 25.477 54.088 26.2 54.088 cv
cp
27.021 54.412 mo
26.944 54.199 26.909 54.264 26.909 54.045 cv
26.909 53.937 26.909 53.867 26.909 53.759 cv
26.909 53.547 26.925 53.286 27.071 53.069 cv
27.169 53.099 li
27.16 53.119 27.245 53.497 27.245 53.566 cv
27.245 53.641 li
27.175 54.313 li
27.085 54.404 li
27.021 54.412 li
cp
26.648 53.417 mo
26.648 53.418 26.673 53.463 26.671 53.466 cv
26.648 53.666 li
26.648 53.74 li
26.648 53.856 26.683 54.028 26.734 54.152 cv
26.822 54.365 26.936 54.372 27.046 54.536 cv
27.217 54.536 27.264 54.593 27.377 54.469 cv
27.429 54.412 27.504 54.219 27.507 54.156 cv
27.517 53.979 27.56 53.697 27.486 53.525 cv
27.391 53.306 27.324 53.064 27.091 52.972 cv
26.747 52.835 26.74 53.349 26.648 53.417 cv
cp
28.191 54.238 mo
28.235 54.194 28.146 54.282 28.191 54.238 cv
cp
28.141 53.79 mo
28.185 53.746 28.096 53.834 28.141 53.79 cv
cp
27.618 54.313 mo
27.618 54.412 li
27.589 54.795 28.056 55.486 28.377 55.17 cv
28.678 54.874 28.339 54.069 27.991 54.213 cv
28.119 54.404 28.189 54.434 28.204 54.718 cv
28.211 54.859 28.238 55.014 28.041 55.109 cv
27.853 54.827 27.853 54.684 27.901 54.349 cv
27.914 54.253 27.926 54.156 27.974 54.048 cv
28.083 53.8 28.071 53.887 28.215 53.795 cv
28.589 53.794 li
28.589 53.765 li
28.448 53.555 28.099 53.54 27.901 53.675 cv
27.686 53.822 27.634 54.103 27.618 54.313 cv
cp
20.676 51.7 mo
20.72 51.656 20.631 51.744 20.676 51.7 cv
cp
20.377 51.501 mo
20.421 51.457 20.333 51.545 20.377 51.501 cv
cp
24.757 51.302 mo
24.801 51.258 24.712 51.346 24.757 51.302 cv
cp
18.884 51.302 mo
18.928 51.258 18.84 51.346 18.884 51.302 cv
cp
19.73 51.252 mo
19.774 51.208 19.686 51.296 19.73 51.252 cv
cp
18.685 51.202 mo
18.729 51.158 18.641 51.247 18.685 51.202 cv
cp
18.187 50.904 mo
18.231 50.86 18.143 50.948 18.187 50.904 cv
cp
17.536 50.452 mo
17.898 50.726 li
17.916 50.706 li
17.893 50.747 li
18.884 51.352 li
19.013 51.29 19.194 51.252 19.282 51.252 cv
19.556 51.259 li
19.68 51.252 li
19.758 51.304 20.095 51.346 20.302 51.476 cv
20.514 51.61 20.666 51.699 20.857 51.867 cv
21.16 52.137 21.132 51.998 21.428 52.081 cv
21.487 52.098 22.018 52.123 22.019 52.12 cv
22.417 52.12 li
22.517 52.123 li
22.797 52.102 23.05 52.072 23.394 52.038 cv
23.458 52.032 23.708 52.017 23.793 51.932 cv
23.861 51.862 24.118 51.632 24.164 51.655 cv
24.184 51.625 li
24.378 51.432 24.885 51.252 25.155 51.252 cv
25.428 51.252 li
25.531 51.252 25.592 51.279 25.704 51.305 cv
26.353 50.958 li
26.369 50.922 li
27.022 50.446 li
26.897 50.439 li
23.787 50.431 20.67 50.454 17.561 50.427 cv
17.536 50.452 li
cp
18.585 48.117 mo
18.63 48.073 18.541 48.162 18.585 48.117 cv
cp
19.556 48.043 mo
19.519 47.975 19.543 47.835 19.543 47.75 cv
19.543 47.62 19.501 47.574 19.655 47.47 cv
19.879 47.479 li
20.508 47.467 21.142 47.477 21.771 47.474 cv
25.155 47.47 li
25.315 47.577 25.267 47.606 25.267 47.75 cv
25.267 47.784 25.28 48.018 25.279 48.018 cv
25.259 48.047 li
25.053 48.011 li
23.303 47.926 21.645 48.035 19.929 48.021 cv
19.556 48.043 li
cp
21.074 47.993 mo
21.029 48.037 21.118 47.949 21.074 47.993 cv
cp
23.289 39.061 mo
23.31 39.071 23.526 38.997 23.594 39.006 cv
23.829 39.036 23.739 39.099 23.886 39.111 cv
23.889 39.907 li
24.064 39.701 24.119 39.658 24.409 39.633 cv
25.442 41.258 li
25.482 41.272 li
26.225 42.469 li
25.697 42.785 li
25.877 42.816 li
25.976 42.815 li
26.076 42.815 li
27.17 42.833 li
27.369 42.673 27.47 42.611 27.707 42.755 cv
27.877 42.858 27.748 42.831 27.935 42.831 cv
28.008 42.831 28.089 42.815 28.141 42.843 cv
28.018 43.074 27.803 43.104 27.805 43.322 cv
27.808 43.748 27.578 43.56 27.593 43.764 cv
27.59 43.863 li
27.59 44.062 li
27.594 44.066 27.569 44.111 27.569 44.112 cv
27.698 44.198 27.842 44.24 27.842 44.46 cv
27.842 45.032 li
27.842 45.211 27.743 45.243 27.768 45.306 cv
27.617 45.319 27.586 45.359 27.593 45.455 cv
27.59 45.555 li
27.59 45.655 li
27.594 45.658 27.569 45.704 27.569 45.704 cv
27.698 45.791 27.842 45.832 27.842 46.052 cv
27.842 46.625 li
27.842 46.906 27.67 46.948 27.469 46.948 cv
27.256 46.948 27.113 46.919 27.107 46.655 cv
27.104 46.517 27.108 46.41 27.108 46.27 cv
27.108 46.16 27.07 46 27.176 45.859 cv
27.376 45.594 27.395 46.006 27.395 45.356 cv
27.295 45.356 li
27.055 45.356 27.108 44.736 27.108 44.703 cv
27.108 44.391 27.029 44.338 27.395 44.137 cv
27.388 43.564 li
27.155 43.708 27.035 43.826 26.775 43.966 cv
26.664 44.026 26.635 44.063 26.495 44.133 cv
26.411 44.174 26.269 44.239 26.213 44.254 cv
25.976 44.316 25.243 44.627 25.03 44.51 cv
25.001 42.793 li
25.155 42.799 li
25.158 42.793 25.237 42.815 25.279 42.818 cv
25.379 42.815 li
25.478 42.815 li
25.628 42.803 li
23.886 40.156 li
23.89 41.101 li
23.888 41.533 23.889 41.964 23.889 42.395 cv
23.889 42.495 li
23.876 42.616 23.822 42.569 23.612 42.569 cv
23.477 42.569 23.364 42.569 23.289 42.569 cv
23.214 42.561 li
23.222 42.371 li
23.203 41.345 23.213 40.314 23.211 39.285 cv
23.226 39.113 li
23.267 39.101 li
23.289 39.061 li
cp
27.345 44.162 mo
27.3 44.206 27.389 44.117 27.345 44.162 cv
cp
25.677 42.793 mo
25.633 42.837 25.722 42.749 25.677 42.793 cv
cp
17.86 42.694 mo
24.682 42.694 li
24.736 42.694 24.865 42.881 24.871 42.924 cv
24.877 42.974 24.869 43.103 24.869 43.172 cv
24.869 43.343 24.869 43.493 24.869 43.67 cv
24.869 43.811 24.848 44.58 24.881 44.659 cv
24.488 44.692 23.96 45.14 23.96 45.505 cv
23.96 45.679 li
23.96 45.926 24.307 47 24.583 47.023 cv
24.556 47.071 li
25.023 47.335 li
24.96 47.419 22.999 47.359 22.735 47.359 cv
21.836 47.359 21.614 47.346 19.78 47.346 cv
20.004 47.191 20.411 47.043 20.531 46.803 cv
20.645 46.572 20.775 46.22 20.775 46.003 cv
20.775 45.779 li
20.775 45.505 20.604 45.225 20.383 45.001 cv
20.275 44.891 19.761 44.555 19.63 44.609 cv
19.63 44.327 19.799 44.03 19.841 43.77 cv
19.863 43.634 19.916 43.494 19.946 43.378 cv
20.024 43.076 19.976 43.282 19.954 43.017 cv
19.658 42.954 li
19.498 43.073 19.329 43.578 19.293 43.695 cv
19.264 43.794 19.035 44.378 19.009 44.41 cv
18.69 44.41 18.255 44.373 18.055 44.168 cv
17.876 43.984 17.902 43.499 17.889 43.316 cv
17.901 43.215 li
17.86 42.694 li
cp
20.029 47.197 mo
19.984 47.241 20.073 47.153 20.029 47.197 cv
cp
19.73 41.891 mo
19.805 41.897 li
20.533 41.892 21.266 41.892 21.994 41.897 cv
22.144 41.894 li
22.131 42.569 li
21.919 42.588 li
21.256 42.584 20.592 42.588 19.929 42.587 cv
19.73 42.587 li
19.7 42.595 19.481 42.609 19.481 42.52 cv
19.481 41.897 li
19.606 41.891 li
19.73 41.891 li
cp
19.481 41.101 mo
22.119 41.114 li
22.148 41.122 li
22.131 41.798 li
22.123 41.827 li
22.045 41.825 li
21.217 41.814 20.384 41.823 19.556 41.82 cv
19.481 41.823 li
19.481 41.101 li
cp
21.347 39.658 mo
21.35 39.654 21.566 39.48 21.583 39.47 cv
21.684 39.41 21.747 39.411 21.823 39.43 cv
22.033 39.485 22.169 39.648 22.169 39.857 cv
22.169 40.033 21.993 40.262 21.771 40.28 cv
21.77 40.312 li
22.119 40.32 li
22.148 40.326 li
22.131 41.002 li
22.123 41.031 li
22.045 41.029 li
21.217 41.017 20.384 41.027 19.556 41.023 cv
19.481 41.018 li
19.481 40.305 li
19.564 40.339 20.441 40.318 20.595 40.318 cv
20.748 40.318 21.639 40.36 21.696 40.28 cv
20.178 40.28 li
20.098 40.163 li
20.078 40.181 li
20.113 40.133 20.116 40.139 20.203 40.131 cv
20.751 40.085 li
21.098 40.048 li
21.099 40.031 li
20.431 40.031 20.356 40.063 19.922 40.092 cv
19.814 40.1 19.527 40.202 19.332 40.233 cv
19.194 40.256 18.9 40.37 18.784 40.38 cv
18.844 40.266 18.959 40.049 18.959 39.957 cv
18.959 39.953 18.934 39.907 18.934 39.907 cv
19.236 39.882 19.641 39.752 19.939 39.715 cv
20.343 39.665 20.746 39.653 20.999 39.633 cv
21.099 39.636 li
21.298 39.636 li
21.301 39.633 21.347 39.658 21.347 39.658 cv
cp
21.733 40.33 mo
21.775 40.309 li
21.696 40.297 li
21.733 40.33 li
cp
20.178 39.683 mo
20.134 39.727 20.222 39.639 20.178 39.683 cv
cp
22.29 40.802 mo
22.29 40.703 li
22.284 40.155 22.299 39.608 22.296 39.061 cv
22.293 38.962 li
22.283 38.826 22.527 38.763 22.666 38.763 cv
22.897 38.763 22.944 38.85 23.09 38.862 cv
23.097 39.011 li
23.087 39.507 23.096 40.008 23.093 40.504 cv
23.093 40.604 li
23.089 40.605 23.114 40.693 23.114 40.728 cv
23.114 42.569 li
22.617 42.569 li
22.492 42.563 li
22.392 42.566 li
22.268 42.569 li
22.306 42.494 22.285 42.597 22.293 42.494 cv
22.29 42.395 li
22.29 41.897 22.29 41.4 22.29 40.902 cv
22.29 40.802 li
cp
21.321 37.079 mo
20.85 37.145 li
20.784 37.189 20.07 37.33 19.875 37.414 cv
19.858 37.422 19.427 37.592 19.377 37.604 cv
19.218 37.639 19.031 37.762 18.915 37.802 cv
18.905 37.805 18.535 38.002 18.448 38.053 cv
18.273 38.155 18.12 38.269 17.952 38.378 cv
17.786 38.485 17.649 38.626 17.499 38.721 cv
17.36 38.809 17.197 39.073 17.043 39.086 cv
17.063 39.109 li
16.963 39.209 li
16.843 39.285 li
16.887 39.397 16.466 39.695 16.411 39.803 cv
16.338 39.947 16.065 40.21 16.011 40.349 cv
15.989 40.405 15.703 40.841 15.631 40.959 cv
15.539 41.11 15.446 41.334 15.358 41.532 cv
14.939 42.473 14.802 43.235 14.725 44.211 cv
14.718 44.311 li
14.725 44.808 li
14.728 44.908 li
14.698 45.307 14.852 45.704 14.864 46.084 cv
14.867 46.161 14.981 46.526 15.013 46.643 cv
15.068 46.836 15.168 47.13 15.22 47.281 cv
15.28 47.455 15.374 47.679 15.463 47.83 cv
15.503 47.898 15.561 48.018 15.595 48.097 cv
15.637 48.194 15.686 48.241 15.75 48.361 cv
15.827 48.502 15.937 48.717 16.067 48.871 cv
16.106 48.917 16.417 49.309 16.399 49.355 cv
16.52 49.411 li
16.483 49.502 16.755 49.708 16.837 49.79 cv
17.048 50.001 16.998 50.021 17.223 50.021 cv
17.346 50.021 17.925 50.043 17.989 50.006 cv
16.668 49.471 li
16.488 49.209 li
16.794 48.515 li
16.987 48.608 16.998 48.447 17.171 48.535 cv
17.287 48.595 17.423 48.633 17.54 48.69 cv
17.616 48.577 18.067 47.375 18.099 47.253 cv
18.214 46.816 18.5 46.279 18.597 45.86 cv
18.651 45.626 18.8 45.402 18.848 45.2 cv
18.899 44.98 19.023 44.752 19.097 44.504 cv
19.14 44.362 19.6 43.092 19.655 43.092 cv
19.744 43.092 19.67 43.142 19.851 43.144 cv
19.908 43.218 li
17.842 48.807 li
18.411 49.013 li
18.422 49.148 18.474 49.251 18.598 49.262 cv
18.61 48.167 li
18.677 48.075 20.303 48.13 20.532 48.13 cv
21.178 48.13 21.815 48.13 22.461 48.13 cv
23.117 48.13 23.734 48.13 24.39 48.13 cv
24.712 48.13 25.025 48.13 25.348 48.13 cv
25.522 48.13 25.658 48.13 25.833 48.13 cv
25.915 48.13 25.987 48.131 26.069 48.13 cv
26.249 48.128 26.2 48.137 26.2 48.341 cv
26.206 48.416 li
26.197 48.854 26.209 49.297 26.2 49.735 cv
26.2 49.834 li
18.585 49.834 li
18.621 49.749 18.631 49.31 18.569 49.29 cv
18.287 49.992 li
18.063 50.008 li
18.144 50.053 24.213 50.021 24.875 50.021 cv
25.456 50.021 25.999 50.021 26.579 50.021 cv
26.864 50.021 27.135 50.014 27.425 50.021 cv
27.547 50.024 28.106 49.39 28.196 49.243 cv
28.292 49.087 28.41 48.968 28.532 48.782 cv
28.615 48.656 28.738 48.472 28.822 48.326 cv
29.043 47.936 29.144 47.704 29.307 47.293 cv
29.592 46.577 29.808 45.601 29.802 45.057 cv
29.808 44.933 li
29.802 44.212 li
29.808 44.062 li
29.774 43.225 29.406 41.862 29.029 41.207 cv
28.924 41.025 28.841 40.856 28.68 40.587 cv
28.555 40.378 28.41 40.177 28.237 39.958 cv
28.12 39.81 27.367 38.861 27.141 38.833 cv
27.175 38.808 li
27.14 38.795 li
26.366 38.217 li
26.349 38.24 li
26.349 38.191 li
26.319 38.205 25.585 37.79 25.416 37.705 cv
25.15 37.571 24.682 37.408 24.455 37.348 cv
23.716 37.152 23.136 37.021 22.467 37.021 cv
22.044 37.021 li
21.321 37.079 li
cp
22.192 59.707 mo
22.108 59.874 21.924 60.235 21.826 60.34 cv
21.719 60.453 21.544 60.801 21.428 60.935 cv
21.251 61.138 21.131 61.319 20.95 61.503 cv
20.89 61.564 20.722 61.699 20.641 61.767 cv
20.545 61.848 20.443 62.009 20.402 62.05 cv
20.381 62.079 li
20.356 62.046 li
20.347 62.107 20.086 62.455 20.029 62.548 cv
19.921 62.723 19.83 62.908 19.782 63.026 cv
19.591 63.502 19.513 63.69 19.481 64.115 cv
19.484 64.215 li
19.465 64.43 19.637 64.687 19.786 64.831 cv
19.988 65.026 20.201 64.988 20.377 65.06 cv
20.352 64.951 20.195 64.648 20.165 64.577 cv
20.065 64.342 20.059 64.327 20.018 64.049 cv
19.98 63.796 20.174 63.758 20.38 63.813 cv
20.496 63.844 20.846 64.012 20.875 64.041 cv
20.904 64.061 li
20.871 64.086 li
20.985 64.1 21.193 64.25 21.319 64.279 cv
21.512 64.324 21.556 64.35 21.746 64.364 cv
21.846 64.361 li
21.945 64.361 li
22.269 64.388 22.703 64.038 22.897 63.823 cv
23.034 63.672 23.409 62.923 23.413 62.921 cv
23.319 62.781 23.361 62.521 23.599 62.385 cv
23.785 62.278 24.042 62.245 24.284 62.224 cv
25.353 62.138 li
25.576 62.114 li
27.295 61.88 28.874 61.807 30.48 60.732 cv
30.48 61.059 30.307 61.542 30.244 61.844 cv
30.17 62.199 30.081 62.468 29.942 62.88 cv
29.877 63.072 29.842 63.205 29.756 63.412 cv
29.672 63.616 29.68 63.617 29.373 63.55 cv
29.231 63.518 28.978 63.482 28.861 63.471 cv
28.732 63.459 28.443 63.37 28.39 63.443 cv
29.555 63.95 li
29.461 64.088 29.351 64.385 29.293 64.506 cv
29.232 64.638 29.095 64.913 29.001 65.051 cv
28.944 65.136 28.469 65.956 28.365 65.956 cv
28.32 65.956 27.39 65.371 27.245 65.359 cv
28.135 66.261 li
27.863 66.572 li
27.365 67.021 li
27.349 67.055 li
27.331 67.045 26.745 67.422 26.659 67.462 cv
26.463 67.554 26.168 67.683 25.927 67.748 cv
25.095 66.185 li
25.014 66.246 25.158 66.474 25.169 66.56 cv
25.187 66.707 25.228 66.804 25.266 66.945 cv
25.311 67.112 25.467 67.707 25.478 67.847 cv
25.404 67.847 li
25.077 67.911 24.642 67.919 24.31 67.862 cv
24.06 67.842 li
24.23 68.1 24.598 68.412 24.74 68.66 cv
24.828 68.813 24.924 68.921 25.038 69.085 cv
25.108 69.186 25.234 69.386 25.296 69.495 cv
25.593 70.008 25.927 70.807 25.927 71.48 cv
25.853 71.373 25.732 71.137 25.636 70.974 cv
25.578 70.874 25.299 70.612 25.329 70.534 cv
25.254 70.534 li
25.276 70.512 li
25.125 70.365 li
25.103 70.383 li
25.132 70.336 li
25.072 70.329 24.711 70.044 24.587 69.983 cv
24.418 69.899 24.191 69.803 24.01 69.788 cv
24.275 70.513 li
24.263 70.538 li
24.18 70.415 23.481 70.144 23.32 70.1 cv
22.872 69.977 22.802 69.942 22.268 69.986 cv
22.213 70.225 22.107 70.375 22.054 70.655 cv
22.009 70.892 21.984 71.089 21.97 71.281 cv
21.973 71.38 li
21.976 71.588 21.962 71.796 21.99 72.002 cv
22.107 72.75 li
22.194 72.748 li
22.315 72.748 22.871 72.94 23.044 73.018 cv
23.129 73.056 23.385 73.159 23.469 73.194 cv
23.58 73.24 23.827 73.313 23.836 73.42 cv
23.44 73.355 li
22.816 73.296 li
22.12 73.237 li
21.795 73.228 li
21.372 73.221 li
21.024 73.24 li
20.442 73.266 19.947 73.398 19.357 73.793 cv
19.392 73.375 19.812 73.074 20.24 72.86 cv
20.725 72.618 21.082 72.531 21.572 72.4 cv
21.572 72.3 li
21.572 71.921 21.572 71.734 21.394 71.259 cv
21.246 70.86 21.027 70.632 20.788 70.322 cv
20.605 70.083 20.223 69.744 19.969 69.574 cv
19.816 69.472 19.06 69.064 19.108 68.942 cv
18.84 68.92 18.252 67.937 18.183 67.802 cv
17.982 67.413 17.803 66.825 17.839 66.355 cv
17.836 66.255 li
17.859 65.931 li
17.905 65.532 18.086 65.066 18.211 64.83 cv
18.285 64.691 18.355 64.554 18.469 64.347 cv
18.571 64.164 18.647 63.953 18.75 63.781 cv
18.865 63.587 19.063 63.079 19.158 62.746 cv
19.208 62.57 19.245 62.39 19.245 62.243 cv
19.245 62.169 19.245 62.105 19.245 62.032 cv
19.246 61.884 19.19 61.915 19.158 61.777 cv
18.997 61.763 18.848 61.652 18.635 61.652 cv
18.391 61.652 18.276 61.652 17.938 61.652 cv
17.898 61.652 17.541 61.726 17.54 61.727 cv
17.533 61.578 li
17.537 61.478 li
17.537 61.378 li
17.559 61.135 17.456 61.157 17.341 61.08 cv
17.296 61.134 li
17.343 61.207 17.366 61.206 17.366 61.304 cv
17.366 61.627 li
17.366 61.981 17.258 62.258 17.167 62.647 cv
17.417 62.945 li
17.383 63.011 17.391 62.925 17.391 63.02 cv
17.391 63.304 17.091 63.535 17.068 63.817 cv
16.976 63.711 16.981 63.58 16.843 63.543 cv
16.744 63.916 16.492 63.818 16.346 63.916 cv
16.337 63.884 li
16.047 63.964 li
16.15 63.717 15.805 63.674 16.072 63.169 cv
15.956 63.092 15.811 63.091 15.798 62.946 cv
16.072 62.923 16.043 62.398 16.346 62.398 cv
16.371 62.398 li
16.497 62.398 16.724 62.508 16.893 62.548 cv
16.961 62.229 17.063 62.009 17.093 61.652 cv
16.872 61.546 16.86 61.456 16.843 61.254 cv
16.495 61.203 li
16.341 61.177 15.455 61.217 15.425 61.577 cv
15.375 61.577 li
15.326 61.366 15.273 61.279 15.29 61.135 cv
15.306 61 15.307 60.978 15.345 60.902 cv
15.397 60.798 15.475 60.771 15.45 60.707 cv
15.544 60.696 15.652 60.577 15.744 60.528 cv
15.826 60.483 16.004 60.432 16.1 60.41 cv
16.315 60.36 16.444 60.309 16.743 60.308 cv
17.266 60.306 17.526 60.321 18.063 60.333 cv
18.35 60.141 18.69 59.96 18.984 59.96 cv
19.307 59.96 li
20.5 60.148 li
20.924 60.134 li
21.004 60.134 21.467 60.073 21.553 60.038 cv
21.606 60.015 22.131 59.762 22.132 59.732 cv
22.192 59.707 li
cp
21.074 72.524 mo
21.029 72.569 21.118 72.48 21.074 72.524 cv
cp
25.553 70.833 mo
25.509 70.877 25.597 70.788 25.553 70.833 cv
cp
25.055 66.155 mo
25.011 66.199 25.1 66.111 25.055 66.155 cv
cp
27.224 65.355 mo
27.249 65.338 li
27.216 65.314 li
27.2 65.33 li
27.224 65.355 li
cp
28.365 63.394 mo
28.321 63.438 28.409 63.349 28.365 63.394 cv
cp
29.236 61.379 mo
29.191 61.423 29.28 61.334 29.236 61.379 cv
cp
20.377 65.06 mo
20.333 65.105 20.421 65.016 20.377 65.06 cv
cp
19.979 64.961 mo
19.935 65.005 20.023 64.917 19.979 64.961 cv
cp
18.486 60.084 mo
18.442 60.129 18.53 60.04 18.486 60.084 cv
cp
18.287 60.184 mo
18.243 60.229 18.331 60.14 18.287 60.184 cv
cp
16.072 63.145 mo
16.028 63.189 16.116 63.101 16.072 63.145 cv
cp
17.391 61.08 mo
17.347 61.124 17.435 61.036 17.391 61.08 cv
cp
21.796 35.23 mo
21.796 35.226 21.771 35.18 21.771 35.18 cv
22.841 35.201 li
22.917 35.22 li
22.958 35.321 22.915 35.169 22.915 35.304 cv
22.915 35.36 22.997 36.128 23.005 36.163 cv
23.036 36.287 23.283 36.257 23.374 36.267 cv
23.588 36.29 23.689 36.324 23.811 36.324 cv
23.886 36.324 li
24.252 35.361 li
25.326 35.64 li
25.145 36.721 li
25.229 36.722 li
25.42 36.722 25.889 37.021 25.951 37.021 cv
26.036 37.021 26.474 36.175 26.598 36.175 cv
26.607 36.175 27.447 36.674 27.519 36.722 cv
27.095 37.668 li
27.215 37.729 li
27.193 37.766 li
27.216 37.743 li
27.757 38.199 li
28.629 37.555 li
28.746 37.685 li
28.943 37.886 li
29.392 38.332 li
28.711 39.184 li
28.736 39.168 li
29.261 39.838 li
29.236 39.857 li
30.225 39.397 li
30.78 40.379 li
30.691 40.403 29.933 40.955 29.933 41.002 cv
29.933 41.062 30.209 41.537 30.231 41.798 cv
31.299 41.587 li
31.322 41.643 31.575 42.667 31.575 42.669 cv
31.575 42.698 30.648 43.043 30.604 43.067 cv
30.642 43.513 li
30.689 43.936 li
31.003 43.956 li
31.774 44.04 li
31.748 44.186 li
31.757 44.45 31.75 44.719 31.752 44.983 cv
31.747 45.157 li
31.677 45.127 31.098 45.203 30.972 45.217 cv
30.677 45.248 30.654 45.179 30.641 45.65 cv
30.628 46.123 30.423 46.021 30.925 46.231 cv
30.976 46.253 31.478 46.465 31.599 46.475 cv
31.273 47.569 li
30.257 47.365 li
30.177 47.535 30.19 47.625 30.128 47.765 cv
30.085 47.86 29.94 48.126 29.933 48.217 cv
30.122 48.329 li
30.161 48.337 li
30.128 48.362 li
30.542 48.634 li
30.528 48.663 li
30.771 48.801 li
30.224 49.755 li
30.021 49.742 29.375 49.336 29.261 49.336 cv
29.133 49.336 29.018 49.815 28.838 49.834 cv
28.861 49.854 li
28.723 50.017 li
29.371 50.816 li
29.403 50.822 li
28.596 51.632 li
27.793 50.953 li
27.364 51.295 li
27.349 51.331 li
27.314 51.314 27.096 51.423 27.096 51.526 cv
27.096 51.53 27.414 52.199 27.457 52.329 cv
27.548 52.599 28.005 52.758 28.141 52.894 cv
28.17 52.915 li
28.137 52.94 li
28.223 52.953 28.916 53.464 29.099 53.554 cv
29.463 53.732 29.741 53.959 30.131 53.989 cv
30.231 53.986 li
30.331 53.986 li
30.438 53.997 30.865 53.835 30.983 53.745 cv
31.076 53.675 31.46 53.35 31.55 53.342 cv
31.523 53.294 li
31.541 53.314 li
31.937 53.028 li
31.921 52.995 li
31.938 53.014 li
32.299 52.748 li
32.297 54.039 li
33.441 54.039 li
33.428 56.751 li
33.286 56.929 32.565 57.172 32.402 57.21 cv
32.074 57.287 31.684 57.36 31.307 57.36 cv
30.628 57.36 29.957 57.217 29.198 56.838 cv
28.428 56.453 27.814 55.979 27.175 55.627 cv
26.457 55.232 25.581 54.885 24.956 54.885 cv
24.881 54.885 li
24.369 54.885 23.625 55.171 23.249 55.692 cv
23.046 55.973 22.938 56.138 22.749 56.46 cv
22.547 56.804 22.533 56.978 22.368 57.323 cv
22.324 57.291 22.101 56.682 21.992 56.506 cv
21.804 56.204 21.705 55.975 21.489 55.715 cv
21.034 55.168 20.429 54.885 19.829 54.885 cv
19.755 54.885 li
19.275 54.885 18.711 55.087 18.266 55.26 cv
18.073 55.336 17.707 55.532 17.503 55.643 cv
17.269 55.771 17.02 55.963 16.789 56.075 cv
16.572 56.18 16.312 56.389 16.093 56.523 cv
15.828 56.687 15.637 56.777 15.346 56.92 cv
14.939 57.119 14.273 57.323 13.907 57.323 cv
13.65 57.323 13.457 57.366 13.28 57.361 cv
13.069 57.355 12.739 57.317 12.569 57.27 cv
12.308 57.198 12.147 57.181 11.912 57.079 cv
11.736 57.003 11.532 56.889 11.294 56.776 cv
11.29 54.039 li
12.414 54.039 li
12.414 53.442 li
12.423 53.267 li
12.421 53.068 li
12.421 52.869 li
12.429 52.771 li
12.435 52.741 li
12.576 52.862 li
12.561 52.893 li
12.952 53.155 li
12.991 53.164 li
12.957 53.189 li
13.158 53.209 13.772 53.942 14.405 53.989 cv
14.505 53.986 li
14.604 53.986 li
14.989 54.018 16.445 53.069 16.694 52.82 cv
16.715 52.791 li
17.054 52.577 li
17.04 52.547 li
17.194 52.474 li
17.153 52.388 17.235 52.256 17.26 52.204 cv
17.3 52.118 17.338 51.995 17.365 51.942 cv
17.44 51.798 17.515 51.564 17.59 51.451 cv
17.447 51.383 17.016 51.112 16.968 50.979 cv
16.843 50.979 li
16.107 51.607 li
16.116 51.631 li
15.331 50.848 li
15.964 50.051 li
15.456 49.357 li
14.482 49.766 li
14.437 49.678 13.957 48.852 13.957 48.839 cv
13.957 48.781 14.351 48.472 14.43 48.466 cv
14.403 48.417 li
14.774 48.162 li
14.434 47.394 li
13.533 47.537 li
13.41 47.545 li
13.122 46.497 li
13.132 46.471 li
14.108 46.107 li
14.003 45.257 li
13.683 45.206 li
12.934 45.156 li
12.974 45.057 12.954 45.16 12.962 45.057 cv
12.959 44.957 li
12.959 44.692 12.959 44.427 12.959 44.161 cv
12.959 44.062 li
12.962 44.058 12.937 44.013 12.937 44.012 cv
14.01 43.921 li
14.005 43.888 li
14.088 43.065 li
13.105 42.683 li
13.389 41.65 li
13.484 41.649 li
14.43 41.797 li
14.77 40.973 li
14.668 40.903 14.435 40.737 14.335 40.649 cv
14.222 40.55 13.923 40.423 13.972 40.312 cv
14.023 40.195 14.185 39.932 14.229 39.852 cv
14.306 39.71 14.428 39.503 14.48 39.409 cv
15.43 39.847 li
15.48 39.776 15.973 39.127 15.973 39.111 cv
15.973 39.088 15.376 38.414 15.326 38.34 cv
16.104 37.575 li
16.484 37.88 li
16.524 37.888 li
16.491 37.913 li
16.915 38.219 li
17.002 38.09 17.59 37.71 17.59 37.643 cv
17.59 37.576 17.191 36.787 17.202 36.741 cv
17.226 36.643 17.954 36.281 18.113 36.175 cv
18.23 36.351 18.535 36.746 18.678 36.903 cv
18.821 37.059 18.887 36.962 19.095 36.859 cv
19.24 36.787 19.444 36.721 19.531 36.673 cv
19.371 35.655 li
20.451 35.351 li
20.848 36.35 li
20.983 36.286 21.178 36.266 21.303 36.263 cv
21.47 36.258 21.701 36.286 21.706 36.131 cv
21.718 35.774 21.796 35.498 21.796 35.23 cv
cp
30.231 57.199 mo
30.187 57.243 30.275 57.154 30.231 57.199 cv
cp
30.629 53.914 mo
30.585 53.959 30.673 53.87 30.629 53.914 cv
cp
28.539 51.526 mo
28.495 51.57 28.583 51.482 28.539 51.526 cv
cp
29.335 49.336 mo
29.291 49.381 29.38 49.292 29.335 49.336 cv
cp
30.231 47.346 mo
30.187 47.39 30.275 47.302 30.231 47.346 cv
cp
30.828 41.673 mo
30.784 41.718 30.873 41.629 30.828 41.673 cv
cp
30.032 39.484 mo
29.988 39.529 30.076 39.44 30.032 39.484 cv
cp
27.245 37.792 mo
27.201 37.837 27.289 37.748 27.245 37.792 cv
cp
19.481 36.698 mo
19.437 36.742 19.526 36.654 19.481 36.698 cv
cp
18.784 36.996 mo
18.74 37.041 18.829 36.952 18.784 36.996 cv
cp
17.291 37.892 mo
17.247 37.936 17.336 37.848 17.291 37.892 cv
cp
15.699 39.484 mo
15.655 39.529 15.743 39.44 15.699 39.484 cv
cp
16.396 51.327 mo
16.351 51.371 16.44 51.283 16.396 51.327 cv
cp
15.998 53.317 mo
15.953 53.361 16.042 53.273 15.998 53.317 cv
cp
15.5 53.616 mo
15.456 53.66 15.544 53.572 15.5 53.616 cv
cp
14.903 53.914 mo
14.858 53.959 14.947 53.87 14.903 53.914 cv
cp
8.45801 28.189 mo
8.60699 28.177 8.75699 28.175 9.005 28.112 cv
9.10699 28.086 9.173 28.061 9.29199 28.002 cv
9.34601 27.975 9.392 27.96 9.435 27.922 cv
9.44998 27.909 9.47101 27.888 9.48401 27.872 cv
9.491 27.865 9.50299 27.851 9.508 27.845 cv
9.51199 27.84 9.51898 27.807 9.52798 27.816 cv
9.55701 27.836 li
9.41199 28.042 9.33398 28.218 9.186 28.444 cv
9.02701 28.69 8.948 28.808 8.77899 29.007 cv
8.466 29.377 8.04599 29.679 7.83899 30.059 cv
7.53799 30.614 7.44901 30.741 7.31799 31.329 cv
7.21899 31.774 7.55399 32.244 8.05899 32.244 cv
7.96799 32.107 7.875 31.905 7.80099 31.681 cv
7.71399 31.417 7.71399 31.38 7.836 31.199 cv
7.98199 31.211 8.32999 31.295 8.43298 31.398 cv
8.46201 31.419 li
8.42899 31.444 li
8.46799 31.451 8.86398 31.624 8.892 31.635 cv
9.02798 31.694 9.18698 31.683 9.27298 31.684 cv
9.66998 31.69 9.923 31.359 10.05 31.348 cv
10.024 31.282 10.318 30.962 10.346 30.895 cv
10.447 30.658 10.523 30.642 10.523 30.378 cv
10.523 30.303 li
10.523 29.884 11.692 29.867 12.042 29.856 cv
12.283 29.848 12.635 29.809 12.872 29.766 cv
13.082 29.729 13.536 29.657 13.758 29.657 cv
13.825 29.612 14.786 29.444 15.031 29.338 cv
15.209 29.261 15.439 29.209 15.662 29.097 cv
15.764 29.046 16.274 28.765 16.321 28.761 cv
16.309 28.732 li
16.369 28.707 li
16.353 28.924 15.895 30.954 15.699 31.025 cv
15.545 31.097 14.755 30.82 14.678 30.925 cv
14.793 30.981 15.599 31.283 15.599 31.373 cv
15.599 31.398 15.218 32.133 15.176 32.213 cv
15.084 32.386 14.809 32.844 14.654 32.99 cv
14.487 32.911 14.321 32.818 14.211 32.762 cv
14.105 32.708 13.829 32.494 13.758 32.592 cv
14.413 33.207 li
14.429 33.314 li
14.157 33.497 13.969 33.795 13.622 33.999 cv
13.458 34.095 13.3 34.204 13.133 34.281 cv
13.029 34.329 12.683 34.458 12.638 34.458 cv
12.567 34.458 12.036 33.258 11.917 33.215 cv
11.951 33.286 12.114 33.941 12.131 34.032 cv
12.159 34.19 12.19 34.207 12.225 34.388 cv
12.26 34.564 12.277 34.583 12.016 34.583 cv
11.824 34.583 11.319 34.625 11.096 34.533 cv
11.132 34.635 11.544 35.083 11.64 35.236 cv
11.697 35.326 11.854 35.535 11.898 35.596 cv
12.009 35.751 12.041 35.821 12.138 35.981 cv
12.217 36.11 12.424 36.515 12.474 36.726 cv
12.504 36.855 12.67 37.486 12.638 37.519 cv
12.617 37.548 li
12.562 37.467 12.428 37.211 12.369 37.105 cv
12.284 36.954 12.131 36.8 12.01 36.679 cv
11.774 36.443 11.418 36.183 11.021 36.15 cv
11.259 36.742 li
11.041 36.611 9.79099 36.087 9.60199 36.349 cv
9.492 36.55 9.40698 36.952 9.37799 37.195 cv
9.35098 37.518 li
9.353 37.643 li
9.45099 38.539 li
9.58701 38.629 9.63501 38.616 9.823 38.666 cv
9.918 38.691 10.088 38.763 10.206 38.802 cv
10.317 38.839 10.804 39.034 10.921 39.136 cv
10.174 39.062 li
9.578 39.005 li
9.254 38.994 li
8.83099 38.987 li
8.48199 39.005 li
8.05399 39.026 7.64099 39.173 7.21298 39.459 cv
7.26999 38.774 8.54401 38.418 9.03 38.315 cv
9.04099 37.804 8.91199 37.27 8.62601 36.878 cv
8.37698 36.538 7.897 36.058 7.5 35.864 cv
7.16299 35.7 6.543 35.083 6.36499 34.763 cv
6.11798 34.318 5.98199 33.962 5.94501 33.463 cv
5.94699 33.363 li
5.94699 33.165 li
5.901 32.584 6.46399 31.746 6.70801 31.192 cv
6.88699 30.783 6.97299 30.57 7.095 30.163 cv
7.23199 29.708 7.039 29.433 6.56601 29.433 cv
6.19299 29.433 li
6.14398 29.433 5.98999 29.448 5.96698 29.454 cv
5.879 29.478 5.73999 29.517 5.71399 29.486 cv
5.564 29.305 5.884 29.017 5.496 28.985 cv
5.561 29.108 5.57098 29.192 5.57098 29.308 cv
5.57098 29.467 5.552 29.536 5.513 29.819 cv
5.48801 30.004 5.41199 30.124 5.397 30.303 cv
5.62601 30.457 5.62201 30.583 5.51999 30.77 cv
5.49399 30.819 5.33499 31.187 5.32199 31.199 cv
5.302 31.228 li
5.138 30.989 li
5.09799 31.303 4.62799 31.286 4.47598 31.348 cv
4.47598 30.971 4.289 31.03 4.526 30.677 cv
4.40201 30.677 li
4.25299 30.526 li
4.51898 30.381 4.51001 30.055 4.75 30.055 cv
4.759 30.055 5.06601 30.14 5.14798 30.179 cv
5.17398 30.186 li
5.35001 29.458 li
4.97299 29.278 5.37 29.06 4.64999 29.06 cv
4.63501 29.06 4.569 29.085 4.526 29.085 cv
4.38199 29.085 4.01199 29.166 3.953 29.383 cv
3.853 29.349 3.82599 29.013 3.883 28.864 cv
3.94598 28.699 4.108 28.532 4.32098 28.476 cv
4.76401 28.36 5.099 28.313 5.397 28.313 cv
5.47101 28.313 li
6.14301 28.363 li
6.883 27.868 7.117 28.089 7.935 28.164 cv
8.258 28.198 li
8.358 28.192 li
8.45801 28.189 li
cp
10.623 38.987 mo
10.578 39.031 10.667 38.942 10.623 38.987 cv
cp
13.708 32.518 mo
13.708 32.543 li
13.783 32.518 li
13.708 32.518 li
cp
14.903 31.025 mo
14.858 31.069 14.947 30.981 14.903 31.025 cv
cp
14.604 30.884 mo
14.678 30.884 li
14.604 30.884 li
cp
14.703 29.433 mo
14.659 29.477 14.748 29.388 14.703 29.433 cv
cp
13.808 29.632 mo
13.763 29.676 13.852 29.587 13.808 29.632 cv
cp
9.97598 31.373 mo
9.931 31.418 10.02 31.329 9.97598 31.373 cv
cp
8.83099 31.622 mo
8.78699 31.667 8.875 31.578 8.83099 31.622 cv
cp
7.836 32.219 mo
7.79099 32.263 7.88 32.175 7.836 32.219 cv
cp
5.048 28.338 mo
5.005 28.382 5.09299 28.294 5.048 28.338 cv
cp
7.43799 35.802 mo
7.39301 35.846 7.48099 35.758 7.43799 35.802 cv
cp
7.73599 38.787 mo
7.69199 38.832 7.78 38.743 7.73599 38.787 cv
cp
34.578 27.851 mo
34.526 27.955 34.301 28.295 34.276 28.357 cv
34.205 28.532 34.091 28.629 33.99 28.784 cv
33.783 29.106 33.553 29.295 33.254 29.594 cv
32.761 30.088 32.346 30.944 32.346 31.498 cv
32.346 31.669 32.401 31.886 32.545 32.021 cv
32.653 32.121 32.965 32.293 33.068 32.244 cv
33.099 32.173 32.479 31.199 32.969 31.199 cv
33.15 31.199 33.593 31.515 33.927 31.635 cv
34.148 31.714 34.628 31.705 34.81 31.523 cv
34.83 31.493 li
34.892 31.523 35.294 31.137 35.258 31.05 cv
35.332 31.05 li
35.312 31.001 35.464 30.726 35.481 30.695 cv
35.601 30.471 35.556 30.544 35.556 30.328 cv
35.556 29.974 36.183 29.92 36.353 29.905 cv
36.726 29.884 li
37.373 29.827 li
38.919 29.634 li
38.916 29.607 li
39.381 29.607 40.906 29.11 41.18 28.836 cv
41.201 28.806 li
41.43 28.688 li
41.374 28.924 41.334 29.089 41.296 29.322 cv
41.276 29.437 41.151 29.806 41.144 29.937 cv
41.143 29.945 41.006 30.406 40.97 30.491 cv
40.918 30.613 40.836 30.987 40.732 31.025 cv
39.79 30.903 li
39.781 30.939 li
40.661 31.341 li
40.562 31.491 40.517 31.629 40.433 31.797 cv
40.349 31.964 40.306 32.034 40.208 32.214 cv
40.107 32.399 39.754 32.897 39.712 33.015 cv
38.824 32.529 li
39.507 33.246 li
39.333 33.509 38.951 33.751 38.766 33.936 cv
38.746 33.965 li
38.706 33.945 38.3 34.227 38.238 34.249 cv
38.031 34.32 37.865 34.44 37.647 34.458 cv
36.991 33.206 li
36.95 33.268 37.217 34.177 37.259 34.388 cv
37.287 34.533 37.333 34.563 37.117 34.571 cv
37.037 34.574 36.953 34.595 36.869 34.595 cv
36.726 34.595 36.568 34.608 36.403 34.583 cv
36.18 34.547 li
36.153 34.579 li
36.473 34.963 li
36.452 34.981 li
36.527 34.981 li
36.504 35.035 36.877 35.475 36.925 35.553 cv
37.035 35.733 37.187 35.959 37.27 36.154 cv
37.367 36.38 37.483 36.591 37.55 36.844 cv
37.576 36.941 37.69 37.5 37.672 37.519 cv
37.651 37.548 li
37.579 37.443 37.495 37.212 37.381 37.063 cv
37.258 36.903 37.146 36.782 37.006 36.641 cv
36.773 36.408 36.398 36.179 36.054 36.15 cv
36.293 36.741 li
36.142 36.656 35.758 36.495 35.637 36.455 cv
35.417 36.383 35.252 36.324 35.009 36.3 cv
34.909 36.291 34.68 36.284 34.646 36.334 cv
34.609 36.389 34.524 36.616 34.522 36.629 cv
34.501 36.787 34.412 37.046 34.412 37.245 cv
34.41 37.942 li
34.412 38.003 34.467 38.52 34.561 38.589 cv
34.613 38.617 34.836 38.654 34.915 38.677 cv
35.02 38.707 35.116 38.748 35.268 38.802 cv
35.451 38.869 35.831 39.033 35.979 39.136 cv
35.258 39.061 li
34.562 39.002 li
34.287 38.993 li
33.864 38.987 li
33.566 39.006 li
33.085 39.034 32.712 39.148 32.247 39.459 cv
32.261 39.288 32.428 38.93 32.645 38.912 cv
32.618 38.863 li
32.71 38.855 33.177 38.56 33.38 38.506 cv
33.63 38.44 33.816 38.367 34.063 38.315 cv
34.063 38.215 li
34.072 37.991 li
34.063 37.329 33.663 36.855 33.188 36.354 cv
32.899 36.048 32.685 35.976 32.365 35.734 cv
32.213 35.62 32.099 35.549 31.955 35.422 cv
31.848 35.327 31.724 35.114 31.625 35.105 cv
31.654 35.035 31.454 34.828 31.4 34.733 cv
31.316 34.587 31.275 34.487 31.219 34.39 cv
31.075 34.142 31.046 33.865 30.995 33.624 cv
30.98 33.553 30.978 33.077 31.008 32.946 cv
31.092 32.565 31.137 32.446 31.291 32.084 cv
31.33 31.992 31.457 31.757 31.497 31.692 cv
31.568 31.58 31.597 31.484 31.657 31.379 cv
31.753 31.215 31.901 30.862 31.984 30.633 cv
32.191 30.059 32.391 29.433 31.599 29.433 cv
31.226 29.433 li
30.757 29.502 li
30.729 29.383 li
30.729 29.308 li
30.729 29.23 30.759 28.985 30.604 28.985 cv
30.601 28.985 30.555 29.009 30.554 29.01 cv
30.586 29.056 30.604 29.092 30.604 29.159 cv
30.604 29.333 li
30.598 29.458 li
30.604 29.587 30.531 30.044 30.43 30.254 cv
30.5 30.358 30.629 30.426 30.629 30.577 cv
30.629 30.602 li
30.629 30.724 30.368 31.075 30.356 31.224 cv
30.236 31.036 li
30.131 31.025 li
30.048 31.219 li
29.508 31.342 li
29.54 31.225 li
29.396 31.017 29.428 30.873 29.559 30.677 cv
29.365 30.614 li
29.331 30.606 li
29.35 30.59 li
29.293 30.521 li
29.497 30.411 29.6 30.055 29.733 30.055 cv
29.808 30.055 li
29.828 30.055 30.132 30.155 30.181 30.179 cv
30.345 29.935 30.291 29.643 30.38 29.458 cv
29.938 29.162 30.481 29.085 29.609 29.085 cv
29.343 29.085 29.159 29.156 28.962 29.383 cv
28.932 29.269 28.897 29.262 28.888 29.134 cv
28.89 29.035 li
28.849 28.526 29.674 28.359 30.007 28.338 cv
30.43 28.316 li
30.505 28.313 li
31.202 28.361 li
31.317 28.19 31.747 28.059 31.973 28.064 cv
32.172 28.057 li
33.015 28.186 li
33.109 28.178 33.132 28.197 33.242 28.189 cv
33.342 28.192 li
33.441 28.192 li
33.715 28.164 li
33.939 28.134 34.293 28.059 34.412 27.94 cv
34.443 27.928 li
34.578 27.851 li
cp
36.129 34.533 mo
36.084 34.578 36.173 34.489 36.129 34.533 cv
cp
36.95 33.165 mo
36.905 33.209 36.994 33.121 36.95 33.165 cv
cp
39.09 33.613 mo
39.046 33.657 39.134 33.568 39.09 33.613 cv
cp
38.796 32.538 mo
38.82 32.522 li
38.761 32.473 li
38.746 32.488 li
38.796 32.538 li
cp
39.785 30.931 mo
39.791 30.906 li
39.686 30.905 li
39.785 30.931 li
cp
37.298 29.831 mo
37.254 29.875 37.342 29.786 37.298 29.831 cv
cp
34.611 31.622 mo
34.567 31.667 34.655 31.578 34.611 31.622 cv
cp
30.828 28.338 mo
30.784 28.382 30.873 28.294 30.828 28.338 cv
cp
80.283 66.166 mo
80.561 66.229 80.561 66.229 80.561 66.308 cv
80.216 66.469 79.916 66.853 80.194 67.25 cv
80.048 67.267 79.936 67.295 79.829 67.344 cv
79.762 67.513 79.731 67.681 79.709 67.845 cv
79.307 67.922 78.883 68.532 78.605 68.855 cv
78.298 68.963 77.992 69.097 77.685 69.231 cv
77.609 68.342 77.571 67.893 77.626 67.06 cv
77.499 67.06 li
77.451 66.506 77.397 66.371 76.899 66.308 cv
76.899 66.116 li
76.211 66.13 75.489 66.345 74.761 66.545 cv
74.086 66.77 73.395 67.001 72.733 67.078 cv
72.848 66.72 72.93 66.607 72.93 66.246 cv
73.239 66.17 73.903 64.352 74.048 64.025 cv
74.105 63.992 74.164 63.992 74.192 63.992 cv
74.472 63.224 74.654 62.453 74.835 61.648 cv
75.095 60.543 75.307 59.459 75.742 58.417 cv
76.967 57.771 79.606 57.725 80.357 59.319 cv
80.689 59.488 80.88 61.049 80.934 61.543 cv
80.871 61.572 80.852 61.601 80.825 61.658 cv
80.88 63.263 80.779 64.506 80.283 66.166 cv
cp
74.712 69.959 mo
74.347 70.044 73.9 70.146 73.348 70.247 cv
73.213 70.19 73.04 70.16 72.904 70.102 cv
73.716 69.785 74.214 69.541 74.715 69.437 cv
75.221 69.332 75.747 69.345 76.542 69.524 cv
76.352 69.627 76.317 69.627 74.712 69.959 cv
cp
72.442 52.321 mo
72.184 53.155 72.417 54.151 72.299 55.123 cv
71.622 55.609 70.871 56.098 70.077 56.529 cv
69.321 56.937 68.583 57.285 67.847 57.547 cv
67.77 57.184 67.77 57.184 67.855 55.329 cv
67.515 53.914 67.251 53.268 67.201 52.853 cv
68.154 52.403 69.129 51.994 70.148 51.762 cv
71.101 51.524 72.072 51.428 73.122 51.528 cv
72.792 52.048 72.792 52.048 72.442 52.321 cv
cp
70.869 63.758 mo
70.572 64.774 70.388 65.826 69.928 66.652 cv
69.533 67.279 69.001 67.744 68.113 67.876 cv
68.115 67.676 68.154 67.483 68.156 67.291 cv
68.263 67.291 li
68.276 66.537 68.284 65.793 68.294 65.049 cv
68.268 65.049 68.212 65.046 68.189 65.046 cv
68.115 63.874 67.809 62.125 68.46 61.141 cv
68.823 60.924 69.267 60.734 69.446 60.345 cv
69.637 60.295 69.839 60.212 70.026 60.161 cv
70.419 60.006 70.837 59.81 71.256 59.713 cv
71.256 59.568 li
71.561 59.574 71.563 59.322 71.954 59.467 cv
71.74 60.853 71.433 62.345 70.869 63.758 cv
cp
63.51 60.174 mo
63.51 60.343 li
63.125 60.422 62.864 60.913 62.476 61.054 cv
62.366 61.132 62.277 61.21 62.198 61.324 cv
61.042 62.551 59.994 63.818 58.92 65.125 cv
58.944 63.603 59.564 61.976 59.659 60.45 cv
59.774 60.013 59.914 59.596 60.037 59.179 cv
60.318 58.663 61.344 57.18 62.269 56.078 cv
62.862 55.404 63.42 54.877 63.735 54.852 cv
63.991 55.771 65.134 59.697 63.51 60.174 cv
cp
64.256 68.59 mo
63.526 68.769 62.802 68.98 62.083 69.194 cv
61.768 69.276 61.436 69.376 61.096 69.453 cv
61.094 69.508 61.091 69.57 61.091 69.652 cv
60.601 69.785 60.486 69.865 59.876 69.99 cv
59.932 69.769 59.96 69.525 60.027 69.304 cv
60.468 69.17 61.352 67.408 62.124 66.34 cv
62.402 65.984 62.655 65.68 62.879 65.574 cv
63.086 65.11 63.242 65.025 63.306 64.89 cv
63.36 64.89 63.393 64.89 63.439 64.864 cv
63.502 64.499 63.699 64.42 63.978 64.175 cv
64.029 65.312 64.084 66.478 64.151 67.615 cv
64.233 67.788 64.363 68.312 64.256 68.59 cv
cp
84.602 61.264 mo
84.392 60.07 83.915 58.838 83.821 57.732 cv
83.767 57.7 83.703 57.7 83.66 57.674 cv
83.547 57.414 83.435 57.147 83.335 56.866 cv
83.279 56.866 83.217 56.865 83.164 56.865 cv
83.164 56.808 83.167 56.75 83.169 56.691 cv
82.868 56.529 82.868 56.529 82.786 56.298 cv
82.699 56.273 82.586 56.243 82.5 56.218 cv
80.932 54.391 78.099 54.455 75.933 54.533 cv
75.55 54.258 75.387 54.001 75.397 53.561 cv
75.348 53.53 75.288 53.503 75.231 53.503 cv
75.149 53.276 75.07 53.053 74.962 52.831 cv
74.932 52.715 74.886 52.603 74.83 52.524 cv
74.442 52.434 74.143 51.794 74.099 51.515 cv
74.398 51.495 74.7 51.443 74.981 51.413 cv
76.045 51.349 77.093 51.309 78.202 51.515 cv
78.893 51.504 79.585 51.483 80.283 51.467 cv
80.368 51.355 80.368 51.355 81.092 51.092 cv
81.46 50.401 81.45 49.484 81.463 48.737 cv
80.73 46.95 78.812 47.844 77.386 47.929 cv
76.833 47.973 76.278 48.027 75.696 48.099 cv
75.473 48.095 75.259 48.116 75.032 48.116 cv
73.67 48.238 72.337 48.468 70.951 48.495 cv
70.787 48.554 70.503 48.607 70.194 48.657 cv
68.506 48.939 65.37 49.193 65.084 49.491 cv
64.31 49.564 64.136 49.674 63.666 49.665 cv
63.393 49.798 62.91 49.932 62.364 50.014 cv
60.747 50.261 58.466 50.337 58.054 50.803 cv
58.119 52.031 57.804 52.661 59.038 53.262 cv
60.152 53.276 61.209 53.073 62.323 53.006 cv
62.683 52.951 63.066 52.956 63.423 52.965 cv
63.375 53.073 63.375 53.073 62.584 53.563 cv
62.557 53.702 62.445 53.839 62.304 53.944 cv
61.932 54.3 61.268 54.624 61.091 55.01 cv
60.596 55.366 58.865 57.717 58.721 57.717 cv
58.41 58.514 58.274 58.575 58.04 59.152 cv
57.736 60.62 56.234 64.948 56.634 65.896 cv
56.568 66.726 55.896 70.821 56.272 71.328 cv
55.943 71.767 56.568 73.853 56.813 74.497 cv
57.792 75.537 58.029 74.958 58.946 74.866 cv
59.031 74.692 59.112 74.53 59.199 74.367 cv
59.23 74.367 59.281 74.339 59.339 74.339 cv
59.37 74.064 59.39 73.788 59.442 73.532 cv
59.521 73.532 59.572 73.532 59.633 73.536 cv
59.659 73.257 59.717 73.018 59.751 72.737 cv
60.558 72.661 61.301 72.318 62.037 72.019 cv
62.59 71.806 63.117 71.623 63.705 71.603 cv
64.875 71.146 66.677 71.23 68.01 71.146 cv
68.13 70.836 68.96 70.599 69.877 70.396 cv
70.881 70.19 71.993 70.06 72.406 70.097 cv
72.434 70.262 72.458 70.433 72.483 70.625 cv
72.84 70.707 73.201 70.804 73.586 70.918 cv
73.586 70.994 73.612 71.059 73.612 71.135 cv
73.666 71.165 73.719 71.165 73.78 71.197 cv
73.773 71.414 73.795 71.642 73.821 71.87 cv
74.176 71.979 74.176 71.979 74.319 72.092 cv
74.424 72.092 74.572 72.095 74.679 72.095 cv
75.402 72.109 76.125 72.119 76.871 72.132 cv
76.981 72.159 77.06 72.221 77.167 72.241 cv
77.167 72.416 li
77.335 72.444 77.519 72.444 77.698 72.474 cv
79.187 73.052 81.532 73.505 82.232 71.459 cv
82.28 71.464 82.344 71.464 82.36 71.464 cv
82.423 71.189 82.827 70.638 83.598 69.068 cv
83.892 68.296 84.093 67.081 84.3 66.474 cv
84.607 66.142 84.528 66.002 84.538 65.615 cv
84.556 64.145 84.579 62.706 84.602 61.264 cv
cp
94.016 54.413 mo
94.014 54.528 94.014 54.669 94.006 54.804 cv
94.456 54.891 94.925 54.99 95.368 55.103 cv
97.221 55.075 97.221 55.075 98.723 54.902 cv
98.723 54.76 li
98.859 54.849 98.859 54.849 99.661 54.889 cv
99.697 54.836 99.727 54.775 99.752 54.723 cv
100.031 54.646 100.309 54.588 100.593 54.512 cv
100.593 54.461 100.598 54.405 100.616 54.374 cv
103.068 54.049 105.285 53.53 107.709 52.782 cv
108.968 52.059 111.381 52.04 112.746 51.944 cv
112.909 51.868 113.075 51.814 113.274 51.755 cv
114.161 51.581 115.323 51.654 115.264 50.288 cv
115.542 50.266 115.542 50.266 116.319 50.421 cv
116.352 49.893 116.39 49.504 116.224 49.088 cv
116.137 49.059 116.03 49.034 115.92 49.001 cv
115.818 48.695 115.818 48.663 115.585 48.61 cv
115.445 47.382 114.717 48.042 114.395 47.399 cv
114.17 47.395 113.81 47.362 113.343 47.382 cv
112.091 47.416 110.252 47.582 110.104 48.055 cv
109.949 48.079 109.747 48.108 109.555 48.126 cv
109.555 48.18 109.555 48.238 109.553 48.27 cv
109.134 48.399 108.546 48.475 108.424 48.893 cv
107.52 49.233 106.595 49.39 105.675 49.657 cv
105.74 49.403 105.798 49.184 105.877 48.962 cv
106.669 48.449 106.161 47.163 105.862 46.548 cv
105.754 46.516 105.67 46.514 105.584 46.492 cv
105.561 46.403 105.561 46.321 105.533 46.241 cv
103.375 46.155 102.989 45.983 102.869 48.335 cv
103.198 48.589 103.218 48.844 103.382 49.309 cv
103.629 49.511 103.903 49.735 104.059 50.122 cv
102.251 50.544 102.251 50.544 102.167 50.629 cv
101.452 50.616 101.12 50.612 100.475 50.82 cv
100.473 50.878 100.473 50.934 100.473 50.965 cv
100.059 50.958 99.865 50.926 99.559 51.114 cv
97.804 51.475 95.97 51.419 94.147 51.393 cv
93.6 52.439 93.094 53.126 93.717 54.329 cv
93.794 54.358 93.899 54.395 94.016 54.413 cv
cp
116.004 54.629 mo
115.394 54.484 115.394 54.484 115.312 54.405 cv
114.972 54.395 114.181 54.358 113.236 54.37 cv
111.601 54.405 109.573 54.624 109.259 55.48 cv
108.667 55.633 108.753 55.686 108.769 56.298 cv
109.157 56.472 109.155 56.771 109.617 56.949 cv
110.682 58.159 111.672 58.363 113.174 58.556 cv
113.468 58.588 113.803 58.616 114.17 58.689 cv
116 58.569 115.669 58.645 116.76 57.338 cv
117.105 57.228 117.376 57.199 117.655 56.935 cv
117.665 56.383 117.542 55.683 116.983 55.504 cv
116.937 55.227 116.937 55.227 116.796 54.976 cv
116.559 54.916 116.308 54.86 116.053 54.795 cv
116.028 54.743 116.028 54.691 116.004 54.629 cv
cp
119.736 70.295 mo
119.677 70.269 119.649 70.233 119.6 70.218 cv
119.715 69.658 119.715 69.658 119.698 69.075 cv
118.793 68.674 119.018 68.043 118.02 68.111 cv
118 68.027 117.971 67.943 117.971 67.89 cv
116.97 67.676 116.398 67.198 115.43 67.015 cv
115.302 66.515 113.916 66.308 113.059 66.205 cv
112.834 66.17 112.641 66.151 112.531 66.145 cv
112.502 66.06 112.502 66.002 112.502 65.947 cv
111.647 65.88 111.573 65.302 110.85 65.258 cv
110.85 65.312 110.85 65.37 110.848 65.449 cv
110.464 65.363 110.383 65.394 110.352 65.03 cv
110.048 64.968 109.918 64.83 109.501 64.769 cv
109.476 64.707 109.451 64.631 109.422 64.574 cv
108.927 64.425 108.459 64.114 108.077 63.91 cv
107.972 62.86 109.032 61.158 109.435 60.275 cv
109.487 60.275 109.54 60.244 109.593 60.244 cv
109.696 59.31 109.683 58.531 109.501 57.668 cv
109.313 57.475 108.546 56.657 108.491 56.549 cv
108.311 56.516 108.13 56.488 107.936 56.451 cv
107.566 56.815 107.318 56.779 106.878 56.824 cv
106.417 57.848 106.289 58.842 106.023 59.974 cv
105.709 60.465 105.576 60.434 105.509 60.992 cv
105.456 60.992 105.372 60.992 105.316 60.988 cv
105.308 61.179 105.308 61.373 105.305 61.539 cv
105.139 61.653 104.971 61.735 104.81 61.814 cv
104.777 61.896 104.746 62.008 104.718 62.113 cv
104.299 62.277 102.342 61.247 102.151 60.891 cv
101.743 60.71 101.551 60.515 100.23 59.86 cv
100.427 59.359 100.598 59.199 100.641 58.645 cv
100.718 58.645 100.828 58.645 100.92 58.648 cv
100.946 58.572 100.946 58.488 100.948 58.373 cv
101.009 58.342 101.03 58.342 101.058 58.314 cv
101.175 58.099 101.175 58.099 101.15 57.353 cv
101.186 57.33 101.234 57.33 101.262 57.293 cv
101.416 56.691 101.538 55.775 100.764 55.762 cv
100.706 55.654 100.652 55.512 100.601 55.398 cv
100.296 55.292 100.296 55.292 99.659 55.301 cv
99.659 55.25 99.659 55.194 99.661 55.167 cv
98.908 55.325 98.655 55.702 98.062 56.091 cv
98.057 56.56 97.694 57.056 97.626 57.662 cv
97.357 57.716 95.58 59.066 95.129 59.373 cv
95.129 59.422 95.125 59.504 95.099 59.564 cv
94.614 59.637 94.07 59.826 93.572 59.9 cv
93.178 60.617 92.898 60.808 92.586 61.688 cv
92.525 61.688 92.466 61.688 92.387 61.685 cv
92.323 62.101 92.003 62.759 92.274 63.207 cv
92.946 63.187 92.713 63.382 93.298 63.582 cv
93.301 63.445 93.301 63.445 93.467 63.39 cv
93.986 62.482 93.953 62.482 95.041 62.39 cv
96.011 61.795 96.963 61.698 97.959 61.353 cv
97.959 61.299 97.967 61.216 97.967 61.162 cv
98.08 61.162 98.19 61.187 98.29 61.191 cv
98.601 61.614 98.754 61.92 98.696 62.58 cv
99.224 62.449 99.224 62.449 99.551 62.511 cv
99.493 62.9 99.74 63.345 100.197 63.49 cv
100.197 63.603 100.195 63.689 100.192 63.797 cv
100.309 63.797 li
100.345 63.887 100.342 63.967 100.342 64.074 cv
100.769 64.39 101.623 65.232 101.661 65.869 cv
101.084 66.115 101.045 66.86 100.312 67.129 cv
100.312 67.183 100.309 67.263 100.309 67.318 cv
99.681 67.562 99.079 68.271 98.443 68.457 cv
98.412 68.541 98.381 68.59 98.353 68.674 cv
98.177 68.703 98.008 68.756 97.876 68.808 cv
97.398 69.658 94.957 69.351 94.718 69.899 cv
94.459 69.923 94.208 69.947 93.953 69.996 cv
93.921 70.057 93.888 70.084 93.871 70.136 cv
93.421 70.129 92.977 70.097 92.533 70.089 cv
92.538 70.036 92.538 69.976 92.538 69.951 cv
92.208 69.862 92.147 69.728 91.794 69.688 cv
91.815 70.052 91.899 69.939 92.016 70.247 cv
91.815 70.269 91.616 70.269 91.429 70.295 cv
91.424 70.66 91.534 70.715 91.603 71.048 cv
91.531 71.044 91.472 71.044 91.418 71.039 cv
91.383 71.262 91.327 71.494 91.286 71.707 cv
91.377 71.732 91.431 71.767 91.518 71.787 cv
92.479 73.948 97.439 72.526 99.207 72.55 cv
99.213 72.489 99.242 72.427 99.242 72.384 cv
99.659 72.213 100.159 72.036 100.527 71.813 cv
100.527 71.732 100.529 71.653 100.529 71.566 cv
100.756 71.485 100.946 71.38 101.139 71.296 cv
101.175 71.242 101.175 71.16 101.201 71.113 cv
102.345 70.847 103.416 69.582 104.253 68.845 cv
104.595 68.849 105.576 69.226 105.658 69.703 cv
105.993 69.765 106.738 70.076 106.782 70.522 cv
106.976 70.525 108.077 71.172 108.127 71.343 cv
108.296 71.4 108.458 71.459 108.651 71.549 cv
108.651 71.66 108.651 71.796 108.649 71.933 cv
108.869 71.966 109.195 72.25 109.588 72.392 cv
109.961 72.785 110.464 73.016 111.067 73.136 cv
111.103 73.221 111.103 73.307 111.119 73.36 cv
111.532 73.646 111.892 73.702 112.475 73.767 cv
112.475 73.821 112.467 73.881 112.467 73.962 cv
112.746 73.994 112.833 73.966 112.947 74.047 cv
113.016 74.108 113.111 74.193 113.218 74.359 cv
113.637 74.367 113.688 74.2 114.071 74.456 cv
114.656 74.351 115.323 74.12 115.961 74.431 cv
116.459 74.213 117.072 74.145 117.246 73.587 cv
117.445 73.48 117.445 73.48 117.744 73.46 cv
117.751 73.433 117.751 73.371 117.751 73.319 cv
117.834 73.289 117.894 73.263 117.971 73.263 cv
118.178 72.796 119.317 70.847 119.672 70.765 cv
119.761 70.625 119.761 70.625 119.736 70.295 cv
cp
146.868 61.551 mo
146.868 61.605 146.899 61.658 146.899 61.742 cv
147.31 61.775 147.917 61.922 148.561 61.959 cv
149.45 62.03 150.367 61.907 150.594 60.992 cv
150.659 60.967 150.684 60.941 150.738 60.941 cv
150.76 60.631 150.798 60.33 150.855 60.05 cv
151.456 59.459 150.64 57.691 151.042 57.31 cv
150.904 57.032 150.512 55.418 150.539 55.234 cv
150.466 55.227 150.37 55.195 150.298 55.194 cv
150.079 54.773 149.851 54.992 149.669 54.633 cv
149.302 54.484 148.97 54.395 148.676 54.338 cv
148.03 54.217 147.471 54.325 146.784 54.76 cv
146.751 54.891 146.751 55.034 146.717 55.176 cv
146.659 55.194 146.61 55.194 146.58 55.219 cv
146.132 56.881 145.739 57.899 144.166 58.842 cv
143.517 59.56 142.12 60.563 141.302 61.054 cv
141.288 60.464 141.096 60.187 141.098 59.996 cv
140.113 59.422 140.355 59.293 140.325 58.152 cv
140.376 58.126 140.429 58.126 140.518 58.099 cv
140.894 57.357 142.472 57.217 143.256 57.058 cv
144.306 56.516 144.344 56.409 144.868 56.254 cv
144.874 56.163 144.874 56.111 144.874 56.053 cv
145.185 55.925 145.402 55.925 145.517 55.566 cv
145.576 55.566 145.631 55.54 145.675 55.54 cv
145.683 55.072 145.581 54.983 145.588 54.791 cv
145.527 54.76 145.501 54.738 145.453 54.738 cv
145.501 54.574 145.565 54.431 145.655 54.271 cv
145.683 54.246 145.737 54.246 145.792 54.213 cv
145.803 53.764 145.704 53.651 145.709 53.378 cv
145.667 53.345 145.612 53.325 145.552 53.325 cv
145.552 53.231 145.525 53.155 145.525 53.102 cv
144.919 52.786 144.518 52.284 143.908 52.206 cv
143.908 52.022 li
143.213 51.844 142.687 51.835 142.053 51.828 cv
142.089 51.524 142.112 51.247 142.173 50.965 cv
143.068 50.649 142.232 49.08 142.015 48.61 cv
141.964 48.61 141.879 48.61 141.827 48.607 cv
141.634 47.776 140.13 47.055 139.343 46.962 cv
139.349 46.906 139.349 46.848 139.349 46.767 cv
137.911 46.827 136.394 46.898 135.076 47.532 cv
134.728 48.139 134.785 48.529 135.076 49.172 cv
135.137 49.172 135.16 49.172 135.216 49.175 cv
135.122 50.059 135.226 50.12 135.329 50.886 cv
135.418 50.926 135.498 50.954 135.579 50.954 cv
135.822 51.569 135.926 51.625 135.985 51.762 cv
136.146 51.828 136.32 51.881 136.508 51.909 cv
136.508 51.994 136.537 52.079 136.537 52.13 cv
136.616 52.162 136.667 52.22 136.751 52.243 cv
136.853 52.835 136.677 53.329 136.667 53.997 cv
136.616 53.997 136.557 54.02 136.506 54.02 cv
136.417 54.241 136.355 54.434 136.274 54.658 cv
135.748 54.73 135.569 55.01 135.153 55.08 cv
135.099 55.194 135.073 55.277 135.042 55.383 cv
134.652 55.211 133.931 55.65 133.648 55.749 cv
132.09 55.955 130.517 56.148 128.987 56.18 cv
128.652 56.451 128.565 56.414 128.473 56.84 cv
127.921 57.001 127.357 57.211 126.836 57.394 cv
125.477 58.738 126.579 59.31 126.892 60.73 cv
127.002 60.755 127.112 60.782 127.191 60.816 cv
127.958 61.871 129.339 61.871 130.56 61.912 cv
130.596 61.863 130.598 61.801 130.624 61.75 cv
130.838 61.785 131.127 61.648 131.51 61.658 cv
132.432 61.14 133.858 60.555 134.91 60.345 cv
134.943 60.264 134.971 60.208 134.971 60.156 cv
135.332 60.098 135.697 60.057 136.056 60.026 cv
136.108 60.418 136.108 60.418 136.241 60.531 cv
136.409 60.535 136.6 60.535 136.785 60.54 cv
136.785 60.842 136.777 61.179 136.774 61.482 cv
135.452 61.551 133.822 61.162 133.852 62.907 cv
133.648 62.907 li
133.648 62.992 133.645 63.103 133.645 63.182 cv
133.319 63.233 132.941 63.758 132.935 64.119 cv
131.692 64.287 131.827 64.154 131.375 65.257 cv
131.257 65.37 130.864 65.498 130.422 65.826 cv
130.419 65.907 130.419 65.993 130.391 66.046 cv
130.026 66.097 129.812 66.035 129.692 66.421 cv
129.023 66.773 128.808 66.528 128.545 67.263 cv
128.233 67.34 127.899 67.425 127.597 67.529 cv
127.597 67.591 127.597 67.641 127.595 67.724 cv
127.485 67.724 127.368 67.748 127.265 67.744 cv
127.232 67.861 127.232 67.972 127.232 68.08 cv
127.143 68.111 127.036 68.13 126.957 68.162 cv
126.435 69.093 126.545 69.513 126.553 70.648 cv
126.606 70.675 126.66 70.712 126.716 70.712 cv
126.711 70.76 126.711 70.847 126.711 70.898 cv
127.24 71.044 127.761 71.306 128.338 71.396 cv
128.338 71.591 li
128.783 71.599 129.232 71.608 129.671 71.611 cv
129.986 71.367 131.063 71.129 131.567 71.084 cv
131.572 70.999 131.572 70.943 131.572 70.89 cv
132.315 70.794 132.984 70.688 133.577 70.114 cv
133.717 70.084 133.832 70.089 133.962 70.067 cv
133.964 70.007 133.964 69.926 133.964 69.873 cv
134.276 69.818 134.581 69.765 134.856 69.714 cv
134.859 69.637 134.859 69.579 134.859 69.524 cv
135.311 69.397 135.357 69.253 135.751 69.146 cv
135.857 69.345 135.857 69.345 135.911 69.733 cv
135.832 69.733 135.745 69.756 135.694 69.785 cv
135.656 70.092 135.656 70.092 135.76 70.374 cv
135.618 70.81 135.329 70.948 135.114 71.36 cv
134.167 71.783 134.2 72.836 135.017 73.46 cv
134.976 74.185 134.777 75.289 135.827 75.471 cv
135.839 76.359 136.253 76.646 137.163 76.849 cv
137.694 76.696 137.694 76.696 137.748 76.581 cv
138.217 76.701 138.685 76.873 139.251 76.548 cv
139.229 76.351 139.231 76.136 139.201 75.938 cv
140.171 75.537 140.059 74.23 139.906 73.429 cv
138.884 71.132 139.21 69.453 139.334 66.988 cv
139.272 66.988 139.218 66.984 139.139 66.984 cv
139.139 66.948 139.142 66.894 139.142 66.843 cv
139.752 66.599 140.072 65.909 140.08 65.327 cv
140.219 65.246 140.355 65.199 140.499 65.113 cv
140.524 65.012 140.551 64.896 140.59 64.785 cv
140.703 64.757 140.784 64.73 140.894 64.707 cv
140.919 64.519 141.011 64.292 141.063 64.097 cv
141.343 63.931 141.481 63.931 141.604 63.631 cv
141.661 63.607 141.711 63.612 141.795 63.58 cv
141.918 62.896 142.202 62.202 143.037 62.094 cv
143.068 62.021 143.098 61.967 143.119 61.878 cv
143.487 61.78 143.8 61.56 143.913 61.17 cv
144.529 60.874 144.868 60.05 145.576 59.726 cv
145.704 60.251 146.176 61.431 146.868 61.551 cv
cp
158.538 46.88 mo
158.443 46.022 157.85 44.686 157.246 44.341 cv
156.084 44.188 155.899 44.1 154.982 44.061 cv
153.33 44.837 154.201 46.071 154.18 47.655 cv
154.502 48.126 154.163 48.79 154.461 49.067 cv
154.451 50.1 154.571 50.872 154.694 51.957 cv
154.666 54.01 154.632 56.064 154.602 58.119 cv
154.571 58.423 154.278 63.349 153.856 63.76 cv
153.838 64.785 153.585 65.502 153.475 66.587 cv
153.396 66.582 153.284 66.582 153.205 66.58 cv
153.023 67.546 151.465 67.744 150.627 68.342 cv
149.872 68.665 149.146 69.093 148.452 69.53 cv
147.609 69.987 146.801 70.449 145.961 70.66 cv
145.928 70.765 145.928 70.881 145.923 70.994 cv
146.793 70.974 147.593 70.9 148.434 70.777 cv
149.238 70.675 150.035 70.522 150.877 70.374 cv
150.904 70.429 150.931 70.451 150.955 70.509 cv
151.649 70.492 151.649 70.492 152.707 70.258 cv
152.727 70.312 152.727 70.368 152.76 70.457 cv
153.143 70.459 153.537 70.466 153.919 70.472 cv
154.556 70.783 154.936 70.987 155.72 71.051 cv
155.72 71.246 li
157.299 71.16 156.964 70.898 157.924 69.644 cv
157.994 68.898 157.912 66.818 157.978 63.874 cv
158.408 63.329 157.58 59.791 157.493 59.099 cv
157.539 57.965 157.557 56.827 157.605 55.72 cv
157.756 54.836 157.412 52.138 157.883 51.67 cv
157.989 50.565 158.063 49.487 158.126 48.374 cv
158.367 47.933 158.563 47.548 158.346 47.079 cv
158.402 46.993 158.456 46.942 158.538 46.88 cv
cp
178.929 65.021 mo
178.95 63.769 178.569 63.182 178.303 62.183 cv
178.27 60.874 177.832 58.982 178.291 57.861 cv
179.274 56.458 182.714 56.451 183.619 55.136 cv
183.739 54.992 183.826 54.832 183.854 54.64 cv
183.759 54.64 183.713 54.64 183.655 54.633 cv
183.657 54.577 183.657 54.545 183.631 54.495 cv
183.503 53.827 183.005 53.847 182.942 53.208 cv
182.656 53.126 182.684 53.063 182.574 52.901 cv
181.917 52.583 181.251 52.293 180.597 51.982 cv
180.071 51.532 179.415 50.965 178.919 50.706 cv
178.927 50.627 178.927 50.573 178.927 50.511 cv
177.566 50.074 177.215 49.715 175.791 50.197 cv
175.42 51.18 175.04 52.259 174.578 53.28 cv
174.289 54.3 174.284 54.717 173.275 55.034 cv
173.463 54.291 172.838 53.199 172.562 52.583 cv
171.819 52.35 170.394 51.774 170.208 52.94 cv
169.431 53.085 169.365 54.005 169.175 54.691 cv
168.622 55.244 168.195 56.01 167.934 56.755 cv
167.926 57.203 167.85 58.531 168.456 58.705 cv
169.62 60.476 171.795 60.087 173.604 59.564 cv
173.65 60.478 173.727 60.56 173.413 61.47 cv
172.981 61.764 172.981 61.764 169.02 63.985 cv
167.671 64.793 166.103 66.192 164.552 66.166 cv
163.912 66.703 163.874 66.739 163.099 66.73 cv
162.65 67.332 162.527 67.571 161.815 67.782 cv
161.695 68.092 161.097 68.996 160.762 69.101 cv
160.78 69.873 160.678 71.458 161.753 71.64 cv
162.029 72.172 162.573 72.4 163.158 72.043 cv
163.377 72.526 163.49 72.558 164.098 72.566 cv
164.258 72.285 164.443 72.011 164.637 71.767 cv
165.967 71.4 167.216 71.248 168.718 71.075 cv
168.718 70.773 li
168.639 70.773 168.578 70.769 168.527 70.769 cv
168.494 70.715 168.465 70.66 168.468 70.599 cv
167.806 70.4 166.917 70.332 166.266 70.21 cv
166.294 70.015 166.328 69.821 166.361 69.6 cv
166.976 69.417 167.117 68.867 167.612 68.703 cv
167.615 68.645 167.615 68.595 167.615 68.541 cv
167.699 68.541 167.811 68.546 167.896 68.546 cv
169.224 67.125 171.474 66.627 172.712 64.896 cv
172.797 64.871 172.891 64.851 172.94 64.854 cv
172.94 64.656 li
173.336 64.407 173.757 64.163 174.148 63.924 cv
174.57 65.734 175.037 67.374 175.065 69.316 cv
174.983 69.316 174.927 69.31 174.874 69.31 cv
174.871 69.429 174.869 69.532 174.869 69.679 cv
174.782 69.679 174.728 69.677 174.677 69.677 cv
174.355 70.194 173.882 70.153 173.326 70.316 cv
173.308 70.396 173.275 70.509 173.272 70.615 cv
172.549 71.014 171.752 70.675 171.27 70.977 cv
171.906 71.428 174.376 71.246 174.636 72.213 cv
175.384 72.367 176.041 72.986 176.983 73.198 cv
177.501 73.181 178.641 73.198 178.874 72.474 cv
178.927 72.476 178.994 72.476 179.065 72.481 cv
179.098 72.282 179.098 72.282 179.294 72.095 cv
179.162 69.74 178.894 67.432 178.842 65.13 cv
178.874 65.076 178.899 65.046 178.929 65.021 cv
cp
201.806 57.369 mo
201.457 56.755 200.762 55.194 200.228 55.018 cv
199.958 54.738 199.626 54.588 199.493 54.374 cv
199.248 54.37 198.971 54.283 198.834 54.131 cv
198.56 54.126 198.445 54.046 195.293 53.422 cv
193.968 53.454 192.806 53.467 191.516 53.782 cv
191.516 53.696 191.491 53.612 191.491 53.53 cv
191.825 53.284 192.251 52.848 192.509 52.49 cv
193.26 52.193 193.271 51.475 193.61 50.926 cv
193.674 50.926 193.692 50.96 193.763 50.96 cv
193.866 50.463 193.899 50.187 193.853 49.739 cv
193.708 49.739 li
193.587 49.316 193.605 49.265 193.703 48.876 cv
192.596 48.163 192.74 47.889 191.491 48.15 cv
191.036 48.556 190.185 49.517 190.044 50.068 cv
189.96 50.068 189.912 50.1 189.818 50.096 cv
189.424 50.835 188.278 51.454 188.019 52.061 cv
187.965 52.085 187.905 52.085 187.828 52.085 cv
187.826 52.144 185.57 54.329 185.462 54.354 cv
184.901 55.152 184.626 55.099 183.968 55.666 cv
183.862 55.889 183.723 56.218 183.598 56.601 cv
183.394 57.353 183.241 58.26 183.568 58.791 cv
183.649 58.9 183.764 59.017 183.897 59.071 cv
184.088 59.325 184.273 59.554 184.472 59.779 cv
184.265 60.324 184.153 60.464 183.547 61.842 cv
183.522 61.842 li
183.503 61.842 183.443 61.842 183.412 61.838 cv
183.404 62.369 183.236 62.976 183.499 63.422 cv
183.583 63.531 183.66 63.648 183.8 63.738 cv
183.889 65.312 186.425 64.186 187.235 63.7 cv
187.241 63.506 187.241 63.506 187.527 63.117 cv
188.308 62.722 188.735 61.698 188.885 60.891 cv
189.391 60.402 188.776 58.975 188.735 58.365 cv
189.151 57.953 189.878 57.699 190.492 57.592 cv
190.64 57.265 191.2 56.827 191.554 57.164 cv
191.889 60.275 188.982 62.316 187.578 64.732 cv
187.164 64.917 187.164 64.917 186.998 64.916 cv
186.931 65.336 186.906 65.394 187.042 65.855 cv
187.309 65.943 187.56 66.009 187.838 66.089 cv
187.897 66.287 187.953 66.453 187.968 66.649 cv
189.749 66.761 191.072 65.534 191.94 64.158 cv
192.03 64.163 192.136 64.134 192.218 64.134 cv
192.221 64.049 192.256 63.967 192.256 63.879 cv
192.701 63.669 192.481 63.28 192.99 63.117 cv
192.99 62.984 193.02 62.838 193.02 62.709 cv
194.006 61.47 193.638 60.324 195.01 59.407 cv
195.074 59.103 195.166 58.801 195.255 58.525 cv
195.194 58.498 195.17 58.462 195.132 58.435 cv
195.17 58.213 195.202 57.997 195.263 57.775 cv
195.204 57.748 195.143 57.742 195.094 57.716 cv
195.094 57.604 195.069 57.496 195.074 57.383 cv
195.012 57.383 194.959 57.357 194.903 57.325 cv
194.941 57.189 194.941 57.019 194.966 56.853 cv
195.496 56.918 196.119 57.144 196.716 57.131 cv
196.713 57.184 196.731 57.265 196.731 57.325 cv
197.587 57.78 197.755 59.224 197.467 60.14 cv
197.751 61.474 197.25 62.237 196.642 63.451 cv
196.282 63.721 195.83 64.158 195.761 64.603 cv
194.177 65.049 193.041 67.032 191.368 67.388 cv
190.351 67.318 190.262 67.214 189.322 67.114 cv
189.322 67.17 189.32 67.222 189.347 67.304 cv
189.208 67.332 189.089 67.357 188.982 67.388 cv
188.972 67.967 189.864 68.341 190.126 68.977 cv
190.536 69.384 191.616 69.923 192.188 70.173 cv
192.852 70.076 192.931 69.99 193.296 69.996 cv
193.638 69.785 193.835 69.532 194.288 69.541 cv
194.699 68.996 195.417 69.201 195.597 68.708 cv
196.04 68.656 196.04 68.656 196.542 68.691 cv
196.593 68.582 196.593 68.582 198.154 67.914 cv
198.585 67.359 199.079 67.282 199.502 66.624 cv
200.376 66.195 201.589 64.22 201.579 63.329 cv
201.717 63.329 li
201.839 62.365 202.083 61.394 202.209 60.484 cv
202.092 58.873 202.092 58.873 201.806 57.369 cv
cp
210.554 61.856 mo
210.616 61.856 li
212.667 61.609 213.489 60.318 212.703 58.115 cv
212.393 58.054 212.393 57.942 212.273 57.78 cv
211.762 57.463 211.177 57.184 210.628 57.001 cv
209.331 56.617 208.192 56.883 208.225 58.827 cv
208.299 58.847 208.355 58.883 208.439 58.915 cv
208.167 60.847 208.815 61.524 210.554 61.856 cv
cp
209.688 55.156 mo
209.993 55.297 210.322 55.532 210.644 55.728 cv
211.085 55.99 211.497 56.206 211.865 56.163 cv
212.526 56.064 213.302 56.098 213.588 55.99 cv
213.811 55.686 213.836 55.387 214.194 55.282 cv
214.186 54.865 214.39 54.204 214.002 54.081 cv
214.376 53.094 213.998 52.645 213.111 52.407 cv
212.705 51.677 211.593 51.552 210.705 51.762 cv
210.322 51.865 209.982 52.054 209.762 52.277 cv
209.612 52.301 209.507 52.296 209.372 52.325 cv
209.308 53.073 208.96 53.563 209.645 54.102 cv
209.666 54.439 209.661 54.795 209.688 55.156 cv
cp
215.954 60.521 mo
214.991 60.705 215.165 61.56 214.418 61.633 cv
214.393 61.75 214.363 61.883 214.336 61.992 cv
214.278 61.99 214.186 61.99 214.143 61.99 cv
214.143 62.041 214.097 62.134 214.097 62.183 cv
214.05 62.157 214.023 62.134 213.998 62.101 cv
213.961 62.155 213.961 62.207 213.925 62.297 cv
213.854 62.291 213.772 62.291 213.658 62.287 cv
213.571 62.593 213.095 63.129 212.82 63.216 cv
212.817 63.329 212.815 63.439 212.815 63.58 cv
212.621 63.603 212.417 63.603 212.255 63.631 cv
212.273 63.709 212.304 63.797 212.33 63.851 cv
212.184 63.847 212.056 63.842 211.949 63.842 cv
211.798 64.394 211.348 64.252 211.267 64.778 cv
211.215 64.778 211.149 64.778 211.062 64.774 cv
211.062 64.916 211.06 65.021 211.06 65.158 cv
210.929 65.188 210.779 65.324 210.501 65.429 cv
210.447 65.454 210.398 65.483 210.309 65.511 cv
210.281 65.68 210.251 65.843 210.217 65.976 cv
210.028 65.976 li
209.995 66.142 209.966 66.312 209.931 66.449 cv
209.791 66.446 209.658 66.446 209.55 66.446 cv
209.226 67.267 208.373 67.425 208.021 68.33 cv
207.941 68.33 207.88 68.33 207.827 68.328 cv
207.77 68.417 207.714 68.494 207.691 68.603 cv
207.694 68.185 207.727 67.774 207.732 67.357 cv
207.642 67.357 207.566 67.357 207.459 67.351 cv
207.362 67.996 207.044 68.679 206.486 68.998 cv
206.412 70.696 205.724 71.821 207.288 72.925 cv
207.873 72.824 208.649 72.666 209.259 72.476 cv
209.435 72.073 209.939 71.907 210.327 71.662 cv
210.396 71.578 210.412 71.526 210.412 71.476 cv
210.537 71.222 210.644 71.146 210.973 71.09 cv
211.604 69.91 211.719 69.465 213.021 69.155 cv
213.024 68.99 213.06 68.826 213.065 68.656 cv
213.147 68.629 213.208 68.595 213.282 68.577 cv
213.285 68.496 213.285 68.384 213.285 68.299 cv
213.095 68.296 213.095 68.296 213.095 68.214 cv
213.234 68.214 213.353 68.214 213.489 68.217 cv
213.489 68.105 213.489 68.025 213.494 67.914 cv
213.688 67.914 li
213.729 67.446 213.555 66.915 214.077 66.818 cv
214.286 65.657 214.871 64.693 215.029 63.588 cv
215.106 63.526 215.19 63.506 215.279 63.445 cv
215.282 63.227 215.285 62.976 215.292 62.735 cv
215.813 62.297 215.943 61.381 216.125 60.721 cv
216.069 60.721 216.007 60.721 215.951 60.718 cv
215.954 60.631 215.954 60.58 215.954 60.521 cv
cp
222.272 66.939 mo
222.267 66.992 222.267 67.047 222.267 67.101 cv
222.178 67.129 222.076 67.125 221.984 67.148 cv
221.872 67.183 221.792 67.183 221.713 67.205 cv
221.677 67.259 221.649 67.318 221.624 67.369 cv
221.32 67.336 221.32 67.336 220.847 67.473 cv
220.492 67.021 220.466 64.693 221.187 64.705 cv
221.496 65.091 221.739 65.316 222.009 65.461 cv
222.341 65.627 222.73 65.697 223.342 65.785 cv
223.54 66.618 223.077 66.748 222.272 66.939 cv
cp
236.264 56.023 mo
236.233 55.97 236.215 55.889 236.195 55.824 cv
236.051 55.796 235.932 55.74 235.801 55.709 cv
235.768 55.657 235.752 55.576 235.752 55.517 cv
235.373 55.346 234.504 54.998 234.405 54.658 cv
233.787 54.629 233.156 54.621 232.517 54.579 cv
231.878 54.877 231.878 54.877 226.752 56.243 cv
226.982 55.142 227.194 54.42 227.654 53.432 cv
228.21 53.297 228.21 53.297 228.607 53.11 cv
230.236 53.134 231.842 53.406 233.469 53.288 cv
234.149 53.11 234.538 52.917 235.012 52.876 cv
235.042 52.811 235.042 52.732 235.066 52.678 cv
235.539 52.544 235.817 52.439 236.251 52.144 cv
236.251 51.861 li
236.749 51.706 236.588 51.094 236.453 50.731 cv
236.376 50.726 236.304 50.726 236.266 50.726 cv
236.138 50.197 235.719 50.023 235.321 49.743 cv
233.855 48.856 231.741 49.022 230.285 49.832 cv
229.646 49.88 229.007 49.925 228.375 49.968 cv
228.001 49.104 228.014 48.525 227.554 47.684 cv
227.345 47.684 li
227.345 47.493 li
227.296 47.493 227.246 47.489 227.194 47.489 cv
227.194 47.292 li
225.496 47.153 225.519 47.85 225.496 49.429 cv
225.353 49.788 225.209 50.147 225.064 50.507 cv
224.781 50.612 224.762 50.557 224.67 50.859 cv
224.084 50.909 223.437 51.312 222.964 51.528 cv
222.711 51.575 222.464 51.633 222.216 51.681 cv
221.021 51.941 219.966 52.118 218.656 52.467 cv
217.56 53.221 217.805 53.616 217.813 54.946 cv
218.444 55.562 218.983 55.297 219.8 55.201 cv
219.808 55.084 219.826 54.977 219.875 54.84 cv
219.96 54.865 220.001 54.889 220.091 54.922 cv
220.091 54.865 220.099 54.787 220.099 54.737 cv
220.175 54.737 220.175 54.737 220.17 54.926 cv
220.868 54.715 221.511 54.463 222.175 54.291 cv
222.814 54.107 223.514 53.952 224.237 53.899 cv
224.364 54.271 224.346 55.709 224.122 55.925 cv
224.163 56.595 224.18 57.733 223.508 58.163 cv
223.483 58.22 223.455 58.301 223.419 58.359 cv
223.361 58.381 223.284 58.41 223.2 58.435 cv
222.996 58.794 222.438 59.232 222.126 59.583 cv
222.132 59.472 222.101 59.361 222.101 59.282 cv
222.101 59.199 li
222.196 59.199 222.291 59.199 222.382 59.205 cv
222.449 58.73 222.449 58.73 222.618 58.346 cv
222.63 57.318 222.63 57.318 222.515 56.18 cv
222.454 56.176 222.398 56.176 222.313 56.176 cv
222.291 56.038 222.259 55.982 222.147 55.873 cv
222.096 55.782 221.992 55.707 221.881 55.562 cv
219.644 54.615 219.266 58.213 219.029 59.625 cv
218.553 61.086 218.055 62.38 217.876 63.927 cv
217.677 63.927 li
217.524 64.89 217.407 65.926 217.277 66.944 cv
217.08 66.944 li
217.269 69.36 216.322 71.667 217.503 74.128 cv
217.751 74.246 219.187 74.237 219.609 74.246 cv
220.167 73.368 220.673 70.185 221.029 69.968 cv
221.307 70.057 221.606 70.084 221.943 70.089 cv
222.413 70.067 222.914 69.99 223.358 69.869 cv
223.54 71.36 223.93 72.647 225.84 72.671 cv
226.768 71.907 226.852 71.806 227.061 70.662 cv
227.319 66.703 227.695 67.707 231.498 67.404 cv
231.834 67.242 232.169 67.109 232.499 66.975 cv
232.501 66.918 232.527 66.867 232.532 66.781 cv
233.038 66.681 233.061 66.482 233.048 66.017 cv
232.652 65.785 232.713 65.483 232.663 65.093 cv
231.812 64.75 231.626 64.551 231.263 64.381 cv
229.927 64.361 228.476 65.004 227.251 65.291 cv
227.233 65.234 227.171 65.203 227.143 65.151 cv
227.24 64.541 227.156 64.402 227.214 63.985 cv
227.787 63.744 227.787 63.744 228.454 63.669 cv
229.539 63.021 233.207 62.556 233.36 61.166 cv
232.957 60.992 232.928 60.772 232.846 60.464 cv
232.598 60.291 232.326 60.152 232.07 60.006 cv
231.891 59.265 231.452 59.389 230.872 59.38 cv
229.298 59.912 227.878 60.498 226.329 60.673 cv
226.283 60.09 226.318 59.754 226.43 59.265 cv
226.484 59.229 226.571 59.206 226.65 59.185 cv
226.65 59.123 226.683 59.046 226.711 58.994 cv
228.62 58.102 230.87 56.911 233.069 56.945 cv
234.277 57.711 234.223 59.129 234.372 60.51 cv
234.315 64.344 234.465 69.085 232.356 72.542 cv
230.081 72.931 228.392 73.404 226.231 72.925 cv
226.425 74.039 227.603 73.722 228.29 74.4 cv
229.804 75.003 231.293 75.419 232.867 75.938 cv
233.278 75.916 233.539 75.864 233.921 75.703 cv
234.149 75.405 234.149 75.405 236.503 70.338 cv
236.622 69.812 236.769 69.283 236.876 68.756 cv
236.908 66.847 236.655 65.265 236.984 63.519 cv
237.047 63.3 237.104 63.053 237.167 62.804 cv
237.178 62.247 237.408 59.425 237.074 57.584 cv
236.92 56.786 236.682 56.172 236.264 56.023 cv
cp
240.174 47.208 mo
240.174 47.157 240.176 47.09 240.176 47.01 cv
239.457 46.889 238.208 46.682 237.62 46.95 cv
237.589 47.055 237.564 47.192 237.533 47.3 cv
237.398 47.3 237.313 47.362 237.221 47.444 cv
236.864 47.872 237.004 49.104 237.188 49.544 cv
237.188 49.573 237.213 49.606 237.213 49.606 cv
237.885 49.885 237.792 50.695 238.34 50.868 cv
238.422 51.092 238.389 51.061 238.695 51.235 cv
238.695 51.288 238.695 51.371 238.69 51.428 cv
238.769 51.458 238.828 51.48 238.892 51.54 cv
239.495 51.524 241.185 51.716 241.441 50.913 cv
241.536 50.917 241.632 50.917 241.722 50.917 cv
242.135 49.067 242.1 47.818 240.174 47.208 cv
cp
264.261 73.91 mo
264.228 73.881 264.21 73.853 264.169 73.796 cv
262.76 73.796 262.139 72.85 260.98 72.501 cv
260.844 72.412 260.704 72.302 260.566 72.221 cv
259.797 72.011 258.226 70.546 258.239 69.765 cv
258.193 69.765 258.137 69.765 258.106 69.736 cv
257.892 69.242 257.534 69.12 257.455 68.595 cv
257.092 68.507 257.092 68.507 256.134 68.623 cv
255.57 70.53 253.859 70.505 252.51 71.541 cv
252.069 71.699 251.486 71.748 251.087 71.94 cv
251.087 71.99 251.085 72.043 251.085 72.132 cv
250.423 72.095 250.02 72.42 249.331 72.466 cv
249.294 72.526 249.294 72.601 249.272 72.661 cv
248.689 72.873 248.137 72.887 247.581 73.103 cv
247.55 73.185 247.55 73.242 247.517 73.326 cv
247.182 73.289 246.878 73.287 246.551 73.282 cv
246.516 73.311 246.501 73.339 246.458 73.371 cv
243.331 73.102 243.213 71.546 243.244 69.187 cv
243.566 69.166 243.832 69.138 244.118 69.146 cv
246.337 70.312 251.026 68.577 252.362 66.746 cv
252.689 66.582 252.743 66.449 252.918 66.392 cv
252.924 66.282 252.95 66.175 252.98 66.058 cv
253.095 66.046 253.203 66.002 253.31 65.981 cv
253.22 64.904 253.506 64.541 253.718 63.689 cv
253.568 63.656 253.568 63.656 253.535 63.542 cv
253.685 63.349 253.685 63.349 253.726 63.136 cv
253.767 63.103 253.823 63.077 253.881 63.077 cv
254.104 62.472 253.954 61.775 254.125 61.141 cv
253.126 61.132 251.634 61.801 250.921 61.284 cv
250.883 61.207 250.86 61.119 250.834 61.036 cv
250.705 61.036 li
250.705 60.982 250.708 60.929 250.709 60.864 cv
250.643 60.833 250.589 60.833 250.567 60.832 cv
250.199 60.111 249.864 59.108 250.096 58.417 cv
250.26 58.314 252.436 57.812 255.192 56.911 cv
255.59 56.697 255.616 56.504 255.818 56.115 cv
255.503 55.176 255.734 53.897 255.695 52.981 cv
255.475 52.981 li
254.998 51.144 254.615 50.859 255.56 49.075 cv
256.765 48.257 257.552 49.184 258.676 49.84 cv
258.936 50.612 259.447 51.706 259.434 52.65 cv
259.712 53.239 259.692 56.37 261.442 54.57 cv
262.193 54.691 262.816 54.84 263.587 55.09 cv
263.624 55.181 263.624 55.265 263.643 55.351 cv
263.896 55.269 263.953 55.325 264.251 55.467 cv
264.272 56.218 264.838 56.67 264.754 57.305 cv
264.188 57.908 264.131 58.49 263.263 58.537 cv
263.041 58.912 262.734 59.187 262.264 59.237 cv
262.256 59.322 262.256 59.402 262.256 59.491 cv
262.124 59.511 261.973 59.564 261.858 59.615 cv
261.833 59.641 261.833 59.705 261.833 59.754 cv
260.637 59.652 259.917 59.81 259.812 61.029 cv
260.172 61.312 260.392 61.814 260.55 62.316 cv
260.596 62.345 260.653 62.345 260.716 62.373 cv
260.742 62.482 260.768 62.622 260.793 62.736 cv
260.906 62.762 261.01 62.767 261.12 62.798 cv
261.557 63.495 261.557 63.495 261.667 63.887 cv
262.19 63.976 262.599 63.985 262.596 64.624 cv
262.813 64.653 262.841 64.624 263.033 64.908 cv
263.414 64.964 263.703 65.167 264.06 65.258 cv
264.06 65.394 li
265.23 65.826 266.476 66.482 267.801 66.502 cv
268.384 67.032 269.551 66.853 270.062 67.615 cv
270.251 67.727 270.424 67.865 270.619 67.984 cv
270.581 68.15 270.547 68.321 270.519 68.487 cv
270.078 68.786 269.781 69.498 269.921 70.06 cv
269.163 70.4 267.505 71.599 267.137 72.397 cv
266.517 72.78 266.555 72.587 266.215 73.302 cv
265.981 73.46 265.753 73.622 265.531 73.788 cv
265.211 73.754 264.961 73.614 264.808 73.888 cv
264.626 73.91 264.456 73.91 264.261 73.91 cv
cp
296.944 64.39 mo
295.741 64.503 295.657 64.574 293.524 64.881 cv
293.549 64.672 293.549 64.672 293.943 64.241 cv
295.118 62.418 295.146 60.409 293.598 59.996 cv
293.01 59.86 292.209 59.929 291.208 60.274 cv
290.502 60.63 289.831 61.036 289.22 61.444 cv
287.938 62.283 286.681 63.173 285.253 63.776 cv
284.784 64.103 284.694 64.361 284.543 64.411 cv
284.48 64.776 284.495 65.715 285.052 65.85 cv
285.052 66.013 li
285.139 66.013 285.192 66.034 285.258 66.034 cv
285.285 66.089 285.285 66.137 285.31 66.195 cv
285.522 66.217 285.522 66.217 286.375 66.076 cv
286.83 65.461 288.05 64.59 289.182 64.017 cv
289.68 63.74 290.186 63.535 290.574 63.439 cv
290.292 63.955 290.237 64.344 290.199 64.94 cv
290.751 65.468 290.15 65.976 289.143 66.479 cv
287.57 67.238 285.024 67.876 284.286 68.204 cv
284.077 68.201 283.473 68.449 283.282 68.449 cv
283.006 68.446 282.749 68.44 282.48 68.437 cv
282.396 68.533 282.33 68.642 282.265 68.747 cv
281.203 69.276 281.172 69.378 280.667 69.552 cv
279.561 69.724 277.471 69.873 276.876 70.824 cv
276.812 70.82 276.758 70.82 276.669 70.82 cv
276.179 72.139 276.44 72.636 277.484 73.51 cv
277.484 73.639 li
278.041 73.67 278.452 73.754 279.111 73.741 cv
279.111 73.684 279.111 73.613 279.114 73.56 cv
280.145 73.053 280.145 73.053 281.92 72.016 cv
282.722 71.744 283.501 71.33 284.327 71.246 cv
284.926 71.075 285.152 70.74 285.805 70.696 cv
285.805 70.645 285.805 70.592 285.81 70.54 cv
286.074 70.471 286.37 70.415 286.643 70.374 cv
287.282 70.015 288.207 69.789 289.097 69.57 cv
290.012 69.329 290.906 69.077 291.374 68.673 cv
293.281 69.295 291.386 71.296 290.917 72.305 cv
290.466 72.527 290.466 72.527 290.379 72.665 cv
290.134 72.684 289.608 72.782 289.046 72.928 cv
287.892 73.194 286.493 73.641 286.408 73.853 cv
286.053 73.948 285.718 74.051 285.405 74.17 cv
285.369 74.198 285.361 74.253 285.343 74.276 cv
285.013 74.32 284.692 74.371 284.368 74.442 cv
284.365 74.521 284.332 74.624 284.332 74.757 cv
285.085 75.157 285.085 75.157 285.971 75.481 cv
285.969 75.584 285.966 75.716 285.966 75.821 cv
286.199 75.901 286.308 76.06 286.904 76.505 cv
287.581 76.675 288.245 76.704 288.993 76.72 cv
289.258 76.727 289.524 76.727 289.782 76.733 cv
291.171 76.494 291.859 75.676 293.051 75.139 cv
293.051 75.089 293.08 75.016 293.084 74.967 cv
293.2 74.937 293.292 74.884 293.378 74.865 cv
296.047 73.831 295.782 71.388 295.352 68.99 cv
295.235 68.909 295.205 68.683 295.031 68.419 cv
295.649 67.225 298.369 67.686 299.608 67.942 cv
301.173 67.853 301.646 67.164 301.725 65.914 cv
300.642 63.669 299.472 63.248 296.944 64.39 cv
cp
305.635 56.567 mo
305.091 55.434 304.713 55.088 303.518 54.715 cv
302.399 54.695 299.301 55.122 298.713 54.798 cv
298.859 54.702 298.859 54.702 299.038 54.259 cv
299.907 53.511 299.881 52.944 299.894 51.957 cv
299.51 50.913 299.303 50.724 299.251 50.469 cv
299.158 50.469 299.074 50.469 298.949 50.463 cv
298.9 50.305 298.859 50.198 298.808 50.069 cv
299.436 49.998 300.047 49.926 300.665 49.865 cv
300.709 49.784 300.731 49.709 300.767 49.657 cv
300.971 49.557 300.971 49.557 301.472 49.516 cv
301.502 49.433 301.534 49.387 301.559 49.334 cv
302.81 48.827 303.224 45.9 302.026 45.647 cv
301.988 45.564 301.973 45.518 301.973 45.489 cv
301.621 45.354 301.452 45.353 301.362 45.065 cv
300.124 44.995 298.584 45.516 298.277 44.133 cv
297.758 43.689 297.613 44.099 297.258 43.369 cv
296.41 43.38 295.503 43.157 295.513 44.149 cv
295.355 44.165 295.209 44.198 295.034 44.215 cv
294.944 44.683 294.857 45.15 294.783 45.619 cv
294.563 45.924 294.451 46.028 294.413 46.415 cv
294.209 46.411 294.006 46.435 293.799 46.429 cv
293.587 46.46 293.412 46.453 293.208 46.478 cv
293.208 46.663 li
292.729 46.732 292.291 46.8 291.971 47.079 cv
291.889 46.585 291.943 46.044 291.445 45.798 cv
291.421 45.665 291.394 45.568 291.361 45.436 cv
291.217 45.436 li
291.029 44.781 290.377 44.779 289.769 44.782 cv
289.728 44.996 289.565 45.124 289.456 45.277 cv
289.402 45.332 289.333 45.377 289.269 45.453 cv
289.249 45.404 289.22 45.377 289.187 45.352 cv
288.97 45.715 288.97 45.715 288.605 46.927 cv
288.4 46.927 li
288.234 47.573 288.295 47.731 288.464 48.438 cv
288.37 49.03 288.265 49.599 288.142 50.196 cv
288.14 50.56 288.042 50.641 287.922 51.785 cv
287.848 52.172 287.788 52.555 287.718 52.95 cv
287.631 52.948 287.573 52.945 287.509 52.945 cv
287.445 53.54 287.56 53.955 287.634 54.608 cv
287.693 54.611 287.726 54.611 287.777 54.611 cv
287.979 55.211 287.948 55.703 288.676 56.053 cv
288.645 56.105 288.612 56.159 288.584 56.236 cv
287.701 56.407 286.932 56.678 286.071 56.719 cv
286.498 55.92 286.498 55.92 286.561 55.663 cv
286.498 55.663 286.439 55.658 286.37 55.658 cv
287.345 54.296 287.212 53.276 287.328 51.687 cv
287.266 51.664 287.184 51.664 287.124 51.633 cv
287.083 50.305 286.845 49.525 286.286 48.354 cv
286.17 48.354 286.079 48.32 285.954 48.32 cv
285.913 47.512 285.742 47.202 285.192 46.592 cv
285.103 46.588 284.993 46.588 284.891 46.584 cv
284.896 46.54 284.896 46.482 284.896 46.432 cv
282.099 46.522 284.243 48.342 283.292 49.162 cv
283.04 50.304 283.2 51.428 282.866 52.696 cv
282.322 53.153 282.641 55.317 282.725 56.04 cv
282.953 56.339 283.974 57.235 284.03 57.571 cv
282.01 58.294 282.01 58.294 281.43 58.417 cv
281.369 57.925 281.315 57.792 281.586 57.436 cv
281.471 56.807 281.369 56.204 281.264 55.582 cv
281.101 55.549 280.996 55.499 280.878 55.472 cv
280.763 55.211 280.676 54.951 280.551 54.686 cv
279.292 54.512 279.116 54.794 278.608 55.723 cv
278.077 57.272 277.637 58.932 277.03 60.555 cv
275.944 61.788 276.289 62.806 276.626 64.24 cv
276.672 64.24 276.769 64.241 276.825 64.241 cv
276.886 64.377 276.938 64.506 276.999 64.636 cv
277.234 64.64 277.471 64.672 277.737 64.704 cv
277.819 65.041 278.026 64.993 278.105 65.332 cv
279.422 65.792 280.11 65.074 280.414 64.042 cv
280.572 64.042 280.695 64.042 280.833 64.046 cv
281.047 63.577 281.579 63.274 281.645 62.989 cv
281.745 62.971 281.792 62.945 281.887 62.947 cv
282.735 61.664 285.841 60.637 287.491 60.485 cv
288.081 60.332 288.645 60.186 289.238 60.069 cv
290.18 59.821 291.133 59.625 292.129 59.478 cv
292.577 59.303 293.08 59.136 293.611 58.983 cv
295.831 58.392 298.629 58.15 300.721 57.978 cv
300.522 58.176 300.335 58.435 300.042 58.509 cv
299.709 59.284 298.44 59.373 298.31 60.251 cv
298.456 60.257 298.571 60.257 298.711 60.262 cv
298.754 60.448 298.75 60.623 298.772 60.808 cv
299.036 60.913 299.184 60.86 299.27 61.174 cv
299.738 61.389 301.409 61.308 301.63 60.745 cv
302.013 60.699 302.432 60.439 302.726 60.393 cv
302.726 60.32 302.729 60.21 302.729 60.132 cv
302.908 60.082 303.058 60.033 303.26 59.988 cv
303.26 59.907 303.295 59.855 303.321 59.78 cv
303.502 59.749 303.667 59.733 303.834 59.709 cv
303.834 59.53 li
303.999 59.473 304.159 59.434 304.331 59.353 cv
304.331 59.194 li
304.629 59.091 304.631 58.912 304.961 58.845 cv
304.963 58.784 304.963 58.712 304.963 58.659 cv
305.763 58.41 305.626 57.135 305.635 56.567 cv
false sop
.750179 .679652 .670191 .901488 cmyk
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
